<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
  xmlns:cgel="http://aor-simulation.org/code-generator/expression-language"
  xmlns:allex="http://aor-simulation.org/expression-language/ALLEX"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dc="http://purl.org/dc/terms/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  targetNamespace="http://aor-simulation.org/code-generator/expression-language"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.0">
  
  <xs:annotation>
    <xs:documentation xml:lang="en">
      <dc:title>
        CGEL: Code Generator Expression Language
      </dc:title>
      <dc:creator>
        Thomas Grundmann
      </dc:creator>
      <dc:created>
        2009-12-14
      </dc:created>
      <dc:description>
        This schema defines an XML based expression language for the AORS code
        generator. It is based on the expression language ALLEX and extends it
        with new datatypes that are derived from the ALLEX datatypes. It also
        provides functionalities to access variables and literal values of these
        new types.
      </dc:description>
      <dc:requires>
        ../aorsl/ersl/ALLEX/ALLEX.xsd
      </dc:requires>
      <dc:license>
        This program is free software; you can redistribute it and/or
        modify it under the terms of the GNU General Public License as
        published by the Free Software Foundation; either version 3 of
        the License, or (at your option) any later version. This
        program is distributed in the hope that it will be useful, but
        WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU General Public License for more details.
      </dc:license>
      <dc:license>
        http://www.gnu.org/licenses/gpl.html
      </dc:license>
    </xs:documentation>
  </xs:annotation>
  
  <xs:import namespace="http://aor-simulation.org/expression-language/ALLEX" schemaLocation="../aorsl/ersl/ALLEX/ALLEX.xsd"/>
  
  <!--####################################################################-->
  <!--### Boolean datatype, literal and expression for code generation ###-->
  <!--####################################################################-->
    
  <xs:simpleType name="Boolean.datatype">
    <xs:restriction base="allex:Boolean.datatype"/>
  </xs:simpleType>
  
  <xs:element name="BooleanLiteral" substitutionGroup="allex:BooleanTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:BooleanOperator.type">
          <xs:attribute name="value" type="cgel:Boolean.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="BooleanExpression" substitutionGroup="allex:BooleanTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:BooleanTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <!--####################################################################-->
  <!--### Integer datatype, literal and expression for code generation ###-->
  <!--####################################################################-->
  
  <xs:simpleType name="Integer.datatype">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
  
  <xs:element name="IntegerLiteral" substitutionGroup="allex:IntegerTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:IntegerOperator.type">
          <xs:attribute name="value" type="cgel:Integer.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="IntegerExpression" substitutionGroup="allex:IntegerTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:IntegerTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <!--#################################################################-->
  <!--### Long datatype, literal and expression for code generation ###-->
  <!--#################################################################-->
  
  <xs:simpleType name="Long.datatype">
    <xs:restriction base="xs:long"/>
  </xs:simpleType>
  
  <xs:element name="LongLiteral" substitutionGroup="allex:IntegerTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:IntegerOperator.type">
          <xs:attribute name="value" type="cgel:Long.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="LongExpression" substitutionGroup="allex:IntegerTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:IntegerTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <!--##################################################################-->
  <!--### Float datatype, literal and expression for code generation ###-->
  <!--##################################################################-->
  
  <xs:simpleType name="Float.datatype">
    <xs:restriction base="xs:float"/>
  </xs:simpleType>
  
  <xs:element name="FloatLiteral" substitutionGroup="allex:FloatTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:FloatOperator.type">
          <xs:attribute name="value" type="cgel:Float.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="FloatExpression" substitutionGroup="allex:FloatTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:FloatTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>  

  <!--###################################################################-->
  <!--### Double datatype, literal and expression for code generation ###-->
  <!--###################################################################-->
  
  <xs:simpleType name="Double.datatype">
    <xs:restriction base="xs:double"/>
  </xs:simpleType>
  
  <xs:element name="DoubleLiteral" substitutionGroup="allex:FloatTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:FloatOperator.type">
          <xs:attribute name="value" type="cgel:Double.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="DoubleExpression" substitutionGroup="allex:FloatTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:FloatTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <!--###################################################################-->
  <!--### String datatype, literal and expression for code generation ###-->
  <!--###################################################################-->
  
  <xs:simpleType name="String.datatype">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  
  <xs:element name="StringLiteral" substitutionGroup="allex:StringTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:StringOperator.type">
          <xs:attribute name="value" type="cgel:String.datatype" use="required"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="StringExpression" substitutionGroup="allex:StringTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="allex:StringTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <!--#############################################-->
  <!--### Object expression for code generation ###-->
  <!--#############################################-->
  
  <xs:complexType name="ObjectTerm.type">
    <xs:complexContent>
      <xs:restriction base="allex:Term.type"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectTerm" abstract="true" type="cgel:ObjectTerm.type"/>
  
  <xs:element name="ObjectExpression" substitutionGroup="cgel:ObjectTerm">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="cgel:ObjectTerm.type">
          <xs:sequence>
            <xs:any namespace="http://aor-simulation.org/code-generator/protected" processContents="lax"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
</xs:schema>