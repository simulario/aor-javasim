<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://aor-simulation.org ../../../ext/AORSL/AORSL_0-9.xsd"
    xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
    xmlns:dc="http://purl.org/dc/elements/1.1/" 
    scenarioName="Regional_Labor_Markets"
    scenarioTitle="Regional Labor Markets"
    simulationManagerDirectory="../../..">
    
    <SimulationParameters simulationSteps="4000" timeUnit="D" stepTimeDelay="0"/>
    <SimulationModel modelName="Regional_Labor_Markets" modelTitle="Regional Labor Markets">
        <documentation></documentation>
        
        <Statistics></Statistics>
        
        <DataTypes>
            <ComplexDataType name="ProductInStock">
                <Attribute name="firmId" type="Integer"/>
                <Attribute name="price" type="Float"/>
                <Attribute name="quantity" type="Float"/>
            </ComplexDataType>
            
            <ComplexDataType name="ProductList">
                <Attribute name="firmId" type="Integer"/>
                <Attribute name="value" type="Float"/>
                <Attribute name="prob" type="Float"/>
            </ComplexDataType>
        </DataTypes>
        
        <Globals>
            <GlobalVariable name="period" dataType="Integer"/>
        </Globals>
        
        <EntityTypes>
            <!--<MessageType name="TellSalesRevenue">
                <Attribute name="revenue" type="Float"/>
                <Attribute name="quantity" type="Float"/>
                </MessageType>-->
            
            <ExogenousEventType name="Init"/>
            <ExogenousEventType name="AtWeeklyIndividualConsumption" periodicity="5"/>
            <ExogenousEventType name="EndOfMonth" periodicity="20"/>
            
            <AgentType name="Mall">
                <documentation>
                    <description>Consumption goods are sold at malls. Malls are treated as local market platforms where CGPs store and offer their products and consumers come to buy goods at posted prices.</description>
                </documentation>
                
                <ComplexDataProperty name="productsInStock" type="ProductInStock" upperMultiplicity="unbounded"/>
            </AgentType>
            
            <AgentType name="Firm">
                <documentation>
                    <description>CGPs use a vintage capital stock and labor to produce the consumption good on a monthly basis. The consumption good is then distributed to the different regions this producer serves. For simplicity it is assumed that all producers offer their products in all regions. Each producer keeps a stock of its products at each of the regional malls and offers the good at a posted price that is updated once a month at the point in time when the stock is replenished.</description>
                </documentation>
                <Attribute name="region" type="Integer"/>
                <Attribute name="productSalesPrice" type="Float"/>
            </AgentType>
            
            <AgentType name="Household">
                <documentation>
                    <description>Each household determines once a month the budget which it will spend for consumption based on its income and its assets carried over from the previous period. Once a week the household then visits the (regional) mall to purchase consumption goods. When visiting the mall each consumer collects information about the range of goods provided and about the prices and inventories of the different goods.</description>
                </documentation>
                <Attribute name="region" type="Integer"/>
                <Attribute name="totalIncome" type="Float"/>
                <Attribute name="meanIncome" type="Float"/>
                <Attribute name="currentIncome" type="Float"/>
                <Attribute name="savings" type="Float"/>
                <Attribute name="cashOnHand" type="Float"/>
                <Attribute name="consumptionBudget" type="Float"/>
                <Attribute name="weekConsumptionBudget" type="Float"/>
                <Attribute name="remainingConsumptionBudget" type="Float"/>
                <Attribute name="selectFirstProductId" type="Integer"/>
                <Attribute name="selectSecondProductId" type="Integer"/>
                <Attribute name="spendBudgetForFirstProduct" type="Float"/>
                <Attribute name="spendBudgetForSecondProduct" type="Float"/>
                
                <ComplexDataProperty name="productsList" type="ProductList" upperMultiplicity="unbounded"/>
                
                <Function name="determineConsumptionBudget" resultType="void">
                    <documentation>
                        <description></description>
                    </documentation>
                    <Body language="Java"><![CDATA[
						if (getCashOnHand() > 0.9 * getMeanIncome()) {
							setConsumptionBudget(getCashOnHand() - 0.1 * (getCashOnHand() - 0.9 * getMeanIncome()));
							setSavings(getCashOnHand() - getConsumptionBudget());
						}
						else {
							setConsumptionBudget(getCashOnHand());
							setSavings(0.0);
						}
						]]></Body>
                </Function>
                
                <Function name="consumptionDecision" resultType="void">
                    <documentation>
                        <description></description>
                    </documentation>
                    <Parameter name="productsCollection" type="List" itemType="ProductInStock"/>
                    <Body language="Java"><![CDATA[
						int i, j, k;
						
						for (i = 0; i < productsCollection.size(); i++) {
							if (productsCollection.get(i).getQuantity() > 0) {
								sim.model.dataTypes.ProductList p = new sim.model.dataTypes.ProductList();
								p.setFirmId(productsCollection.get(i).getFirmId());
								p.setValue(Math.pow((productsCollection.get(i).getPrice()), (-1 * 8.5)));
								p.setProb(0.0);
								getProductsList().add(p);
							}
						}
						
						setSelectFirstProductId(0);
						setSelectSecondProductId(0);
						setSpendBudgetForFirstProduct(0.0);
						setSpendBudgetForSecondProduct(0.0);
						
						setWeekConsumptionBudget(getConsumptionBudget() / 4 + getRemainingConsumptionBudget());
						setSelectFirstProductId(productSelection());
						for (j = 0; j < productsCollection.size(); j++) {
							if (productsCollection.get(j).getFirmId() == getSelectFirstProductId()) {
								if (productsCollection.get(j).getQuantity() >= getWeekConsumptionBudget() / productsCollection.get(j).getPrice()) {
								    setSpendBudgetForFirstProduct(getWeekConsumptionBudget());
									productsCollection.get(j).setQuantity(productsCollection.get(j).getQuantity() - getWeekConsumptionBudget() / productsCollection.get(j).getPrice());
									setRemainingConsumptionBudget(0.0);
									setWeekConsumptionBudget(0.0);
									getProductsList().clear();
								}
								else {
								    setSpendBudgetForFirstProduct(productsCollection.get(j).getQuantity() * productsCollection.get(j).getPrice());
									productsCollection.get(j).setQuantity(0.0);
									setWeekConsumptionBudget(getWeekConsumptionBudget() - getSpendBudgetForFirstProduct());
									deleteProductRecordFromList(getSelectFirstProductId());
									setSelectSecondProductId(productSelection());
									getProductsList().clear();
									for (k = 0; k < productsCollection.size(); k++) {
										if (productsCollection.get(k).getFirmId() == getSelectSecondProductId()) {
											if (productsCollection.get(k).getQuantity() >= getWeekConsumptionBudget() / productsCollection.get(k).getPrice()) {
											    setSpendBudgetForSecondProduct(getWeekConsumptionBudget());
												productsCollection.get(k).setQuantity(productsCollection.get(k).getQuantity() - getWeekConsumptionBudget() / productsCollection.get(k).getPrice());
												setRemainingConsumptionBudget(0.0);
												setWeekConsumptionBudget(0.0);
											}
											else {
											    setSpendBudgetForSecondProduct(productsCollection.get(k).getQuantity() * productsCollection.get(k).getPrice());
												productsCollection.get(k).setQuantity(0.0);
												setRemainingConsumptionBudget(getWeekConsumptionBudget() - getSpendBudgetForSecondProduct());
												setWeekConsumptionBudget(0.0);
											}
										}
									}
								}
							}
						}
						]]></Body>
                </Function>
                
                <Function name="productSelection" resultType="Integer">
                    <documentation>
                        <description></description>
                    </documentation>
                    <Body language="Java"><![CDATA[
						double r = Math.random();
						double sumOfValues = 0.0;
						int FI = 0;
						int i, j;
						
						if (getProductsList().size() == 0) {
							FI = 0;
						}
						else if (getProductsList().size() == 1) {
							FI = (int)getProductsList().get(0).getFirmId();
						}
						else {
							for (i = 0; i < getProductsList().size(); i++) {
								sumOfValues += getProductsList().get(i).getValue();
							}
							
							for (j = 0; j < getProductsList().size(); j++) {
								if (j == 0) {
									getProductsList().get(j).setProb(getProductsList().get(j).getValue() / sumOfValues);
									if (r < getProductsList().get(j).getProb()) {
										FI = (int)getProductsList().get(j).getFirmId();
									}
								}
								else {
									getProductsList().get(j).setValue(getProductsList().get(j).getValue() + getProductsList().get(j - 1).getValue());
									getProductsList().get(j).setProb(getProductsList().get(j).getValue() / sumOfValues);
									if (r < getProductsList().get(j).getProb() && r >= getProductsList().get(j - 1).getProb()) {
										FI = (int)getProductsList().get(j).getFirmId();
									}
								}
							}
						}
							
						return FI;
						]]></Body>
                </Function>
                
                <Function name="deleteProductRecordFromList" resultType="void">
                    <documentation>
                        <description></description>
                    </documentation>
                    <Parameter name="firmId" type="Integer"/>
                    <Body language="Java"><![CDATA[
						int i;
						for (i = 0; i < getProductsList().size(); i++) {
							if (getProductsList().get(i).getFirmId() == firmId) {
								getProductsList().remove(i);
							}
						}
						]]></Body>
                </Function>
                
                <PeriodicTimeEventType name="AtStartOfMonthDetermineConsumptionBudget" periodicity="20"/>
                
                <ReactionRule name="AtStartOfMonthDetermineConsumptionBudget_Rule" agentVariable="h">
                    <documentation>
                        <description></description>
                    </documentation>
                    <WHEN eventType="AtStartOfMonthDetermineConsumptionBudget"/>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="totalIncome">
                                <ValueExpr language="Java"><![CDATA[h.getTotalIncome() + h.getCurrentIncome()]]></ValueExpr>
                            </Slot>
                            <Slot property="meanIncome">
                                <ValueExpr language="Java"><![CDATA[h.getTotalIncome() / Global.getPeriod()]]></ValueExpr>
                            </Slot>
                            <Slot property="cashOnHand">
                                <ValueExpr language="Java"><![CDATA[h.getSavings() + h.getCurrentIncome()]]></ValueExpr>
                            </Slot>
                            <!--<Slot property="currentIncome" value="0.0"/>-->
                            <Call procedure="determineConsumptionBudget" contextObjectVariable="h"/>
                        </UPDATE-AGT>
                    </DO>
                </ReactionRule>
            </AgentType>
        </EntityTypes>
        
        <EnvironmentRules>
            <EnvironmentRule name="Create_InitialProductsInStock_Rule">
                <documentation>
                    <description></description>
                </documentation>
                <WHEN eventType="Init"/>
                <FOR-ObjectVariable variable="m" objectType="Mall"/>
                <FOR-ObjectVariable variable="f" objectType="Firm"/>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="m">
                            <MultiValuedSlot property="productsInStock">
                                <AddLast>
                                    <ItemExpr language="Java"><![CDATA[
										new ProductInStock() {
											{
												setFirmId(f.getId());
												setPrice(f.getProductSalesPrice());
												setQuantity(8.0);
											}
										}
										]]></ItemExpr>
                                </AddLast>
                            </MultiValuedSlot>
                        </UpdateObject>
                    </UPDATE-ENV>
                </DO>
            </EnvironmentRule>
            
            <EnvironmentRule name="AtWeeklyIndividualConsumption_Rule">
                <documentation>
                    <description></description>
                </documentation>
                <WHEN eventType="AtWeeklyIndividualConsumption"/>
                <FOR-ObjectVariable variable="m" objectType="Mall"/>
                <FOR-ObjectVariable variable="h" objectType="Household"/>
                <IF language="Java"><![CDATA[m.getId() == h.getRegion()]]></IF>
                <THEN>
                    <UPDATE-ENV>
                        <Call procedure="consumptionDecision" contextObjectVariable="h">
                            <Argument parameter="productsCollection">
                                <ValueExpr language="Java"><![CDATA[m.getProductsInStock()]]></ValueExpr>
                            </Argument>
                        </Call>
                    </UPDATE-ENV>
                    <!--<SCHEDULE-EVT>
                        <InMessageEventExpr messageType="TellSalesRevenue">
                            <SenderIdRef language="Java"><![CDATA[m.getId()]]></SenderIdRef>
                            <ReceiverIdRef language="Java"><![CDATA[h.getSelectFirstProductId()]]></ReceiverIdRef>
                            <Slot property="revenue">
                                <ValueExpr language="Java"><![CDATA[h.getSpendBudgetForFirstProduct()]]></ValueExpr>
                            </Slot>
                        </InMessageEventExpr>
                        <InMessageEventExpr messageType="TellSalesRevenue">
                            <Condition language="Java"><![CDATA[h.getSelectSecondProductId() != 0]]></Condition>
                            <SenderIdRef language="Java"><![CDATA[m.getId()]]></SenderIdRef>
                            <ReceiverIdRef language="Java"><![CDATA[h.getSelectSecondProductId()]]></ReceiverIdRef>
                            <Slot property="revenue">
                                <ValueExpr language="Java"><![CDATA[h.getSpendBudgetForSecondProduct()]]></ValueExpr>
                            </Slot>
                        </InMessageEventExpr>
                        </SCHEDULE-EVT>-->
                </THEN>
            </EnvironmentRule>
            
            <EnvironmentRule name="EndOfMonth_Rule">
                <documentation>
                    <description></description>
                </documentation>
                <WHEN eventType="EndOfMonth"/>
                <DO>
                    <UPDATE-ENV>
                        <IncrementGlobalVariable name="period" value="1"/>
                    </UPDATE-ENV>
                </DO>
            </EnvironmentRule>
        </EnvironmentRules>
    </SimulationModel>
    
    <InitialState>
        <Agents type="Mall" rangeStartID="1" rangeEndID="2">
            <Slot property="productsInStock">
                <ValueExpr language="Java"><![CDATA[new ArrayList<sim.model.dataTypes.ProductInStock>()]]></ValueExpr>
            </Slot>
        </Agents>
        
        <Agents type="Firm" rangeStartID="101" rangeEndID="105">
            <Slot property="region" value="1"/>
            <Slot property="productSalesPrice" value="1.0"/>
        </Agents>
        
        <Agents type="Firm" rangeStartID="106" rangeEndID="110">
            <Slot property="region" value="2"/>
            <Slot property="productSalesPrice" value="1.0"/>
        </Agents>
        
        <Agents type="Household" rangeStartID="1001" rangeEndID="1200">
            <Slot property="productsList">
                <ValueExpr language="Java"><![CDATA[new ArrayList<sim.model.dataTypes.ProductList>()]]></ValueExpr>
            </Slot>
            <Slot property="region" value="1"/>
            <Slot property="totalIncome" value="0.0"/>
            <Slot property="meanIncome" value="0.0"/>
            <Slot property="currentIncome" value="1.0"/>
            <Slot property="savings" value="0.0"/>
            <Slot property="cashOnHand" value="0.0"/>
            <Slot property="consumptionBudget" value="0.0"/>
            <Slot property="weekConsumptionBudget" value="0.0"/>
            <Slot property="remainingConsumptionBudget" value="0.0"/>
            <Slot property="selectFirstProductId" value="0"/>
            <Slot property="selectSecondProductId" value="0"/>
            <Slot property="spendBudgetForFirstProduct" value="0.0"/>
            <Slot property="spendBudgetForSecondProduct" value="0.0"/>
            
            <PeriodicTimeEvent type="AtStartOfMonthDetermineConsumptionBudget" occurrenceTime="2"/>
        </Agents>
        
        <Agents type="Household" rangeStartID="1201" rangeEndID="1400">
            <Slot property="productsList">
                <ValueExpr language="Java"><![CDATA[new ArrayList<sim.model.dataTypes.ProductList>()]]></ValueExpr>
            </Slot>
            <Slot property="region" value="2"/>
            <Slot property="totalIncome" value="0.0"/>
            <Slot property="meanIncome" value="0.0"/>
            <Slot property="currentIncome" value="1.0"/>
            <Slot property="savings" value="0.0"/>
            <Slot property="cashOnHand" value="0.0"/>
            <Slot property="consumptionBudget" value="0.0"/>
            <Slot property="weekConsumptionBudget" value="0.0"/>
            <Slot property="remainingConsumptionBudget" value="0.0"/>
            <Slot property="selectFirstProductId" value="0"/>
            <Slot property="selectSecondProductId" value="0"/>
            <Slot property="spendBudgetForFirstProduct" value="0.0"/>
            <Slot property="spendBudgetForSecondProduct" value="0.0"/>
            
            <PeriodicTimeEvent type="AtStartOfMonthDetermineConsumptionBudget" occurrenceTime="2"/>
        </Agents>
        
        <GlobalVariable name="period" value="1"/>
        
        <ExogenousEvent type="Init" occurrenceTime="1"/>
        <ExogenousEvent type="AtWeeklyIndividualConsumption" occurrenceTime="4"/>
        <ExogenousEvent type="EndOfMonth" occurrenceTime="21"/>
    </InitialState>
    
    <UserInterface supportedLanguages="en">
        <StatisticsUI></StatisticsUI>
    </UserInterface>
</SimulationScenario>