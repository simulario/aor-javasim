<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:ers="http://aor-simulation.org" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:h="http://www.w3.org/1999/xhtml" targetNamespace="http://aor-simulation.org"
	elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="UMLetc.xsd"/>
	<!-- =================================================================== -->
	<xs:element name="SpaceView" type="ers:SpaceView.type">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation><h:p>A space view allows to define in which way the space model will be visualized. If no space view is defined, the default visualization applies. By default, the entire display area will be used. The space parameters <h:code>xMax</h:code> and <h:code>yMax</h:code> (representing spatial distance units such as mm or m) are mapped to the space view parameters displayWidth and displayHeight (representing screen pixels). For physical objects in a non-discrete space, the resulting scale factors scaleX = displayWidth/<h:code>xMax</h:code> and scaleY = displayHeight/<h:code>yMax</h:code> are applied to the position coordinates <h:code>x</h:code> and <h:code>y</h:code> (of the object's center), as well as to the physical extension parameters <h:code>width</h:code> and <h:code>height</h:code>.</h:p>
			<h:p>In the case of a discrete space model, object view shapes are positioned by placing them somewhere in the cell corresponding to the object's coordinates. The physical size and shape of an object are not significant, since these space models abtsracts away from them.</h:p> 
		<h:p>For more information about the concepts of color and opacity, and the related attributes <h:code>stroke</h:code>, <h:code>fill</h:code>, <h:code>opacity</h:code> and <h:code>fill-opacity</h:code>, see also the <h:a href="http://www.w3.org/TR/SVGTiny12/painting.html#ColorProperty">SVG specification</h:a>. </h:p></xs:documentation>
		</xs:annotation>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="SpaceView.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:choice>
			<xs:sequence>
				<xs:element name="OneDimensionalSpaceView2D" type="ers:OneDimensionalSpaceView2D.type"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 2D visualization of a 1D space, which can be visualized in 3 ways: as a horizontal, vertical or circular track, using a birds-eye view. </xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="OneDimensionalSpaceView3D" type="ers:OneDimensionalSpaceView3D.type"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 3D visualization of a 1D space, which can be visualized in 3 ways: as a horizontal, vertical or circular track, using a birds-eye view. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:sequence>
				<xs:element name="TwoDimensionalSpaceView2D" type="ers:TwoDimensionalSpaceView2D.type"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 2D visualization of a 2D space. </xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="TwoDimensionalSpaceView3D" type="ers:TwoDimensionalSpaceView3D.type"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 3D visualization of a 2D space. </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:sequence>
				<xs:element name="TwoDimensionalGridSpaceView2D"
					type="ers:TwoDimensionalGridSpaceView2D.type" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 2D visualization of a 2D grid space, which allows to define grid cell property maps for visualizing grid cell properties (by mapping them to one of the cell view properties <h:code>fill</h:code> and <h:code>fill-opacity</h:code>). </xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="TwoDimensionalGridSpaceView3D"
					type="ers:TwoDimensionalGridSpaceView3D.type" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A 3D visualization of a 2D grid space, which allows to define grid cell property maps for visualizing grid cell properties (by mapping them to one of the cell view properties <h:code>fill</h:code> and <h:code>fill-opacity</h:code>). </xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:choice>
		<xs:attribute name="canvasColor" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the fill color of the canvas with a color name. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="canvasColorRGB" type="ers:RGB.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the fill color of the canvas with an RGB triple. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="canvasWidth" type="xs:positiveInteger" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the width of the canvas (in pixels). Will be scaled, if it exceeds the screen size. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="canvasHeight" type="xs:positiveInteger" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the height of the canvas (in pixels). Will be scaled, if it exceeds the screen size. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="OneDimensionalSpaceView2D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="mode" type="ers:OneDimensionalMode.type" use="required">
			<xs:annotation>
				<xs:documentation>A 1D space can be visualized in 3 ways: as a horizontal, vertical or circular track, using a birds-eye view. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="trackWidth" type="ers:Pixel-OR-Percent.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the width of the track(s). </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="trackColor" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the track(s). </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="trackColorRGB" type="ers:RGB.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the track(s). </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="OneDimensionalMode.type">
		<xs:restriction base="xs:string">
			<xs:enumeration value="horizontal"/>
			<xs:enumeration value="vertical"/>
			<xs:enumeration value="circular"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="OneDimensionalSpaceView3D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexContent>
			<xs:extension base="ers:OneDimensionalSpaceView2D.type">
				<xs:sequence>
					<xs:element ref="ers:Skybox" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="TwoDimensionalSpaceView2D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element ref="ers:SpaceViewPropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="OverlayGrid" minOccurs="0">
				<xs:complexType>
					<xs:attribute name="numberOfGridCellsX" use="required">
						<xs:annotation>
							<xs:documentation xml:lang="en">The number of grid cells in X direction. </xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:integer">
								<xs:minInclusive value="2"/>
								<xs:maxInclusive value="150"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="numberOfGridCellsY" use="required">
						<xs:annotation>
							<xs:documentation xml:lang="en">The number of grid cells in X direction. </xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:integer">
								<xs:minInclusive value="2"/>
								<xs:maxInclusive value="100"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="gridOriginX" use="optional">
						<xs:annotation>
							<xs:documentation xml:lang="en">The horizontal pixel number of the left lower corner of the grid. </xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:integer">
								<xs:minInclusive value="0"/>
								<xs:maxInclusive value="1500"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="gridOriginY" use="optional">
						<xs:annotation>
							<xs:documentation xml:lang="en">The vertical pixel number of the left lower corner of the grid. </xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:integer">
								<xs:minInclusive value="0"/>
								<xs:maxInclusive value="1000"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="gridCellWidth" type="ers:GridCellSize.type" use="optional">
						<xs:annotation>
							<xs:documentation xml:lang="en">The width of a grid cell in pixels. </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="gridCellHeight" type="ers:GridCellSize.type" use="optional">
						<xs:annotation>
							<xs:documentation xml:lang="en">The height of a grid cell in pixels. </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attributeGroup ref="ers:GridStroke.attributes"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attributeGroup ref="ers:SpaceViewBackground.attributes"/>
		<xs:attributeGroup ref="ers:SpaceViewBorder.attributes"/>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="GridCellSize.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="10"/>
			<xs:maxInclusive value="200"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="TwoDimensionalSpaceView3D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element ref="ers:Skybox" minOccurs="0"/>
			<xs:choice minOccurs="0">
				<xs:element ref="ers:GlobalCamera"/>
				<xs:element ref="ers:AgentCamera"/>
			</xs:choice>
			<xs:element ref="ers:SpaceViewPropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attributeGroup ref="ers:SpaceViewBackground.attributes"/>
		<xs:attributeGroup ref="ers:SpaceViewBorder.attributes"/>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="ThreeDimensionalSpaceView.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element ref="ers:Skybox" minOccurs="0"/>
			<xs:choice minOccurs="0">
				<xs:element ref="ers:GlobalCamera"/>
				<xs:element ref="ers:AgentCamera"/>
			</xs:choice>
			<xs:element ref="ers:SpaceViewPropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attributeGroup ref="ers:SpaceViewBackground.attributes"/>
		<xs:attributeGroup ref="ers:SpaceViewBorder.attributes"/>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="GlobalCamera">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexType>
			<xs:attribute name="eyePosition" type="ers:DoubleTriple.type" use="required"/>
			<xs:attribute name="lookAt" type="ers:DoubleTriple.type" use="required"/>
			<xs:attribute name="upVector" type="ers:DoubleTriple.type" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="AgentCamera">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexType>
			<xs:attribute name="agentIdRef" type="xs:long" use="required"/>
			<xs:attribute name="viewType" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="FIRST_PERSON"/>
						<xs:enumeration value="THIRD_PERSON"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="defaultViewVector" type="ers:DoubleTriple.type" use="required"/>
			<xs:attribute name="upVector" type="ers:DoubleTriple.type" use="required"/>
			<xs:attribute name="cameraOrientationMode" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="FIXED"/>
						<xs:enumeration value="BODY_ROTATION"/>
						<xs:enumeration value="MOVING_DIRECTION"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="TwoDimensionalGridSpaceView2D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element name="GridCellPropertyVisualizationMap" minOccurs="0" maxOccurs="10">
				<xs:annotation>
					<xs:documentation>A function that maps an object property to a grid cell view property for visualizing it. The <h:code>mapType</h:code> attribute allows to specify the type of function: polynomial, casewise constant, equality-casewise or enumeration. A polynomial function has the form y = a<h:sub>3</h:sub>x<h:sup>3</h:sup> + a<h:sub>2</h:sub>x<h:sup>2</h:sup> + a<h:sub>1</h:sub>x + a<h:sub>0</h:sub>, where x is the object property and y is the grid cell view property. The casewise constant function is defined by y = v<h:sub>0</h:sub> if x &lt; a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if a<h:sub>0</h:sub> &lt;= x &lt; a<h:sub>1</h:sub>, etc. A map may be defined by equality cases as y = v<h:sub>0</h:sub> if  x = a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if x = a<h:sub>1</h:sub>, etc. Finally, a map may be defined on an enumeration property by equality cases as y = v<h:sub>0</h:sub> if  x = enumLit(1), y = v<h:sub>1</h:sub> if x = enumLit(2), etc. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="cellViewProperty" type="ers:CellViewProperty.type" use="required"/>
					<xs:attributeGroup ref="ers:Map.attrgrp"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="fill1" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">The cells of a grid can be colored like a chess board (with colors <h:code>fill1</h:code> and <h:code>fill2</h:code>).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill1RGB" type="ers:RGB.type" use="optional"/>
		<xs:attribute name="fill2" type="ers:Color.type" use="optional"/>
		<xs:attribute name="fill2RGB" type="ers:RGB.type" use="optional"/>
		<!-- 
		<xs:attribute name="fillOpacity" type="ers:Probability" use="optional"/>
-->
		<xs:attributeGroup ref="ers:SpaceViewBackground.attributes"/>
		<xs:attributeGroup ref="ers:GridStroke.attributes"/>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="CellViewProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:NCName">
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="texture"/>
			<!-- 
				<xs:enumeration value="fillOpacity"/>
-->
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="TwoDimensionalGridSpaceView3D.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexContent>
			<xs:extension base="ers:TwoDimensionalGridSpaceView2D.type">
				<xs:sequence>
					<xs:element ref="ers:Skybox" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:element name="SpaceViewPropertyVisualizationMap">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>A function that maps a global variable or an object property to a space view property for visualizing it. The <h:code>mapType</h:code> attribute allows to specify the type of function: polynomial, casewise constant, equality-casewise or enumeration. A polynomial function has the form y = a<h:sub>3</h:sub>x<h:sup>3</h:sup> + a<h:sub>2</h:sub>x<h:sup>2</h:sup> + a<h:sub>1</h:sub>x + a<h:sub>0</h:sub>, where x is the object property and y is the grid cell view property. The casewise constant function is defined by y = v<h:sub>0</h:sub> if x &lt; a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if a<h:sub>0</h:sub> &lt;= x &lt; a<h:sub>1</h:sub>, etc. A map may be defined by equality cases as y = v<h:sub>0</h:sub> if  x = a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if x = a<h:sub>1</h:sub>, etc. Finally, a map may be defined on an enumeration property by equality cases as y = v<h:sub>0</h:sub> if  x = enumLit(1), y = v<h:sub>1</h:sub> if x = enumLit(2), etc. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="spaceViewProperty" type="ers:SpaceViewProperty.type" use="required"/>
			<xs:attribute name="globalVariable" type="ers:CanonicalName" use="required"/>
			<xs:attributeGroup ref="ers:MapParameters.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="SpaceViewProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:NCName">
			<xs:enumeration value="backgroundColor"/>
			<xs:enumeration value="backgroundImage"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="Skybox">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexType>
			<xs:attribute name="top" type="xs:anyURI" use="optional"/>
			<xs:attribute name="bottom" type="xs:anyURI" use="optional"/>
			<xs:attribute name="left" type="xs:anyURI" use="optional"/>
			<xs:attribute name="right" type="xs:anyURI" use="optional"/>
			<xs:attribute name="front" type="xs:anyURI" use="optional"/>
			<xs:attribute name="back" type="xs:anyURI" use="optional"/>
			<!--			<xs:attribute name="cubicTexture" type="xs:anyURI" use="optional"/>
-->
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="SpaceViewBackground.attributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="backgroundColor" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the background color of the space view area with a color name. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="backgroundColorRGB" type="ers:RGB.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the background color of the space view area with a Red-Green-Blue value triple. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="backgroundImage" type="xs:anyURI" use="optional">
			<xs:annotation>
				<xs:documentation xml:lang="en">Allows to load an image as the background of the space view area. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="SpaceViewBorder.attributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="borderColor" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the border line. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="borderColorRGB" type="ers:RGB.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the border line. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="GridStroke.attributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="stroke" type="ers:Color.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the grid lines with a color name. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="strokeRGB" type="ers:RGB.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the color of the grid lines with a Red-Green-Blue value triple. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="strokeWidth" type="ers:Pixel-OR-Percent.type" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the width of the grid stroke. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<!-- =================================================================== -->
	<xs:attributeGroup name="Map.attrgrp">
		<!-- =================================================================== -->
		<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
		<xs:attributeGroup ref="ers:MapParameters.attrgrp"/>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="MapParameters.attrgrp">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="mapType" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="polynomial">
						<xs:annotation>
							<xs:documentation>A polynomial map with y = a<h:sub>3</h:sub>x<h:sup>3</h:sup> + a<h:sub>2</h:sub>x<h:sup>2</h:sup> + a<h:sub>1</h:sub>x + a<h:sub>0</h:sub>, where x is the physical object property and y is the shape property.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="caseWise">
						<xs:annotation>
							<xs:documentation>A casewise constant function with y = v<h:sub>0</h:sub> if  x &lt; a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if  a<h:sub>0</h:sub> &lt;= x &lt; a<h:sub>1</h:sub>, etc.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="equalityCaseWise">
						<xs:annotation>
							<xs:documentation>A function defined by equality cases as y = v<h:sub>0</h:sub> if  x = a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if x = a<h:sub>1</h:sub>, etc.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="enumerationMap">
						<xs:annotation>
							<xs:documentation>A function on an enumeration property defined by equality cases as y = v<h:sub>0</h:sub> if  x = enumLit(1), y = v<h:sub>1</h:sub> if x = enumLit(2), etc.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="a0" type="xs:string" use="optional"/>
		<xs:attribute name="a1" type="xs:string" use="optional"/>
		<xs:attribute name="a2" type="xs:string" use="optional"/>
		<xs:attribute name="a3" type="xs:string" use="optional"/>
		<xs:attribute name="v0" type="xs:string" use="optional"/>
		<xs:attribute name="v1" type="xs:string" use="optional"/>
		<xs:attribute name="v2" type="xs:string" use="optional"/>
		<xs:attribute name="v3" type="xs:string" use="optional"/>
		<xs:attribute name="v4" type="xs:string" use="optional"/>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="ShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="z"/>
			<xs:enumeration value="width"/>
			<xs:enumeration value="height"/>
			<xs:enumeration value="depth"/>
			<xs:enumeration value="r"/>
			<xs:enumeration value="rx"/>
			<xs:enumeration value="ry"/>
			<xs:enumeration value="rotX"/>
			<xs:enumeration value="rotY"/>
			<xs:enumeration value="rotZ"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="stroke-width"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fill-opacity"/>
			<xs:enumeration value="url"/>
			<xs:enumeration value="textureFile"/>
			<xs:enumeration value="surface-color"/>
			<xs:enumeration value="text"/>
			<xs:enumeration value="points"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- =================================================================== -->
	<xs:element name="PhysicalObjectView" type="ers:PhysicalObjectView.type">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Defines a view for physical objects.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="PhysicalObjectView.type">
		<xs:sequence>
			<xs:choice minOccurs="1" maxOccurs="2">
				<xs:choice minOccurs="0">
					<xs:element ref="ers:PhysicalShape2D"/>
					<xs:element name="PhysicalShape2dVisualizationMap">
						<xs:annotation>
							<xs:documentation>Defines a "dynamic shape" that may change when the value of a specific object property changes. </xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Case" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:element ref="ers:PhysicalShape2D"/>
										</xs:sequence>
										<xs:attribute name="value" type="xs:string" use="required"/>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:element ref="ers:PhysicalShape3D" minOccurs="0"/>
			</xs:choice>
			<xs:group ref="ers:ViewAnnotation.elements"/>
			<xs:element ref="ers:AttachedShape2D" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Allows defining nested 2D shapes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ers:AttachedShape3D" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Allows defining nested 3D shapes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="physicalObjectType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="physicalObjectIdRef" type="xs:long" use="optional"/>
		<xs:attribute name="physicalObjectStartID" type="xs:long" use="optional"/>
		<xs:attribute name="physicalObjectEndID" type="xs:long" use="optional"/>
		<xs:attributeGroup ref="ers:ViewDisplay.attributes"/>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:element name="ObjectView" type="ers:ObjectView.type">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Defines a view for non-physical objects.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ObjectView.type">
		<xs:sequence>
			<xs:choice minOccurs="1" maxOccurs="2">
				<xs:choice minOccurs="0">
					<xs:element ref="ers:Shape2D" minOccurs="0"/>
					<xs:element name="Shape2dVisualizationMap" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Defines a "dynamic shape" that may change when the value of a specific object property changes. </xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Case" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:element ref="ers:Shape2D"/>
										</xs:sequence>
										<xs:attribute name="value" type="xs:string" use="required"/>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:element ref="ers:Shape3D" minOccurs="0"/>
			</xs:choice>
			<xs:group ref="ers:ViewAnnotation.elements"/>
			<xs:element ref="ers:AttachedShape2D" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Allows defining nested 2D shapes.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ers:AttachedShape3D" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Allows defining nested 3D shapes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="objectType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="objectIdRef" type="xs:long" use="optional"/>
		<xs:attribute name="objectStartID" type="xs:long" use="optional"/>
		<xs:attribute name="objectEndID" type="xs:long" use="optional"/>
		<xs:attributeGroup ref="ers:ViewDisplay.attributes"/>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:group name="ViewAnnotation.elements">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element name="DisplayInfo" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Allows to display either the value of an object property or a fixed piece of text content near the object.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Content" type="ers:OpaqueExpression" minOccurs="0"
							maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="property" type="ers:CanonicalName" use="optional"/>
					<xs:attribute name="content" type="xs:string" use="optional"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:group>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="ViewDisplay.attributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="displayID" type="xs:boolean" use="optional"/>
		<xs:attribute name="displayName" type="xs:boolean" use="optional"/>
		<!--
			<xs:attribute name="scale" type="ers:CanonicalName" use="optional"/>
			<xs:attribute name="scaleValue" type="xs:NCName" use="optional"/>
		-->
	</xs:attributeGroup>
	<!-- =================================================================== -->
	<xs:element name="AttachedShape2D">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Defines a (possibly dynamic) shape that is attached to the main shape of a view or to another attached shape. An attached shape is either a static shape or a dynamic shape (i.e. a shape visualization map), and possibly has other attached shapes. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice>
					<xs:element ref="ers:Shape2D" minOccurs="0"/>
					<xs:element name="Shape2dVisualizationMap" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Defines a "dynamic shape" that may change when the value of a specific object property changes. </xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Case" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:element ref="ers:Shape2D"/>
										</xs:sequence>
										<xs:attribute name="value" type="xs:string" use="required"/>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:element ref="ers:AttachedShape2D" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Allows defining nested shapes.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="offsetX" type="ers:Pixel-OR-Percent.type" use="required"/>
			<xs:attribute name="offsetY" type="ers:Pixel-OR-Percent.type" use="required"/>
			<xs:attribute name="label" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="AttachedShape3D">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Defines a (possibly dynamic) shape that is attached to the main shape of a view or to another attached shape. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice>
					<xs:element ref="ers:Shape3D" minOccurs="0"/>
					<xs:element name="Shape3dVisualizationMap" minOccurs="0">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="Case" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:element ref="ers:Shape3D"/>
										</xs:sequence>
										<xs:attribute name="value" type="xs:string" use="required"/>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:element ref="ers:AttachedShape3D" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Allows defining nested shapes.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="offsetX" type="ers:Pixel-OR-Percent.type" use="required"/>
			<xs:attribute name="offsetY" type="ers:Pixel-OR-Percent.type" use="required"/>
			<xs:attribute name="offsetZ" type="ers:Pixel-OR-Percent.type" use="required"/>
			<xs:attribute name="label" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="PhysicalShape2D">
		<!-- =================================================================== -->
		<xs:complexType>
			<xs:choice>
				<xs:element name="Square">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:SquareShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="positioning" use="optional" default="CenterCenter">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="LeftBottom"/>
									<xs:enumeration value="LeftCenter"/>
									<xs:enumeration value="LeftTop"/>
									<xs:enumeration value="CenterTop"/>
									<xs:enumeration value="RightTop"/>
									<xs:enumeration value="RightCenter"/>
									<xs:enumeration value="RightBottom"/>
									<xs:enumeration value="CenterBottom"/>
									<xs:enumeration value="CenterCenter"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Rectangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="positioning" use="optional" default="CenterCenter">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="LeftBottom"/>
									<xs:enumeration value="LeftCenter"/>
									<xs:enumeration value="LeftTop"/>
									<xs:enumeration value="CenterTop"/>
									<xs:enumeration value="RightTop"/>
									<xs:enumeration value="RightCenter"/>
									<xs:enumeration value="RightBottom"/>
									<xs:enumeration value="CenterBottom"/>
									<xs:enumeration value="CenterCenter"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Triangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Arc">
					<xs:annotation>
						<xs:documentation>
							Defines a circle arc shape. Allows to draw pies like shapes. Notice that the space 
							coordinates (x,y) refers to the center of the circle to which this arc belongs to.
							The arc is drawn counterclockwise.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ArcShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="angle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The opening angle of the arc shape in degrees. 
									Default is 360 degrees, that means a full circle.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="startAngle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The angle (degrees) where the arc starts. Default is 0 degrees.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="endAngle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The angle (degrees) where the arc shape ends. Default is 360 degrees. 
									If set, then the value of @angle will be ignored while an automatic 
									computation will apply based on @startAngle and @endAngle values.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Circle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:CircleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Ellipse">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:EllipseShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="RegularPolygon">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RegularPolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="numberOfPoints" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:integer">
									<xs:minInclusive value="3"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Polygon">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:PolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Polyline">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:PolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="Shape2D">
		<!-- =================================================================== -->
		<xs:complexType>
			<xs:choice>
				<xs:element name="Square">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:SquareShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="positioning" use="optional" default="CenterCenter">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="LeftBottom"/>
									<xs:enumeration value="LeftCenter"/>
									<xs:enumeration value="LeftTop"/>
									<xs:enumeration value="CenterTop"/>
									<xs:enumeration value="RightTop"/>
									<xs:enumeration value="RightCenter"/>
									<xs:enumeration value="RightBottom"/>
									<xs:enumeration value="CenterBottom"/>
									<xs:enumeration value="CenterCenter"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Rectangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="positioning" use="optional" default="CenterCenter">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="LeftBottom"/>
									<xs:enumeration value="LeftCenter"/>
									<xs:enumeration value="LeftTop"/>
									<xs:enumeration value="CenterTop"/>
									<xs:enumeration value="RightTop"/>
									<xs:enumeration value="RightCenter"/>
									<xs:enumeration value="RightBottom"/>
									<xs:enumeration value="CenterBottom"/>
									<xs:enumeration value="CenterCenter"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Triangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Arc">
					<xs:annotation>
						<xs:documentation>
							Defines a circle arc shape. Allows to draw pies like shapes. Notice that the space 
							coordinates (x,y) refers to the center of the circle to which this arc belongs to.
							The arc is drawn counterclockwise.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ArcShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="r" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional">
							<xs:annotation>
								<xs:documentation>
									The radius of the Arc shape. The position (x,y) refers to the circle origin 
									to which this arc belongs to.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="angle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The opening angle of the arc shape in degrees. 
									Default is 360 degrees, that means a full circle.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="startAngle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The angle (degrees) where the arc starts. Default is 0 degrees.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="endAngle" type="xs:double" use="optional">
							<xs:annotation>
								<xs:documentation>
									The angle (degrees) where the arc shape ends. Default is 360 degrees. 
									If set, then the value of @angle will be ignored while an automatic 
									computation will apply based on @startAngle and @endAngle values.
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Circle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:CircleShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="r" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Ellipse">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:EllipseShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="rx" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="ry" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="RegularPolygon">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RegularPolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="numberOfPoints" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:integer">
									<xs:minInclusive value="3"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="diameter" type="xs:positiveInteger" use="optional"/>
						<xs:attribute name="sideLength" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Polygon">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:PolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="points" type="ers:CoordinatePairSequence.type" use="required"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Polyline">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:PolygonShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="points" type="ers:CoordinatePairSequence.type" use="required"/>
						<xs:attributeGroup ref="ers:ShapeStrokeAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="x" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type" use="optional"/>
			<xs:attribute name="y" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type" use="optional"/>
			<xs:attribute name="rotX" type="xs:double" use="optional"/>
			<xs:attribute name="rotY" type="xs:double" use="optional"/>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="ShapeFillAttributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="fill" type="ers:Color.type" use="optional"/>
		<xs:attribute name="fillRGB" type="ers:RGB.type" use="optional"/>
		<xs:attribute name="fillOpacity" type="ers:Probability" use="optional"/>
		<xs:attribute name="texture" type="xs:anyURI" use="optional"/>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:attributeGroup name="ShapeStrokeAttributes">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="stroke" type="ers:Color.type" use="optional"/>
		<xs:attribute name="strokeRGB" type="ers:RGB.type" use="optional"/>
		<xs:attribute name="strokeWidth" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="strokeOpacity" type="ers:Probability" use="optional"/>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="Color.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="white"/>
			<xs:enumeration value="black"/>
			<xs:enumeration value="lightgrey"/>
			<xs:enumeration value="grey"/>
			<xs:enumeration value="darkgrey"/>
			<xs:enumeration value="lightred"/>
			<xs:enumeration value="red"/>
			<xs:enumeration value="darkred"/>
			<xs:enumeration value="lightgreen"/>
			<xs:enumeration value="green"/>
			<xs:enumeration value="darkgreen"/>
			<xs:enumeration value="lightblue"/>
			<xs:enumeration value="blue"/>
			<xs:enumeration value="darkblue"/>
			<xs:enumeration value="lightyellow"/>
			<xs:enumeration value="yellow"/>
			<xs:enumeration value="orange"/>
			<xs:enumeration value="brown"/>
			<xs:enumeration value="pink"/>
			<xs:enumeration value="purple"/>
			<xs:enumeration value="aqua"/>
			<xs:enumeration value="purple"/>
			<xs:enumeration value="magenta"/>
			<xs:enumeration value="violet"/>
			<xs:enumeration value="fuchsia"/>
			<xs:enumeration value="lime"/>
			<xs:enumeration value="maroon"/>
			<xs:enumeration value="navi"/>
			<xs:enumeration value="olive"/>
			<xs:enumeration value="silver"/>
			<xs:enumeration value="teal"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RGB.type">
		<xs:restriction base="ers:ListOfBytes">
			<xs:length value="3"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="SquareShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="width"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
			<xs:enumeration value="horizontalFlip"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="RectangleShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="width"/>
			<xs:enumeration value="height"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="ArcShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="r"/>
			<xs:enumeration value="angle"/>
			<xs:enumeration value="startAngle"/>
			<xs:enumeration value="endAngle"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="CircleShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="r"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="EllipseShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="rx"/>
			<xs:enumeration value="ry"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="PolygonShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="points"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="RegularPolygonShapeProperty.type">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="numberOfPoints"/>
			<xs:enumeration value="diameter"/>
			<xs:enumeration value="sideLength"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
			<xs:enumeration value="rot"/>
			<xs:enumeration value="texture"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="ShapeSlot">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexType>
			<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="ShapePropertyVisualizationMap">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:annotation>
			<xs:documentation>Allows to define the dynamic visualization of object properties by mapping them to shape properties. The map can be defined either as a polynomial or a casewise constant function, or a function defined by equality cases (either of integers resp. strings, or of enumeration literals).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="PhysicalShape3D">
		<!-- =================================================================== -->
		<xs:complexType>
			<xs:choice>
				<xs:element name="Cube">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:SquareShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cuboid">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cone">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cylinder">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Mesh">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="file" type="xs:anyURI" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Pyramid">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="RegularTriangularPrism">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Sphere">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Tetrahedra">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="Shape3D">
		<!-- =================================================================== -->
		<xs:complexType>
			<xs:choice>
				<xs:element name="Cube">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:SquareShapeProperty.type"
										use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cuboid">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="depth" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cone">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="r" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Cylinder">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="r" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Mesh">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="file" type="xs:anyURI" use="required"/>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="depth" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Pyramid">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="depth" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="RegularTriangularPrism">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="depth" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Sphere">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="r" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Tetrahedra">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyVisualizationMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="width" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="depth" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attribute name="height" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type"
							use="optional"/>
						<xs:attributeGroup ref="ers:ShapeFillAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="x" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type" use="optional"/>
			<xs:attribute name="y" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type" use="optional"/>
			<xs:attribute name="z" type="ers:PositiveInteger-OR-Pixel-OR-Percent.type" use="optional"/>
			<xs:attribute name="rotX" type="xs:double" use="optional"/>
			<xs:attribute name="rotY" type="xs:double" use="optional"/>
			<xs:attribute name="rotZ" type="xs:double" use="optional"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<!--	
	<xs:element name="Scales" type="ers:Scales.type"/>
	<xs:complexType name="Scales.type">
		<xs:sequence>
			<xs:element name="Scale" type="ers:Enumeration.type" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
-->
	<!-- =================================================================== -->
	<xs:element name="EventAppearance" type="ers:EventAppearance.type">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Associates all events of a certain type with some form of sound: 
				either a sound file or a MIDI note sequencean. Event properties may be sonified 
				with the help of a SonificationMap.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="EventAppearance.type">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="ers:Condition" minOccurs="0"/>
				<xs:element name="Sound">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="ers:SoundFileSonificationMap" minOccurs="0"/>
							<xs:element ref="ers:SoundPropertySonificationMap" minOccurs="0" maxOccurs="2"/>
						</xs:sequence>
						<xs:attribute name="soundFile" type="ers:FileNameWithoutExtension" use="optional">
							<xs:annotation>
								<xs:documentation>The sound file can be WAV, MP3 or OGG, but the file name must be provided without extension.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="MidiSound" minOccurs="1" maxOccurs="16">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="ers:MidiSonificationMap" minOccurs="0" maxOccurs="3"/>
						</xs:sequence>
						<xs:attribute name="instrumentName" type="ers:Instrument.type" use="optional"/>
						<xs:attribute name="instrumentNo" use="optional">
							<xs:simpleType>
								<xs:restriction base="xs:integer">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="127"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="noteSequence" type="ers:NoteSequence.type" use="optional">
							<xs:annotation>
								<xs:documentation>
									A note sequence is a list of note/duration/volume triples where the note is an integer between 0 
									(corresponding to a low C) and 127 (in half-tones) and the duration (in ms) and 
									volume (in range 0 = mute to 127 = MAX_VOLUME) are positive integers. 
									An example is "12/300/80 14/200/90"
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="eventType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="eventVariable" type="ers:CanonicalName" use="optional"/>
		<!-- TO BE MOVED to AORSL -->
		<xs:attribute name="messageType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="messageVariable" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="duration" type="xs:positiveInteger" use="optional">
			<xs:annotation>
				<xs:documentation>The duration of the event appearance. If no duration is specified and the sound source is a file, then the entire file is played. If a duration is specified with a value lower than the sound file duration then only the "duration" time is played from that file. If the source is a note sequence and no duration is specified, then the duration is computed as the sum of all note durations. If the source is a note sequence and a duration is defined then the duration of each note from sequence is multipled with a factor that ensures that the total notes duration equals with the value of the @duration attribute. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:element name="SoundFileSonificationMap">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Allows to map an object property value to a sound file. Must not be a polynomial function. The casewise constant function is defined by y = v0 if  x &lt; a0, y = v1 if  a0 &lt;= x &lt; a1, etc. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="SoundPropertySonificationMap">
		<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Allows to map an object property to a sound property. Either a casewise constant function or a polynomial function with y = a3x^3 + a2x^2 + a1x+ a0, where x is the event/object property and y is one of the four sound properties instrumentNo, note, duration, volume. The casewise constant function is defined by y = v0 if  x &lt; a0, y = v1 if  a0 &lt;= x &lt; a1, etc. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="soundProperty" use="required">
				<xs:annotation>
					<xs:documentation>
						The sound property that will be affected by this sonification map.		
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="duration">
							<xs:annotation>
								<xs:documentation>
									The note duration. The resulting value must be positive or equal to 0 and is expressed in milliseconds.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="volume">
							<xs:annotation>
								<xs:documentation>
									The resulting value must be in the range 0-127 where 0 = mute and 127 = MAX_VOLUME.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="MidiSonificationMap">
	<!-- =================================================================== -->
		<xs:annotation>
			<xs:documentation>Allows to map an object property to a MIDI sound property. Either a casewise constant function or a polynomial function with y = a3x^3 + a2x^2 + a1x+ a0, where x is the event/object property and y is one of the four sound properties instrumentNo, note, duration, volume. The casewise constant function is defined by y = v0 if  x &lt; a0, y = v1 if  a0 &lt;= x &lt; a1, etc. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="soundProperty" use="required">
				<xs:annotation>
					<xs:documentation>
						The sound property that will be affected by this sonification map.		
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="instrumentNo">
							<xs:annotation>
								<xs:documentation>
									The instrument number (allowed resulting values ar in range of 0-127).
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="note">
							<xs:annotation>
								<xs:documentation>
									The note number - resulting note value must be in range of 0-127.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="duration">
							<xs:annotation>
								<xs:documentation>
									The note duration. The resulting value must be positive or equal to 0 and is expressed in milliseconds.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="volume">
							<xs:annotation>
								<xs:documentation>
									The resulting value must be in range 0-127 (0 = mute, 127 = MAX_VOLUME).
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="Instrument.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="PIANO_AcousticGrand"/>
			<xs:enumeration value="PIANO_BrightAcoustic"/>
			<xs:enumeration value="PIANO_ElectricGrand"/>
			<xs:enumeration value="PIANO_HonkyTonk"/>
			<xs:enumeration value="PIANO_EPiano1"/>
			<xs:enumeration value="PIANO_EPiano2"/>
			<xs:enumeration value="PIANO_Harpsichord"/>
			<xs:enumeration value="PIANO_Clav"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Celesta"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Glockenspiel"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_MusicBox"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Vibraphone"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Marimba"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Xylophone"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_TubularBells"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Dulcimer"/>
			<xs:enumeration value="ORGAN_DrawbarOrgan"/>
			<xs:enumeration value="ORGAN_PercussiveOrgan"/>
			<xs:enumeration value="ORGAN_RockOrgan"/>
			<xs:enumeration value="ORGAN_ChurchOrgan"/>
			<xs:enumeration value="ORGAN_ReedOrgan"/>
			<xs:enumeration value="ORGAN_Accoridan"/>
			<xs:enumeration value="ORGAN_Harmonica"/>
			<xs:enumeration value="ORGAN_TangoAccordian"/>
			<xs:enumeration value="GUITAR_AcousticGuitar_nylon"/>
			<xs:enumeration value="GUITAR_AcousticGuitar_steel"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_jazz"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_clean"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_muted"/>
			<xs:enumeration value="GUITAR_OverdrivenGuitar"/>
			<xs:enumeration value="GUITAR_DistortionGuitar"/>
			<xs:enumeration value="GUITAR_GuitarHarmonics"/>
			<xs:enumeration value="BASS_AcousticBass"/>
			<xs:enumeration value="BASS_ElectricBass_finger"/>
			<xs:enumeration value="BASS_ElectricBass_pick"/>
			<xs:enumeration value="BASS_FretlessBass"/>
			<xs:enumeration value="BASS_SlapBass1"/>
			<xs:enumeration value="BASS_SlapBass2"/>
			<xs:enumeration value="BASS_SynthBass1"/>
			<xs:enumeration value="BASS_SynthBass2"/>
			<xs:enumeration value="STRINGS_Violin"/>
			<xs:enumeration value="STRINGS_Viola"/>
			<xs:enumeration value="STRINGS_Cello"/>
			<xs:enumeration value="STRINGS_Contrabass"/>
			<xs:enumeration value="STRINGS_TremoloStrings"/>
			<xs:enumeration value="STRINGS_PizzicatoStrings"/>
			<xs:enumeration value="STRINGS_OrchestralStrings"/>
			<xs:enumeration value="STRINGS_Timpani"/>
			<xs:enumeration value="ENSEMBLE_StringEnsemble1"/>
			<xs:enumeration value="ENSEMBLE_StringEnsemble2"/>
			<xs:enumeration value="ENSEMBLE_SynthStrings1"/>
			<xs:enumeration value="ENSEMBLE_SynthStrings2"/>
			<xs:enumeration value="ENSEMBLE_ChoirAahs"/>
			<xs:enumeration value="ENSEMBLE_VoiceOohs"/>
			<xs:enumeration value="ENSEMBLE_SynthVoice"/>
			<xs:enumeration value="ENSEMBLE_OrchestraHit"/>
			<xs:enumeration value="BRASS_Trumpet"/>
			<xs:enumeration value="BRASS_Trombone"/>
			<xs:enumeration value="BRASS_Tuba"/>
			<xs:enumeration value="BRASS_MutedTrumpet"/>
			<xs:enumeration value="BRASS_FrenchHorn"/>
			<xs:enumeration value="BRASS_BrassSection"/>
			<xs:enumeration value="BRASS_SynthBrass1"/>
			<xs:enumeration value="BRASS_SynthBrass2"/>
			<xs:enumeration value="REED_SopranoSax"/>
			<xs:enumeration value="REED_AltoSax"/>
			<xs:enumeration value="REED_TenorSax"/>
			<xs:enumeration value="REED_BaritoneSax"/>
			<xs:enumeration value="REED_Oboe"/>
			<xs:enumeration value="REED_EnglishHorn"/>
			<xs:enumeration value="REED_Bassoon"/>
			<xs:enumeration value="REED_Clarinet"/>
			<xs:enumeration value="PIPE_Piccolo"/>
			<xs:enumeration value="PIPE_Flute"/>
			<xs:enumeration value="PIPE_Recorder"/>
			<xs:enumeration value="PIPE_PanFlute"/>
			<xs:enumeration value="PIPE_BlownBottle"/>
			<xs:enumeration value="PIPE_Shakuhachi"/>
			<xs:enumeration value="PIPE_Whistle"/>
			<xs:enumeration value="PIPE_Ocarina"/>
			<xs:enumeration value="SYNTH_LEAD_Lead1"/>
			<xs:enumeration value="SYNTH_LEAD_Lead2"/>
			<xs:enumeration value="SYNTH_LEAD_Lead3"/>
			<xs:enumeration value="SYNTH_LEAD_Lead4"/>
			<xs:enumeration value="SYNTH_LEAD_Lead5"/>
			<xs:enumeration value="SYNTH_LEAD_Lead6"/>
			<xs:enumeration value="SYNTH_LEAD_Lead7"/>
			<xs:enumeration value="SYNTH_LEAD_Lead8"/>
			<xs:enumeration value="SYNTH_PAD_Pad1"/>
			<xs:enumeration value="SYNTH_PAD_Pad2"/>
			<xs:enumeration value="SYNTH_PAD_Pad3"/>
			<xs:enumeration value="SYNTH_PAD_Pad4"/>
			<xs:enumeration value="SYNTH_PAD_Pad5"/>
			<xs:enumeration value="SYNTH_PAD_Pad6"/>
			<xs:enumeration value="SYNTH_PAD_Pad7"/>
			<xs:enumeration value="SYNTH_PAD_Pad8"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX1"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX2"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX3"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX4"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX5"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX6"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX7"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX8"/>
			<xs:enumeration value="ETHNIC_Sitar"/>
			<xs:enumeration value="ETHNIC_Banjo"/>
			<xs:enumeration value="ETHNIC_Shamisen"/>
			<xs:enumeration value="ETHNIC_Koto"/>
			<xs:enumeration value="ETHNIC_Kalimba"/>
			<xs:enumeration value="ETHNIC_Bagpipe"/>
			<xs:enumeration value="ETHNIC_Fiddle"/>
			<xs:enumeration value="ETHNIC_Shanai"/>
			<xs:enumeration value="PERCUSSIVE_TinkleBell"/>
			<xs:enumeration value="PERCUSSIVE_Agogo"/>
			<xs:enumeration value="PERCUSSIVE_SteelDrums"/>
			<xs:enumeration value="PERCUSSIVE_Woodblock"/>
			<xs:enumeration value="PERCUSSIVE_TaikoDrum"/>
			<xs:enumeration value="PERCUSSIVE_MelodicTom"/>
			<xs:enumeration value="PERCUSSIVE_SynthDrum"/>
			<xs:enumeration value="PERCUSSIVE_ReverseCymbal"/>
			<xs:enumeration value="SOUND_EFFECTS_GuitarFretNoise"/>
			<xs:enumeration value="SOUND_EFFECTS_BreathNoise"/>
			<xs:enumeration value="SOUND_EFFECTS_Seashore"/>
			<xs:enumeration value="SOUND_EFFECTS_BirdTweet"/>
			<xs:enumeration value="SOUND_EFFECTS_TelephoneRing"/>
			<xs:enumeration value="SOUND_EFFECTS_Helicopter"/>
			<xs:enumeration value="SOUND_EFFECTS_Applause"/>
			<xs:enumeration value="SOUND_EFFECTS_Gunshot"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- =================================================================== -->
	<!-- *** Special Data Types  *** -->
	<!-- =================================================================== -->
	<xs:simpleType name="PositiveInteger-OR-Pixel-OR-Percent.type">
		<xs:union memberTypes="ers:Pixel-OR-Percent.type xs:positiveInteger"/>
	</xs:simpleType>
	<xs:simpleType name="Pixel-OR-Percent.type">
		<xs:restriction base="xs:string">
			<xs:pattern value="\-?(([0-9])*px|[1-9]?[0-9]%)"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NoteSequence.type">
		<xs:list itemType="ers:NoteDurationVolumeTriple.type"/>
	</xs:simpleType>
	<xs:simpleType name="NoteDurationVolumeTriple.type">
		<xs:annotation>
			<xs:documentation>A note/duration/volume triple has the form N[[/D]/V] where N=0..127 (note), D = pos. integer (duration), and V=0..127 (volume). </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern
				value="(([1-9]?|1[0-1])[0-9]|12[0-7])(/([1-9][0-9]*)(/((([1-9]?|1[0-1])[0-9]|12[0-7])))?)?"
			/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
