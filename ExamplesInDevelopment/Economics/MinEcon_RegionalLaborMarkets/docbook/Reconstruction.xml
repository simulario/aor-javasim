<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook" 
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
	<title>Reconstruction of the model in AOR Simulator</title>
	<para>This chapter starts with a description of Agent-Object-Relationship simulation. After this,
		the reconstructed simulation scenario of the original model will be introduced.</para>
	<section>
		<title>AOR simulation</title>
		<para>This section introduces an important agent-based approach used for reconstruction of the
			model, called Agent-Object-Relationship (AOR). This approach is well suited for the
			conceptual modeling of organizational information systems. It uses a well defined
			metamodel and simulation language that can be executed directly with special simulation
			software AOR-JavaSim.</para>
		<para>In this approach, the simulation system consists of a set of interacting agents plus a
			simulation environment in that all agents exist. Every agent is an independent unit in
			the simulation system that is able to act with other agents and with the simulation
			environment.. Every agent can represent one human actor and by creating large sets of
			free acting and interacting units, it can be possible to observe human behavior in
			larger networks or the influence of some persons behavior to the whole system.</para>
		<section>
			<title>AOR simulation framework</title>
			<para>The Agent-Object-Relationship (AOR) simulation framework is intended to be used as
				a universal multi-purpose simulation framework in science, engineering, education
				and entertainment.</para>
			<para>Entities in AOR are agents and objects as physical entities and events, actions
				and messages as relational entities. Agents are active entities, they interact with
				each other and the simulation environment. Objects on the other side are passive
				entities like a book. The modeling of AOR is based on ER modeling, this means, AOR
				entites are in special relationships to each other.</para>
			<figure>
				<title>Code Generation</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="png/code-generation.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
		<section>
			<title>Simulation language</title>
			<para>AOR simulations use a high-level declarative language to specify simulations. This
				language - AORSL - Agent-Object-Relationship Simulation Language - can be processed
				directly with AOR-JavaSim. It is an XML-based language that uses an XML Schema
				definition to enable easy validating and parsing of AORSL documents. Using XML
				syntax also has the advantage that AORSL files can be created, edited and viewed
				with a lot of free software. Furthermore, by using XML as a basis, the language
				remains human readable. The language is based on AbSimML, the description language
				for Agent Based Simulations. To use it with AOR simulations, it was necessary to
				adapt it to the vocabulary and syntax of AOR. In addition to this, the language was
				extended to enable a lot more functionalities to make AOR more flexible for
				different purposes.</para>
		</section>
		<section>
			<title>Simulation scenario and simulation model</title>
			<para>A simulation scenario consists of a simulation model, an initial state definition
				and a user interface definition, including a statistics UI and an animation UI. A
				simulation model consists of an optional space model (needed for physical
				objects/agents), a set of entity type definitions, including different categories of
				event, message, object and agent types and a set of rules, which define causality
				laws governing the environment's state changes and the causation of follow-up
				events.</para>
			<para>Both the behavior of the environment and the behavior of agents are modeled with
				the help of rules. <emphasis role="bold">Rules</emphasis> are defined as
				follows,</para>
			<para>A rule is a 6-tuple &lt; <emphasis role="italic">WHEN, FOR, DO, IF, THEN,
					ELSE</emphasis> > where</para>
			<itemizedlist>
				<listitem>
					<para><emphasis role="italic">WHEN</emphasis> is an event expression specifying
						the type of event that triggers the rule</para>
				</listitem>
				<listitem>
					<para><emphasis role="italic">FOR</emphasis> is a set of variable declarations,
						such that each variable is bound either to a specific object or to a set of
						objects</para>
				</listitem>
				<listitem>
					<para><emphasis role="italic">IF</emphasis> is a logical condition formula
						possibly containing variables</para>
				</listitem>
				<listitem>
					<para><emphasis role="italic">DO</emphasis>, <emphasis role="italic"
							>THEN</emphasis> and <emphasis role="italic">ELSE</emphasis> are
						execution elements consisting of two blocks:<itemizedlist>
							<listitem>
								<para><emphasis role="italic">UPDATE-ENV</emphasis> is an expression
									specifying an update of the environment state</para>
							</listitem>
							<listitem>
								<para><emphasis role="italic">SCHEDULE-EVT</emphasis> specifies a
									list of resulting events that will be scheduled</para>
							</listitem>
						</itemizedlist></para>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>AOR-JavaSim</title>
			<para>AOR-JavaSim is a java software for generating and running AOR simulations. The
				software generates executable Java code from a given simulation scenario and
				compiles this code.</para>
			<para><emphasis role="bold">Running the simulation scenario</emphasis></para>
			<orderedlist>
				<listitem>
					<para>Validate your ERSL/AORSL file</para>
				</listitem>
				<listitem>
					<para>Generate program code (either Java or JavaScript)</para>
				</listitem>
				<listitem>
					<para>Run the resulting simulation program (with a JVM or in a Web
						browser)</para>
				</listitem>
				<listitem>
					<para>Evaluate the statistics and/or the simulation log</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
	<section>
		<title>The scenario specification</title>
		<para>This section shows the reconstruction of the model as an AOR simulation. In order to show
			possible consequences of different policy measures, different scenarios can be generated
			by specifying alternative sets of values for the exogenous variables. The base case will
			be described in detail, whereas only the important results of the other scenarios are
			given. The scenarios are constructed so that each one represents an additional policy
			measure, and, therefore, the growth of the economy improves with each additional step,
			the base case being the lowest of all.</para>
		<para>General Parameter Setting:<itemizedlist>
				<listitem>
					<para>2 regions, one mall per region</para>
				</listitem>
				<listitem>
					<para>400 households</para>
				</listitem>
				<listitem>
					<para>10 Consumption Goods Producers</para>
				</listitem>
				<listitem>
					<para>1 Capital Goods Producer</para>
				</listitem>
				<listitem>
					<para>Rate of Growth of Technological Frontier: 6%</para>
				</listitem>
				<listitem>
					<para>5 Levels of General Skills (1 &#x2192; 5)</para>
				</listitem>
			</itemizedlist></para>
		<para>Starting from low/low case the government can improve general skill
			distributions.</para>
		<itemizedlist>
			<listitem>
				<para>Option 1: Efforts are spread over both regions.<itemizedlist>
						<listitem>
							<para>Low/low &#x2192; medium/medium</para>
						</listitem>
						<listitem>
							<para>80% Skill group 3, 5% for each Skill group 1, 2, 4, 5</para>
						</listitem>
					</itemizedlist></para>
			</listitem>
			<listitem>
				<para>Option 2: Efforts are focused in one region.<itemizedlist>
						<listitem>
							<para>Low/low &#x2192; low/high</para>
						</listitem>
						<listitem>
							<para>Region 1: 80% Skill level 1, 5% Skill group 2, 3, 4, 5</para>
						</listitem>
						<listitem>
							<para>Region 2: 80% Skill level 5, 5% Skill group 1, 2, 3, 4</para>
						</listitem>
					</itemizedlist></para>
			</listitem>
		</itemizedlist>
		<section>
			<title>The base case</title>
			<para>As mentioned, there are four types of agents in the model. All agents in the simulation are
				instances of these agent types.</para>
			<para>Base Case: Low skill distribution in both regions</para>
			<itemizedlist>
				<listitem>
					<para>80% Skill Level 1 (lowest skill group)</para>
				</listitem>
				<listitem>
					<para>5% Skill Levels 2, 3, 4, 5</para>
				</listitem>
			</itemizedlist>
			<section>
				<title>Agents specification</title>
				<para>Every agent in the simulation has several reaction rules that are used to define the
					behavior of the agent.</para>
				<section>
					<title>CapitalGoodsProducer</title>
					<para>The rule <emphasis role="italic">CalculateEqualShare_Rule</emphasis> applies when an
						agent perceives the non-action event <emphasis role="italic"
							>CalculateEqualShare</emphasis>, which simulates at the end of every
						month (occurrenceTime="24") and occurs at every 24 steps in the simulation.
						This perception is used to calculate the equal shares which will be soon
						distributed to all households. The <emphasis role="italic"
							>equalShare</emphasis> property holds an equal share for a household is
						determined by the amount of households. There are 400 instances of the agent
						type <emphasis role="italic">household</emphasis>, so the agent divides its
						monthly revenues into 400 equal shares. The <emphasis role="italic"
							>equalShare</emphasis> is expressed as the amount of households divided
						by the <emphasis role="italic">investmentSalesRevenue</emphasis> property of
						the agent. Then, the <emphasis role="italic"
							>investmentSalesRevenue</emphasis> property is set to 0. This event
						causes a thing, the agent does the <emphasis role="italic"
							>PayEqualShare</emphasis> action event to pay the equal shares to
						another agent <emphasis role="italic">household</emphasis>.</para>
				</section>
				<section>
					<title>Mall</title>
					<para>The rule <emphasis role="italic">AtStartOfMonthCheckStockLevel_Rule</emphasis> is used
						when the agent perceives the non-action event <emphasis role="italic"
							>AtStartOfMonthCheckStockLevel</emphasis>, which simulates at the
						beginning of every month (occurrenceTime="2") and occurs at every 24 steps
						during the running of the simulation. This perception is used to check the
						current inventories of consumption goods. The result of the reaction rule is
						the creation of a new outgoing message to report the current stock level of
						every selling product to the corresponding CGP. The value of the <emphasis
							role="italic">quantity</emphasis> property of the message is obtained
						from the <emphasis role="italic">productsInStock</emphasis> list of the
						agent.</para>
					<para>The rule <emphasis role="italic">DeliverProduct_Rule</emphasis> applies in case a message
						of type <emphasis role="italic">DeliverProduct</emphasis> is received by the
						agent. This will increase the inventory of the target product by the
							<emphasis role="italic">quantity</emphasis> property of the message. To
						that end, the <emphasis role="italic">updateInventory</emphasis> function of
						the agent is called. It has two parameters: <emphasis role="italic"
							>firmId</emphasis> and <emphasis role="italic">quantity</emphasis>.
							<emphasis role="italic">firmId</emphasis> holds the "identity" of the
						sender of the message and <emphasis role="italic">quantity</emphasis> holds
						the <emphasis role="italic">quantity</emphasis> property of the message. The
						function is used to update the value of the <emphasis role="italic"
							>quantity</emphasis> property of the selected record of the <emphasis
							role="italic">productsInStock</emphasis> list.</para>
				</section>
				<section>
					<title>ConsumptionGoodsProducer</title>
					<para>The rule <emphasis role="italic">TellCurrentStockLevel_Rule</emphasis> applies when a
						message of type <emphasis role="italic">TellCurrentStockLevel</emphasis> is
						received. The agent will check whether the stock it keeps at the mall has to
						be refilled based on the given condition. If statement needs to be used. If
						the <emphasis role="italic">quantity</emphasis> property of the message is
						greater than or equal to the <emphasis role="italic"
							>optimalStockLevel</emphasis>, the desired replenishment quantity of the
						product is set to zero. In the opposite case, the desired replenishment
						quantity is obtained by deducting the <emphasis role="italic"
							>quantity</emphasis> property of the message from the <emphasis
							role="italic">optimalStockLevel</emphasis>. When the desired
						replenishment quantity is fixed, a new record which has three attributes
						(that is, <emphasis role="italic">mallId</emphasis>, <emphasis role="italic"
							>quantity</emphasis> and <emphasis role="italic"
							>adjustmentFactor</emphasis>) will be added to the bottom of the
							<emphasis role="italic">inventoryPositions</emphasis> list of the
						agent.</para>
					<para>The rule <emphasis role="italic">MakeProductionPlan_Rule</emphasis> is used when the
						agent perceives the non-action event <emphasis role="italic"
							>MakeProductionPlan</emphasis>, which occurs when the agent starts
						making its production plan (occurrenceTime="4") and is repeated every 24
						steps. This perception is used to determine the demand of two input factors
						(labor and capital) for production. For that purpose, the <emphasis
							role="italic">determineProductionPlan</emphasis> function of the agent
						is called. This function is constructed based on CES production functions
						that have been mentioned above. It has five arguments: <emphasis
							role="italic">laborPrice</emphasis>, <emphasis role="italic"
							>investmentPrice</emphasis>, <emphasis role="italic"
							>plannedProductionQuantity</emphasis>, <emphasis role="italic"
							>averageSpecificSkillLevel</emphasis> and <emphasis role="italic"
							>averageCapitalStockQuality</emphasis>. <emphasis role="italic"
							>laborPrice</emphasis> holds the average wage of employees of the agent.
							<emphasis role="italic">investmentPrice</emphasis> holds the price of
						the investment good. <emphasis role="italic"
							>plannedProductionQuantity</emphasis> holds the planned output based on
						the desired replenishment quantity of the product for each mall. <emphasis
							role="italic">averageSpecificSkillLevel</emphasis> denotes the average
						specific skill level of workers and <emphasis role="italic"
							>averageCapitalStockQuality</emphasis> denotes the average quality of
						the capital stock of the agent. The event <emphasis role="italic"
							>MakeProductionPlan</emphasis> causes several things. First, the agent
						does the <emphasis role="italic">BuyNewInvestment</emphasis> action event to
						purchase the needed amount of investments from the IGP. This event triggers
						if the <emphasis role="italic">newInvestment</emphasis> property of the
						agent is greater than zero. Second, the agent does the <emphasis
							role="italic">DismissWorker</emphasis> action event to downsize the
						labor force. Finally, the agent creates an action event <emphasis
							role="italic">PostVacancyInformation</emphasis>, if the value of the
							<emphasis role="italic">laborSupplyQuantity</emphasis> property of the
						agent is larger than zero.</para>
					<para>The rule <emphasis role="italic">TellSalesRevenue_Rule</emphasis> applies
						in case a message of type <emphasis role="italic"
							>TellSalesRevenue</emphasis> is received by the agent. This will
						increase the <emphasis role="italic">productSalesRevenue</emphasis> property
						and <emphasis role="italic">productSalesQuantity</emphasis> property of the
						agent by the corresponding <emphasis role="italic">revenue</emphasis>
						property and <emphasis role="italic">quantity</emphasis> property of the
						message. There is nothing else to do in this case.</para>
					<para>The rule <emphasis role="italic">TellVacancy_Rule</emphasis> applies in
						case a message of type <emphasis role="italic">TellVacancy</emphasis> is
						received. The agent receives informations from the applicants about their
						respective general as well as specific skill levels, and then adds these
						informations to the bottom of the <emphasis role="italic"
							>jobApplications</emphasis> list of the agent.</para>
					<para>The rule <emphasis role="italic">InFirstIterationRankApplicant_Rule</emphasis> is used
						when the agent perceives the non-action event <emphasis role="italic"
							>InFirstIterationRankApplicant</emphasis>, which occurs when the agent
						ranks the applicants in the first round (occurrenceTime="9") and is repeated
						every 24 steps. It applies only when the size of the <emphasis role="italic"
							>jobApplications</emphasis> list is greater than zero. This perception
						is used to choose the best applicants for the positions that are needed.
						Thus, the <emphasis role="italic">determineJobOffer</emphasis> function of
						the agent is called. It sorts and updates the <emphasis role="italic"
							>jobApplications</emphasis> list. This event causes a thing, the agent
						does the <emphasis role="italic">InFirstIterationOfferJob</emphasis> action
						event to send job offers to the highest ranked applicants.</para>
					<para>The rule <emphasis role="italic">AcceptJob_Rule</emphasis> applies in case
						a message of type <emphasis role="italic">AcceptJob</emphasis> is received
						by the agent. This rule is used to update the <emphasis role="italic"
							>laborSupplyQuantity</emphasis> property and the <emphasis role="italic"
							>workersInFirm</emphasis> list of the agent. The value of the <emphasis
							role="italic">laborSupplyQuantity</emphasis> property minus one.
						Moreover, the informations which contains the message sender, the <emphasis
							role="italic">wage</emphasis> property of the message, the <emphasis
							role="italic">generalSkillLevel</emphasis> property of the message and
						the <emphasis role="italic">specificSkillLevel</emphasis> property of the
						message will be added to the bottom of the <emphasis role="italic"
							>workersInFirm</emphasis> list of the agent.</para>
					<para>The rule <emphasis role="italic">ResignJob_Rule</emphasis> applies in case
						a message of type <emphasis role="italic">ResignJob</emphasis> is received.
						The agent receives resignation from its employee and drops him from the list
						of workers. Specifically, the value of the <emphasis role="italic"
							>laborSupplyQuantity</emphasis> property of the agent is increased by
						one. In order to delete a record from the <emphasis role="italic"
							>workersInFirm</emphasis> list, the <emphasis role="italic"
							>deleteWorkerRecordFromList</emphasis> function of the agent is called
						with a parameter <emphasis role="italic">householdId</emphasis> which holds
						the message sender. It first determines the record whose <emphasis
							role="italic">householdId</emphasis> property is equal to the "identity"
						of the sender of the message, and then delete this record from the <emphasis
							role="italic">workersInFirm</emphasis> list.</para>
					<para>The rule <emphasis role="italic"
							>StartSecondIterationLaborSupply_Rule</emphasis> carries out when the
						agent perceives the periodic time event <emphasis role="italic"
							>StartSecondIterationLaborSupply</emphasis>, which happens at the
						beginning of the second iteration of hiring activity (occurrenceTime="15")
						and is also repeated every 24 steps. It is used only when the <emphasis
							role="italic">laborSupplyQuantity</emphasis> property of the agent is
						greater than zero. This event causes a thing, the agent does the <emphasis
							role="italic">PostVacancyInformation</emphasis> action event to post
						vacancies for job seekers.</para>
					<para>The rule <emphasis role="italic"
							>InSecondIterationRankApplicant_Rule</emphasis> is used when the agent
						perceives the non-action event <emphasis role="italic"
							>InSecondIterationRankApplicant</emphasis>, which occurs when the agent
						ranks the applicants in the second round (occurrenceTime="18") and is
						repeated every 24 steps. The content of this rule is the same as that of the
							<emphasis role="italic">InFirstIterationRankApplicant_Rule</emphasis>
						rule.</para>
					<para>The rule <emphasis role="italic">StartOfProduction_Rule</emphasis> applies
						when an agent perceives the periodic time event <emphasis role="italic"
							>StartOfProduction</emphasis>, which simulates at the end of every month
						(occurrenceTime="23") and occurs at every 24 steps in the simulation. This
						perception is used to calculate the equal shares which will be soon
						distributed to all households.</para>
					<para>The event <emphasis role="italic">StartOfProduction</emphasis> causes several things.
						First, the agent creates an action event <emphasis role="italic"
							>DistributeProduct</emphasis> to distribute the products. Second, the
						agent does the <emphasis role="italic">PayWage</emphasis> action event to
						downsize the labor force. Finally, the agent does the <emphasis
							role="italic">IncreaseSpecificSkillLevel</emphasis> action event.</para>
				</section>
				<section>
					<title>household</title>
					<para/>
				</section>
			</section>
			<section>
				<title>EnvironmentRules</title>
				<para/>
				<section>
					<title>EnvironmentRule: <emphasis role="italic"
							>Create_InitialProductsInStock_Rule</emphasis></title>
					<para>The rule <emphasis role="italic"
							>Create_InitialProductsInStock_Rule</emphasis> is carried out, when an
						exogenous event <emphasis role="italic">Init</emphasis> occurs. This event
						happens at the beginning of the simulation (occurrenceTime="1") and is used
						to create the initial state</para>
				</section>
			</section>
		</section>
	</section>
</chapter>
