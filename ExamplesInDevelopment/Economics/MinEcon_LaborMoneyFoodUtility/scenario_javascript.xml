<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org ../../../../../Desktop/AORSL/AORSL_0-8-4.xsd"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns="http://aor-simulation.org"
 xmlns:aors="http://aor-simulation.org"
 version="0.8.4"
 scenarioName="EOS_Economy"
 scenarioTitle="EOS Economy"
 simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0"/>
	<SimulationModel modelName="Gold_Food_Economy">
		<documentation>
			<dc:modified>20100306</dc:modified>
			<dc:source>"A computational market model based on individual action", by Ken Steiglitz, Michael L. Honig and Leonard M. Cohen, 1996. URL: http://www.cs.princeton.edu/~ken/scott.pdf</dc:source>
			<aors:description xmlns="http://www.w3.org/1999/xhtml">The "Gold Food Economy" is an example of an agent-based simulation of a relatively basic economy that does not directly model a real economy, but attempts to explain the macroeconomy through simulation of a minimal economy. It is one of the simplest models wherein zero-intelligence agents produce, consume and trade in an economy with only two goods: gold and food. The model simulates the actions of independent "worker" agents, each with his own inventory and skills (at producing food and gold), interacting through an auction market agent that establishes a commonly accepted transaction price. Workers must consume a unit of food every period, and each worker tries to maintain a minimum inventory of food to guarantee consumption. For the system to survive the production of food must be greater than the total food consumption per period, but this leads to a surplus of food in the economy. The market allows agents to sell their surplus food for gold that can be used to purchase food in the same market later on. Agents more skilled in the production of gold might decide to mine gold and trade it for food at every period.</aors:description>
			<informationModelDiagram>EOS.png</informationModelDiagram>
		</documentation>
		
		<Statistics>
			<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="PriceLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="SellOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="4"/>
				</Source>
				</Variable>
		</Statistics>
		
		<DataTypes>
			<!--====================================-->
			<ComplexDataType name="TradeOffer">
				<!--====================================-->
				<Attribute type="String" name="product"/>
				<Attribute type="Float" name="price"/>
				<Attribute type="Float" name="Quantity"/>
				<Attribute type="Boolean" name="buy"/>
				<Attribute type="Integer" name="bidderIdRef"/>
				<!--<ReferenceProperty name="bidder" type="EconomicAgent"/>-->
			</ComplexDataType>
		</DataTypes>
		
		<Globals>
			<!--====================================-->
			<GlobalFunction name="getAssetByName" resultType="aors.util.economics.Quantity">
				<documentation>
					<dc:description> Find an asset from a Quantitylist by String</dc:description>
				</documentation>
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="JavaScript"><![CDATA[
				document.writeln("Get asset by name called");
				document.writeln("Name = " + name);
				document.writeln("Assets = " + assets);
	var i = 0;
	for (i = 0; i < assets.size(); i++) {
		if (!assets.get(i).isDiscrete()) {
			if (assets.get(i).getContinuousQuantityType().getName() == name) {
				break;
			}
		}
		else {
			if (assets.get(i).getType() == name) {
				break;
			}
		}
	}
	return assets.get(i);
					]]></Body>	
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addContinuous" resultType="Double">
				<documentation>
					<dc:description> Adds a ContinuousQuantity to a Quantitylist</dc:description>
				</documentation>
				<Parameter name="quantity" type="Double"/>
				<Parameter name="name" type="String"/>
				<Parameter name="unit" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="JavaScript"><![CDATA[
				//document.writeln("Add continuous called");
	var assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
	var asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
	assets.add(asset);
	return quantity;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="getContinuous" resultType="aors.util.economics.Quantity">
				<documentation>
					<dc:description> Gets a ContinuousQuantity item</dc:description>
				</documentation>
				<Parameter name="quantity" type="Double"/>
				<Parameter name="name" type="String"/>
				<Parameter name="unit" type="String"/>
				<Body language="JavaScript"><![CDATA[
				//document.writeln("Get continuous called");
	var assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
	var asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
	//document.writeln(asset.getType());
	return asset;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addDiscrete" resultType="Long">
				<documentation>
					<dc:description> Adds a DiscreteQuantity to a Quantitylist</dc:description>
				</documentation>
				<Parameter name="quantity" type="Integer"/>
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="JavaScript"><![CDATA[
				//document.writeln("Add discrete called");
	var asset = new aors.util.economics.DiscreteQuantity(name, quantity);
	assets.add(asset);
	//document.writeln(asset.getType());
	return quantity;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="getDiscrete" resultType="Long">
				<documentation>
					<dc:description> Gets DiscreteQuantity item</dc:description>
				</documentation>
				<Parameter name="quantity" type="Integer"/>
				<Parameter name="name" type="String"/>
				<Body language="JavaScript"><![CDATA[
				//document.writeln("Get discrete called <br/>");
	var asset = new aors.util.economics.DiscreteQuantity(name, quantity);
	//document.writeln(asset.getType() + "<br/>");
	//document.writeln(asset.isDiscrete() + "<br/>");
	//document.writeln("quantity = " + quantity + " | Obj.quantity = " + asset.getQuantity() + "<br/>");
	//document.writeln(name + "<br/>");
	return asset;
				]]></Body>
			</GlobalFunction>
		</Globals>
		
		<EntityTypes>
			<!--====================================-->
			<MessageType name="StartOfDay_Notification">
				<!--====================================-->
				<Attribute name="price" type="Float"/>
				<Attribute name="marketType" type="String" />
			</MessageType>
			<!--====================================-->
			<MessageType name="Act_msg" />
			<!--====================================-->
			<MessageType name="OfferToBuyFood">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellFood">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyLabor">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellLabor">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyUtility">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellUtility">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="ClearMarket" />
			<!--====================================-->
			<MessageType name="MatchingOffer" >
				<!--====================================-->
				<ComplexDataProperty name="offer" type="TradeOffer"/>
			</MessageType>
			<!--=======================================================-->
			<ExogenousEventType name="StartOfDay" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="StartWork" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="CloseMarket" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="Init" />
			<!-- ============================================ -->
			<AgentType name="EconomicAgent">
				<!-- ============================================ -->
				<ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded" />
				<Attribute type="Float" name="LABOR_ALLOWANCE" initialValue="1.0"/>
				<Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
				<Attribute type="Float" name="lastFoodPrice"/>
				<Attribute type="Float" name="lastLaborPrice"/>
				<Attribute type="Float" name="lastUtilityPrice"/>
				<Attribute type="Float" name="foodAmount"/>
				<Attribute type="Float" name="goldAmount"/>
				<Attribute type="Float" name="laborAmount"/>
				<Attribute type="Float" name="utilityAmount"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="JavaScript"><![CDATA[
					alert("Update food called:");
	var assets = this.assets;
	if (offer.getProduct() == "Food") {
		if (offer.isBuy()) {
			eos_economy.controller.Global.getAssetByName("Food", assets).deposit(offer.getQuantity());	
		} 
		 else {
			eos_economy.controller.Global.getAssetByName("Food", assets).withdraw(offer.getQuantity());
		}
	}
	return eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateGold" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the goldamount by the quantity*price of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="JavaScript"><![CDATA[
					alert("Update gold called:");
	var assets = this.assets;
	if (offer.isBuy()) {
		eos_economy.controller.Global.getAssetByName("Money", assets).withdraw(offer.getQuantity() * offer.getPrice());					
	} else {
		eos_economy.controller.Global.getAssetByName("Money", assets).deposit(offer.getQuantity() * offer.getPrice());
	}
	return eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateLabor" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the goldamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="JavaScript"><![CDATA[
					alert("Update labor called:");
	var assets = this.assets;
	if (offer.getProduct() == "Labor") {
		if (offer.isBuy()) {
			eos_economy.controller.Global.getAssetByName("Labor", assets).deposit(offer.getQuantity());
		} else {
			eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(offer.getQuantity());
		}
	}
	return eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateUtility" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="JavaScript"><![CDATA[
					alert("Update utility called:");
	var assets = this.assets;
	if (offer.getProduct() == "Utility"){
		if (offer.isBuy()){
			eos_economy.controller.Global.getAssetByName("Utility", assets).deposit(offer.getQuantity());
		} else {
			eos_economy.controller.Global.getAssetByName("Utility", assets).withdraw(offer.getQuantity());
		}
	}
	return eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity();									
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Food_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the foodmarket is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="JavaScript">this.msg.getMarketType() == "Food"</IF> 
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastFoodPrice">
								<ValueExpr language="JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Labor_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the labormarket is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="JavaScript">this.msg.getMarketType() == "Labor"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastLaborPrice">
								<ValueExpr language="JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Utility_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the utilitymarket is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="JavaScript">this.msg.getMarketType() == "Utility"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastUtilityPrice">
								<ValueExpr language="JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Update_Rule" agentVariable="p">	
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>succesfull transactions are receiverd from the market, food and gold is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="goldAmount">
								<ValueExpr language="JavaScript">this.p.updateGold(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="foodAmount">
								<ValueExpr language="JavaScript">this.p.updateFood(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="laborAmount">
								<ValueExpr language="JavaScript">this.p.updateLabor(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="utilityAmount">
								<ValueExpr language="JavaScript">this.p.updateUtility(this.msg.getOffer())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="30.0"/>
				<Attribute type="Float" name="TARGET_MONEY_STOCK" initialValue="60.0"/>
				<Attribute type="Float" name="TARGET_FIRM_MONEY_STOCK" initialValue="100"/>
				<Attribute type="Float" name="EAT_AMOUNT" initialValue="1.0"/>
				<Attribute type="Boolean" name="owner"/>
				<Attribute type="Boolean" name="hasFirm" initialValue="false"/>
				<Attribute type="Float" name="konto"/>
				<ReferenceProperty name="firm" type="Firm"/>
				<ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the foodBuyList</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="JavaScript"><![CDATA[
			assets = this.agentObject.assets;
			if (this.isOwner()) {
			document.writeln("Hooray");
				var firmMoney = eos_economy.controller.Global.getAssetByName("Money", this.getFirm().assets).getQuantity();
				var moneyToWithdraw = Math.max(this.getTARGET_MONEY_STOCK() - eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity()
												  , firmMoney - this.getTARGET_FIRM_MONEY_STOCK());
				if (moneyToWithdraw > 0.0) {
					eos_economy.controller.Global.getAssetByName("Money", assets).deposit(eos_economy.controller.Global.getAssetByName("Money", this.getFirm().assets).withdraw(moneyToWithdraw));
            	}
        	}
			alert("check1");
			alert(assets.size());
        	this.setKonto(eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity());
			alert("check 2");
			this.foodBuyList.clear();
			var quantum = this.getEAT_AMOUNT() * 1.0;
          	var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
          	for (var x = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
            	if (x == 0.0) {
            		x = .00000000001;
            	} 
            	var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + Math.random() * this.getRANDOM_FACTOR();
            	var price = mod * this.getLastFoodPrice();
            	price = Math.min(price, purse);
            	if (price <= 0.0) break;
            	
              	purse = purse - (quantum * price);
              	
            	if (purse < 0.0) 
					break;
            	
            	var o = new TradeOffer();
            	o.setProduct("Food");
            	o.setQuantity(quantum);
            	o.setPrice(price);
            	o.setBuy(true);
            	o.setBidderIdRef(bidder);
            	this.foodBuyList.add(o);
            	this.setKonto(this.getKonto() - price);
          	}
			return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<!-- TODO check this -->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the foodSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
			var assets = this.assets;
			this.foodSellList.clear();
			if (eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() > 1.5 * this.getTARGET_FOOD_STOCK()) {
				var quantum = this.getEAT_AMOUNT() * 1.0;
				for (var x = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity(); x > 1.5 * this.getTARGET_FOOD_STOCK(); x -= quantum) {
					if (x == 0.0) {
						x = .00000000001;
					}
					
					var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / (x - this.getTARGET_FOOD_STOCK()), 0.2) + 0.90/*5*/ + Math.random() * this.getRANDOM_FACTOR();
					var price = mod * this.getLastFoodPrice();
					if (price <= 0.0) {
						break;
					}
					//document.writeln("asdoaismdaoismd<br/>");
					var o = new TradeOffer();
					o.setProduct("Food");
					o.setQuantity(quantum);
					o.setPrice(price);
					o.setBuy(false);
					o.setBidderIdRef(bidderIdRef);
					this.foodSellList.add(o);
				}
				return true;
			}
			return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the laborSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
			if (this.isOwner() == false){
				var price = 0;
				var assets = this.assets;
				this.laborSellList.clear();
				if (this.getLastLaborPrice() > this.getLastFoodPrice() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() < this.getTARGET_FOOD_STOCK()){
		        	price = (this.getLastLaborPrice() - this.getLastFoodPrice()) * ((eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() * eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity()) / (this.getTARGET_FOOD_STOCK() * this.getTARGET_FOOD_STOCK())) + this.getLastFoodPrice();
		        	price = Math.min(price, this.getLastLaborPrice() * 1.1);
		        	//price = getLastLaborPrice() * 1.1;
		        } else {
		            price = this.getLastLaborPrice();
		            var frac = 0.95;
					//TOCHECK random(0,1) ?? MIN??!?
		            var mod = ((Math.max(Math.min(js.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
		        	price *= mod;
		        }
					var o = new TradeOffer();
		            o.setProduct("Labor");
	            	o.setQuantity(this.getLABOR_ALLOWANCE());
	            	o.setPrice(price);
	            	o.setBuy(false);
	            	o.setBidderIdRef(bidderIdRef);
	            	this.laborSellList.add(o);
	            	return true;
	      }
	      return false; 
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the utilityBuyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
			this.utilityBuyList.clear();
			var assets = this.assets;
			var purse = this.getKonto();
			if (purse > this.getTARGET_MONEY_STOCK() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() > this.getTARGET_FOOD_STOCK()) {
				var frac = 0.95;
		      	var factor = ((Math.max(Math.min(js.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
		      	var uPrice = this.getLastUtilityPrice() * factor;
		      	var quantity = (this.getKonto() - this.getTARGET_MONEY_STOCK()) / uPrice;
		      	if (quantity > 0 && uPrice > 0.0) {
		      		for (var d = quantity; d > 0; d--) {
			        	var o = new TradeOffer();
		            	o.setProduct("Utility");
	            		o.setQuantity(1);
	            		o.setPrice(uPrice);
	            		o.setBuy(true);
	            		o.setBidderIdRef(bidderIdRef);
	            		this.utilityBuyList.add(o);
            		}
            	}
            }
            return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="BuyFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.p.buyFood(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyFood" receiverIdRefs="2">
								<Slot property="buyOffers">
									<ValueExpr language="JavaScript">this.p.foodBuyList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.p.sellFood(p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers">
									<ValueExpr language="JavaScript">this.p.foodSellList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellLabor_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.p.sellLabor(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellLabor" receiverIdRefs="3">
								<Slot property="sellOffers">
									<ValueExpr language="JavaScript">this.p.laborSellList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyUtility_Rule" agentVariable="p">
					<documentation>
						<description> The person decides how much utility he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.p.buyUtility(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyUtility" receiverIdRefs="4">
								<Slot property="buyOffers">
									<ValueExpr language="JavaScript">this.p.utilityBuyList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Firm" superType="EconomicAgent">
				<Attribute type="Float" name="amountProduced"/>
				<ReferenceProperty name="owner" type="Person"/>
				<ComplexDataProperty name="buyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="initializeOwnership" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Finds an owner for a firm</dc:description>
					</documentation>
					<Parameter name="firm" type="Firm"/>
					<Parameter name="owners" type="List" itemType="aors.model.envsim.Objekt"/>
					<Body language="JavaScript"><![CDATA[
					alert("Initialize ownership called");
						var person = null;
						for (var i = 0; i < owners.size(); i++){
							var o = owners.get(i);
							if (o.isOwner() == true && !(o.isHasFirm())){
								person = o;
								o.setOwner(true);
								o.setHasFirm(true);
								o.setFirm(firm);
								break;
							}
						}	
						return person;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="changeOwner" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>removes an owner from a firm</dc:description>
					</documentation>
					<Body language="JavaScript"><![CDATA[
			this.getOwner().setOwner(false);
			this.setOwner(null);
			return this.getOwner();
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Farm" superType="Firm">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="120.0"/>
				<Attribute type="Float" name="TARGET_OWNER_FOOD_STOCK" initialValue="30.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
			alert("Farm sell food called");
			this.sellList.clear();
			var assets = this.assets;
			var productQuantity = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity();
			if (productQuantity == 0) {
				return false;
			} else {
				var food = productQuantity;
				var quantum = productQuantity / 10;
				while (food > 0) {
					var factor = (Math.max(Math.min(js.util.Random.normal(0.0, 1.0), 2.0), -2.0)  / 2) * 0.1 + 1;
    				var price = this.getLastFoodPrice() * factor;
    				for (var d = quantum; d > 0; d--){
        				var o = new TradeOffer();
			            o.setProduct("Food");
		            	o.setQuantity(1);
						o.setPrice(price);
		            	o.setBuy(false);
		            	o.setBidderIdRef(bidderIdRef);
		            	this.sellList.add(o);
	            	}
	            	food = food - quantum;
				}
			return true;
			}
			return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
					alert("farm buy labor clled");
			this.buyList.clear();
			var assets = this.assets;
			var ownerfoodAmount = eos_economy.controller.Global.getAssetByName("Food", this.getOwner().assets).getQuantity();
	        if (ownerfoodAmount < 0.75 * this.getTARGET_OWNER_FOOD_STOCK() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() < this.getTARGET_FOOD_STOCK()){
	          var quantum = this.getLABOR_ALLOWANCE() * 1.0;
	          var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
	          for (var x = ownerfoodAmount; x <= 1.5 * this.getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
	            if (x == 0.0) x = .00000000001;
	            var mod = 0.1* Math.pow(this.getTARGET_OWNER_FOOD_STOCK() / x, 0.2) +  0.90 + Math.random() * this.getRANDOM_FACTOR();
	            var price = mod * this.getLastLaborPrice();
	            price = Math.min(price, purse);
	            if (price <= 0.0) break;
	            purse -= quantum * price;
	            if (purse < 0.0) break;
	            
	            var o = new TradeOffer();
	            o.setProduct("Labor");
            	o.setQuantity(quantum);
            	o.setPrice(price);
            	o.setBuy(true);
            	o.setBidderIdRef(bidderIdRef);
            	this.buyList.add(o);        	
	          }
	        }
			var lastProduct = 0.0;
			var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
			var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
            for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
            	//TOCHECK convertToFood, which right now is global, maybe problem here..
                var marginalProduct = this.convertToFood(d) - lastProduct;
                if (lastProduct + eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() >= this.getTARGET_FOOD_STOCK()) break;

                var price = marginalProduct * this.getLastFoodPrice();
                // stop when you'd be buying at < 1/2 the price of labor
                if (price < minPrice) break;

                var o = new TradeOffer();
	            o.setProduct("Labor");
            	o.setQuantity(this.getLABOR_ALLOWANCE());
            	o.setPrice(price);
            	o.setBuy(true);
            	o.setBidderIdRef(bidderIdRef);
            	this.buyList.add(o);
            	purse = purse - price;
            	lastProduct = lastProduct + marginalProduct;
            }
			return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much food could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="JavaScript"><![CDATA[
					alert("Farm convert to food called");
						return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>converts all labor to food</dc:description>
					</documentation>
					<Parameter name="ID" type="long"/>
					<Body language="JavaScript"><![CDATA[
	alert("Farm produce food called");
	var assets = this.assets; //TODO adapt this, caution to Global. also
	var food = convertToFood(eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity());
	var labor = eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
	eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(labor);
	eos_economy.controller.Global.getAssetByName("Food", assets).deposit(food);
	return food;										
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProduceFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>converts all labor to food</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">eos_economy.controller.Global.getAssetByName("Labor", this.f.assets).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="JavaScript">this.produceFood(this.f.getId())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The farm decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.sellFood(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers">
									<ValueExpr language="JavaScript">this.sellList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The farm decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.buyLabor(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<ValueExpr language="JavaScript">this.buyList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Factory" superType="Firm">
				<Attribute type="Float" name="TARGET_UTILITY_STOCK" initialValue="60.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
			var assets = this.assets;
			alert("[Factory] sellUtility called");
			this.sellList.clear(); //does this work?
			var frac = 0.9;
            var util = eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity();
            var quantum = util / 10; 
            while (util > 0) {
            	for (var d = quantum; d > 0; d--) {
	            	//var factor = ((Math.max(js.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1); 
					var factor = ((Math.max(Math.min(js.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1); 

					//var factor = ((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1); 
					//TOCHECK Why is there Math.min(random(0,1), 2) ?? because the random number
					//will always be smaller than 2
	            	var price = this.getLastUtilityPrice() * factor;
            		var o = new TradeOffer();
					
		            o.setProduct("Utility");
	            	o.setQuantity(1);
	            	o.setPrice(price);
	            	o.setBuy(false);
	            	o.setBidderIdRef(bidderIdRef);
	            	this.sellList.add(o);
            	}
            	util = util - quantum;
            }
			return true;	
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="JavaScript"><![CDATA[
				alert("[Factory] Buy labor called");
			this.buyList.clear();
			var assets = this.assets;
			var lastProduct = 0.0;
			var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
			var purse = eos_economy.controller.Global.getAssetByName("Money", this).getQuantity();
            for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
				//document.writeln("Hey");
                var marginalProduct = convertToUtility(d) - lastProduct;
                if (lastProduct + eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity() >= this.getTARGET_UTILITY_STOCK()) 
					break;

                var price = marginalProduct * this.getLastUtilityPrice();
                // stop when you'd be buying at < 1/2 the price of labor
                if (price < minPrice) break;
                
				var o = new TradeOffer();
	            o.setProduct("Labor");
            	o.setQuantity(1);
            	o.setPrice(price);
            	o.setBuy(true);
            	o.setBidderIdRef(bidderIdRef);
            	this.buyList.add(o);
				purse = purse - price; 
                lastProduct += marginalProduct;
            }
        	return true;					
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much utility could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="JavaScript"><![CDATA[
						return Math.floor(((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0);
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>converts all labor to utility</dc:description>
					</documentation>
					<Body language="JavaScript"><![CDATA[		
alert("Produce utility called");					
	var assets = this.assets; //TODO adapt this
	var utility = convertToUtility(eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity()); //caution to Global.
	var labor = eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
	eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(labor);
	alert("Utility = " + utility);
	eos_economy.controller.Global.getAssetByName("Utility", assets).deposit(utility);
	return utility;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="ProduceUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>converts all labor to utility</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">Global.getAssetByName("Labor", this.f.assets).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="JavaScript">this.f.produceUtility()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The factory decides how much utility he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.f.sellUtility(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellUtility" receiverIdRefs="4">
								<Slot property="sellOffers">
									<ValueExpr language="JavaScript">this.f.sellList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The factory decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="JavaScript">this.buyLabor(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<ValueExpr language="JavaScript">this.f.buyList</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Market">
				<!-- ============================================ -->
				<Attribute type="Float" name="lastMarketPrice"/>
				<Attribute type="Float" name="lastMarketVolume"/>
				<Attribute type="Float" name="buyVolume"/>
				<Attribute type="Float" name="sellVolume"/>
				<Attribute type="String" name="commodity"/>
				<Attribute type="String" name="currency"/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="clear" resultType="Boolean">
					<documentation>
						<dc:description>Calculates the marketprice and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="JavaScript"><![CDATA[
					alert("Clean function called");
			this.transactions.clear();
			
			//TODO WHY SHUFFLE THEN SORT??!?
			//java.util.Collections.shuffle(buyOffers.get());
			//java.util.Collections.shuffle(sellOffers.get());
			var comparator = function(a, b) {
				var p1 = a.getPrice();
				var p2 = b.getPrice();
				return p1 - p2;
			}
			
			this.buyOffers.sort(comparator);
			this.sellOffers.sort(comparator);
			
			// handle special cases
	        // highest buy price < lowest sell price -> no transactions OR
	        // empty offer list -> no transactions
	        
	        if ((this.buyOffers.size() == 0) || 
			    (this.sellOffers.size() == 0) ||
				(this.less(this.buyOffers.get(this.buyOffers.size() - 1).getPrice(), this.sellOffers.get(0).getPrice()))) {
				
	        	this.setBuyVolume(this.buyOffers.size());
	        	this.setSellVolume(this.sellOffers.size());
	        	this.buyOffers.clear();
	        	this.sellOffers.clear();
	        	return false;
	        }
	        
	        // merge prices into sorted list, eliminating duplicates
			//ArrayList<Double> prices = new ArrayList<Double>(this.buyOffers.length + this.sellOffers.length);
			var prices = new Array();
			var s = 0, b = 0;
	        while (s < this.sellOffers.size() && b < this.buyOffers.size()) {
	            if (this.equal(this.sellOffers.get(s).getPrice(), this.buyOffers.get(b).getPrice())) {
	            	prices.push(this.sellOffers.get(s++).getPrice());
	                b++;
	            } else if (this.sellOffers.get(s).getPrice() < this.buyOffers.get(b).getPrice()){
    				prices.push(this.sellOffers.get(s++).getPrice());
    			} else{
    				prices.push(this.buyOffers.get(b++).getPrice());
    			}
    			// eliminate duplicates in sellOffers
	        	while (s < this.sellOffers.size() 
        			   && equal(prices[prices.length - 1], this.sellOffers.get(s).getPrice())){
    				s++;
				}
				 // eliminate duplicates in buyOffers
				while (b < this.buyOffers.size()
        			   && equal(prices[prices.length - 1], this.buyOffers.get(b).getPrice())){
    				b++;
    			}
    		}
    		// then add the remainder if there is one
			if (s < this.sellOffers.size()){
				 	while (s < this.sellOffers.size()) {
	                if (!equal(prices[prices.size() - 1], this.sellOffers.get(s).getPrice())){
	                	prices.add(this.sellOffers.get(s).getPrice());
	                }
	                s++;
            	}
            }else if (b < this.buyOffers.size()){
				while (b < this.buyOffers.size()) {
	                if (!equal(prices[prices.length - 1], this.buyOffers.get(b).getPrice())){
	                    prices.add(this.buyOffers.get(b).getPrice());
	                }
	                b++;
	            }
			}
			// find the price(s) at which supply and demand intersect
	        var supply = 0, demand = 0;
	        // initialize demand to be the demand at lowest demand price
	        for (var o = 0; o < this.buyOffers.size(); o++) { //TradeOffer objects
				var tradeOffer = this.buyOffers.get(o);
	            demand += tradeOffer.getQuantity();
	            }
	        // walk through prices, updating supply and demand as needed.
	        var p = 0; //int
	        var bestVolume = Number.NEGATIVE_INFINITY;
	        var bestP = 0; //int
	        for (s = -1, b = 0; s + 1 < this.sellOffers.size() && b < this.buyOffers.size(); p++) {
	            // if prices[p] is the next supply price:
	            while (s + 1 < this.sellOffers.size() && equal(prices[p], this.sellOffers.get(s + 1).getPrice())){
	                supply += this.sellOffers.get(++s).getQuantity();
	            }
	            // if the current demand price is less than prices[p]:
	            while (b < this.buyOffers.size() && less(this.buyOffers.get(b).getPrice(), prices[p])){
	                demand -= this.buyOffers.get(b++).getQuantity();
	            }
	            if (supply > demand) {
	                // volume = demand
	                if (demand > bestVolume) {
	                    bestVolume = demand;
	                    bestP = p;
	                }
	                break; // stop
	            } else if (supply > bestVolume) {
	            	// volume = supply here
	                bestVolume = supply;
	                bestP = p;
	            }
	        }
      	  	/*
	         * If the above loop broke because the final supply price was reached,
	         * then supply at Price >= prices[p-1] remains constant. Thus, it is
	         * necessary to check whether demand at higher prices will ever become
	         * less than the current supply. If so, then that will be at the market
	         * price.
	         */
	         if (s + 1 == this.sellOffers.size()) {
	            for (; b < this.buyOffers.size() && p < prices.length; p++) {
	                while (b < this.buyOffers.size() && less(this.buyOffers.get(b).getPrice(), prices[p]))
	                    demand -= this.buyOffers.get(b++).getQuantity();
	
	                if (supply > demand) {
	                    // volume = demand
	                    if (demand > bestVolume) {
	                        bestVolume = demand;
	                        bestP = p;
	                    }
	                    break; // stop
	                } else if (supply > bestVolume) { 
	                	// volume = supply here
	                    bestVolume = supply;
	                    bestP = p;
	                }
	            }
	        }
	        /*
	         * If one of the loops broke because the next price was greater than the
	         * highest demand price, then the market price is set to the highest
	         * demand price in order to minimize shortage.
	         */
	        if (b == this.buyOffers.size()) {
	            this.setLastMarketPrice(this.buyOffers.get(b - 1).getPrice());
	        }
	        /* If supply never crosses demand, set to highest supply price */
	        else if (p == prices.length) {
	            this.setLastMarketPrice(this.buyOffers.get(p - 1).getPrice());
	        }
	        /*
	         * Finally, if the loop broke because supply > demand, there are two
	         * valid prices that could be the market price: prices[p], which is the
	         * smallest price at which supply tops demand, or prices[p-1], which is
	         * the largest price at which demand tops supply. Since either price is
	         * valid, we select between them in an arbitrary, yet deterministic
	         * manner. However, if choosing between a two prices, one of which would
	         * not cause any transactions to occur, we choose the other price.
	         */
	        else {
	            if (p == 0) {
	                this.setLastMarketPrice(prices[p]);
	            } else if (less(prices[p - 1], this.sellOffers.get(0).getPrice())) {
	                this.setLastMarketPrice(prices[p]);
	            } else if (less(buyOffers.get(this.buyOffers.size() - 1).getPrice(), prices[p])) {
	                this.setLastMarketPrice(prices[p - 1]);
	            } else {
	                this.setLastMarketPrice(prices[bestP]);
	            }
	        }
	        var seller = 0, buyer = this.buyOffers.size() - 1; //int
	        while (seller < this.sellOffers.size() && buyer >= 0
	                && !less(this.getLastMarketPrice(), this.sellOffers.get(seller).getPrice()) // sP <= mP
	                && !less(this.buyOffers.get(buyer).getPrice(), this.getLastMarketPrice()))  // bP >= mP
			{	
            	this.sellOffers.get(seller).setPrice(this.getLastMarketPrice());
            	this.transactions.add(this.sellOffers.get(seller));
                seller++;
                this.buyOffers.get(buyer).setPrice(this.getLastMarketPrice());
            	this.transactions.add(this.buyOffers.get(buyer));
                buyer--;
	        }
			// reset offer lists and set statistic variables
	        this.setLastMarketVolume(this.transactions.size());
	        this.setBuyVolume(this.buyOffers.size());
	        this.setSellVolume(this.sellOffers.size());
	        this.buyOffers.clear();
	        this.sellOffers.clear();
			return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Check if the two Inputparameters are equal</dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="JavaScript"><![CDATA[
	var eps = 1e-5;
	if (a + eps < b) {
		return false;
	}
	if (a - eps > b){
		return false;
	}
	return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>checks if a less b </dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="JavaScript"><![CDATA[
	var eps = 1e-5;
	if (a + eps < b){
		return true;
	}
	return false;
					]]></Body>
				</Function>
				
				<Function name="mergeLists" resultType="js.util.ArrayList">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Merges two arraylists</dc:description>
					</documentation>
					<Parameter name="a" type="js.util.ArrayList"/>
					<Parameter name="b" type="js.util.ArrayList"/>
					<Body language="JavaScript"><![CDATA[
var newList = new js.util.ArrayList();
for (var i = 0; i < a.size(); i++)
	newList.add(a.get(i));
for (var i = 0; i < b.size(); i++)
	newList.add(b.get(i));
return newList;
					]]></Body>
				</Function>
				
				
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyFood" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="buyOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.buyOffers, this.m.buyOffers)</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellFood" messageVariable="msg"/>
					<DO>
						
						<UPDATE-AGT>
							<Slot property="sellOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.sellOffers, this.m.sellOffers)</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="buyOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.buyOffers, this.m.buyOffers)</ValueExpr>
							</Slot>
							<!--
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="JavaScript">msg.buyOffers</ValueExpr>
								</AddAll>
							</MultiValuedSlot> -->
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="sellOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.sellOffers, this.m.sellOffers)</ValueExpr>
							</Slot>
							
							<!--<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="JavaScript">msg.sellOffers</ValueExpr>
								</AddAll>
							</MultiValuedSlot> -->
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="buyOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.buyOffers, this.m.buyOffers)</ValueExpr>
							</Slot>
							<!--
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="JavaScript">msg.buyOffers</ValueExpr>
								</AddAll>
							</MultiValuedSlot> -->
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="sellOffers">
								<ValueExpr language="JavaScript">this.m.mergeLists(this.msg.sellOffers, this.m.sellOffers)</ValueExpr>
							</Slot>
							<!--
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="JavaScript">msg.sellOffers</ValueExpr>
								</AddAll>
							</MultiValuedSlot> -->
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<IF language="JavaScript">this.m.clear()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Transact" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<!--TOFIX not quite sure here -->
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="JavaScript">this.m.transactions</ListExpr>
					</FOR-ListItemVariable>
					<IF language="JavaScript"><![CDATA[evt.getReminderMsg() == "transactions ready"]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ValueExpr language="JavaScript">this.o</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>	
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="ContinuousCommodityMarket" superType="Market"></AgentType>
			<AgentType name="DiscreteCommodityMarket" superType="Market"></AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- ============================= -->
		<EnvironmentRule name="InitializeOwnership">
			<!-- ============================= -->
			<documentation>
				<dc:description>Finds an owner for all firms</dc:description>
			</documentation>
			<WHEN eventType="Init"/>
			<!--TOFIX objectType is Firm, don't forget this!-->
			<FOR objectVariable="f" objectType="Farm" />
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner">
			
						
		<ValueExpr language="JavaScript">this.f.initializeOwnership(this.f, this.getEnvironmentSimulator().getObjectsByType("Person"))</ValueExpr>
							<!--<ValueExpr language="JavaScript">true);(alert(js.util.Random.normal(0, 1))</ValueExpr>-->
						<!--	<ValueExpr language="JavaScript">true);(alert("Hey")</ValueExpr>-->
					 </Slot>
					
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		
		<!-- ============================= -->
		<EnvironmentRule name="AtStartOfDayEat_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Every person tries to eat, if he can't he dies</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="p" objectType="Person" />
			<IF language="JavaScript"><![CDATA[
				eos_economy.controller.Global.getAssetByName("Food", this.p.assets).withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT() 
			]]></IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject objectVariable="p"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="CheckBankrupt_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>If a farm  has no more money and food and labor it is shutdown</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="f" objectType="Farm" />
			<IF language="JavaScript"><![CDATA[
				eos_economy.controller.Global.getAssetByName("Food", this.f.assets).getQuantity() == 0.0 
				&& eos_economy.controller.Global.getAssetByName("Labor", this.f.assets).getQuantity() == 0.0 
				&& eos_economy.controller.Global.getAssetByName("Money", this.f.assets).getQuantity() == 0.0
			]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner">
							<ValueExpr language="JavaScript">this.f.changeOwner()</ValueExpr>
						</Slot>
					</UpdateObject>
					<DestroyObject objectVariable="f"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule_ER">
			<!-- ====================================== -->
			<documentation>
				<dc:description>For all markets that exist, the marketprice of the last day is send to every person</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay"/>
			<FOR objectVariable="m" objectType="Market" />
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="StartOfDay_Notification">
					    <SenderIdRef language="JavaScript">this.m.getId()</SenderIdRef>
						<ReceiverIdRef language="JavaScript">this.p.getId()</ReceiverIdRef>
						<Slot property="price">
							<ValueExpr language="JavaScript">this.m.getLastMarketPrice()</ValueExpr>
						</Slot>
						<Slot property="marketType">
							<ValueExpr language="JavaScript">this.m.getCommodity()</ValueExpr>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="StartWork_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Act_msg is send to every person</dc:description>
			</documentation>
			<WHEN eventType="StartWork"/>
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="JavaScript">this.p.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>	
		<!-- ===================================== -->
		<EnvironmentRule name="CloseMarket_ER">
		<!-- ===================================== -->
			<documentation>
				<dc:description>ClearMarket is send to every market</dc:description>
			</documentation>
			<WHEN eventType="CloseMarket"/>
			<FOR objectVariable="m" objectType="Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
						<ReceiverIdRef language="JavaScript">this.m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
	</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<Agent type="ContinuousCommodityMarket" id="2">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.2" />
			<Slot property="commodity" value="Food"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent type="ContinuousCommodityMarket" id="3">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.4" />
			<Slot property="commodity" value="Labor"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>
		<!--<Agent type="Firm" id="47">
			<Slot property="assets">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>-->
		<Agent type="DiscreteCommodityMarket" id="4">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="1.0" />
			<Slot property="commodity" value="Utility"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>
		<Agents type="Person" rangeStartID="1000" rangeEndID="1174">
			<Slot property="assets">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(
				            eos_economy.controller.Global.getContinuous(33.0, "Food", "Stk"),
				            eos_economy.controller.Global.getContinuous(60.0, "Money", "Stk"),
				            eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"),
				            eos_economy.controller.Global.getDiscrete(0, "Utility")
				        )]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="false"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="60" />
		</Agents>
		<Agents type="Person" rangeStartID="2000" rangeEndID="2009">
			<Slot property="assets">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(
				            eos_economy.controller.Global.getContinuous(33.0, "Food", "Stk"),
				            eos_economy.controller.Global.getContinuous(90.0, "Money", "Stk"),
				            eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"),
				            eos_economy.controller.Global.getDiscrete(0, "Utility")
				        )]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="true"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="90" />
		</Agents>
		<Agents type="Farm" rangeStartID="3000" rangeEndID="3004">
			<Slot property="assets">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(
				            eos_economy.controller.Global.getContinuous(20.0, "Food", "Stk"),
				            eos_economy.controller.Global.getContinuous(100.0, "Money", "Stk"),
				            eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"),
				            eos_economy.controller.Global.getDiscrete(0, "Utility")
				        )]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodAmount" value="20" /> <!--TOFIX updated here, was foodStock-->
			<Slot property="goldAmount" value="100" />
		</Agents>
		<Agents type="Factory" rangeStartID="4000" rangeEndID="4004">
			<Slot property="assets">
				<ValueExpr language="JavaScript"><![CDATA[
new js.util.ArrayList(
    eos_economy.controller.Global.getContinuous(0.0, "Food", "Stk"),
    eos_economy.controller.Global.getContinuous(100.0, "Money", "Stk"),
    eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"),
    eos_economy.controller.Global.getDiscrete(0, "Utility")
  )]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="goldAmount" value="100" />
			<Slot property="utilityAmount" value="5" />
		</Agents>
		<ExogenousEvent type="Init" occurrenceTime="1" />
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<ExogenousEvent occurrenceTime="3" type="StartWork" />
		<ExogenousEvent occurrenceTime="6" type="CloseMarket" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">FoodPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the foodmarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">LaborPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the labormarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
				</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">UtilityPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the utilitymarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for utility</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			
		</StatisticsUI>
		<AnimationUI>
			<DisplayDescription>
				<HtmlText></HtmlText>
			</DisplayDescription>
			
			<Views></Views>
		</AnimationUI>
		
	</UserInterface>
</SimulationScenario>
