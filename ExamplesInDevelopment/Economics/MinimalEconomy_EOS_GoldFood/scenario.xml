<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.8.4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/" 
	scenarioName="Gold_Food_Economy"
	scenarioTitle="Gold Food Economy"
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="4320" timeUnit="h"  stepTimeDelay="0"/>
	<SimulationModel modelName="Gold_Food_Economy">
		<documentation>
			<dc:modified>20100306</dc:modified>
			<dc:source>"A computational market model based on individual action", by Ken Steiglitz, Michael L. Honig and Leonard M. Cohen, 1996. URL: http://www.cs.princeton.edu/~ken/scott.pdf</dc:source>
			<aors:description xmlns="http://www.w3.org/1999/xhtml">The "Gold Food Economy" is an example of an agent-based simulation of a relatively basic economy that does not directly model a real economy, but attempts to explain the macroeconomy through simulation of a minimal economy. It is one of the simplest models wherein zero-intelligence agents produce, consume and trade in an economy with only two goods: gold and food. The model simulates the actions of independent "worker" agents, each with his own inventory and skills (at producing food and gold), interacting through an auction market agent that establishes a commonly accepted transaction price. Workers must consume a unit of food every period, and each worker tries to maintain a minimum inventory of food to guarantee consumption. For the system to survive the production of food must be greater than the total food consumption per period, but this leads to a surplus of food in the economy. The market allows agents to sell their surplus food for gold that can be used to purchase food in the same market later on. Agents more skilled in the production of gold might decide to mine gold and trade it for food at every period.</aors:description>
		</documentation>
		
		<Statistics>
			
			<Variable name="Food" dataType="Float">
				
				<Source>
					<ObjectProperty property="foodStock" objectType="Person"/>
				</Source>
			</Variable>
			
			<Variable name="Price" dataType="Float">
				
				<Source>
					<ObjectProperty property="lastPrice" objectType="Person"/>
				</Source>
			</Variable>
			
			<Variable name="Volume" dataType="Float">
				<Source>
					<ObjectProperty property="marketVolume" objectType="Market"/>
				</Source>
			</Variable>
		</Statistics>
		
		<DataTypes>
			<!--====================================-->
			<ComplexDataType name="AssetsList">
				<!--====================================-->
				<ClassDef language="Java"><![CDATA[
					private java.util.ArrayList<aors.util.economics.Quantity> assets = new java.util.ArrayList<aors.util.economics.Quantity>();			
				 
					public AssetsList() {}			                       
					
					public Float addAsset(Float quantity, String name, String unit) {
				
					  aors.util.economics.ContinuousQuantityType assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
					  aors.util.economics.ContinuousQuantity asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
					  assets.add(asset);	
					  //System.out.println("Array is: "+assets);
					  return quantity;
					}
					
					public aors.util.economics.Quantity getAsset(String name){
						int i;
						for(i=0; i < assets.size(); i++){
							if(!assets.get(i).isDiscrete()){
								if(((aors.util.economics.ContinuousQuantity)assets.get(i)).getContinuousQuantityType().getName().equals(name)){
									break;
								}
							}
						}
						return assets.get(i);
					}
	  			]]></ClassDef>
			</ComplexDataType>
			<ComplexDataType name="Offer">
				<Attribute type="String" name="product"/>
				<Attribute type="String" name="currency"/>
				<Attribute type="Float" name="price"/>
				<Attribute type="Float" name="maxQuantity"/>
				<Attribute type="Integer" name="AgentID"/>
			</ComplexDataType>
			<ComplexDataType name="OfferList">
				<ClassDef language="Java"><![CDATA[
					private java.util.ArrayList<Offer> offers = new java.util.ArrayList<Offer>();
					private java.util.Comparator<Offer> comparator;
					
					public OfferList(){
						this.comparator = new java.util.Comparator<Offer>() {
						 public int compare (Offer a, Offer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if(p1 < p2) return -1;
								if(p1 > p2) return 1;
								            return 0;	             		
							}		
						 };
					}
					
					public void addOffer(Offer o){
						int index = 0;
						if(offers.isEmpty()){
							offers.add(o);
						}else{
							index = java.util.Collections.binarySearch(offers, o, this.comparator);
							// if the price value does not exist in the ordered array list, then the binarySearch function returns the position of the recommended insertion point: index = - insertionPoint -1
							if(index < 0){
								offers.add(-index-1, o);
							}
							// if the price value exists in the ordered array list. We add the new complex data imediately after the position returned by the binarySearch function.
							else {
								offers.add(index+1, o);
							}
						}
					}
					
					public Boolean isEmpty(){
						return offers.isEmpty();
					}
					
					public java.util.ArrayList<Offer> getOffers(){
						return this.offers;
					}
					public void print(){
						for(int i=0;i<offers.size();i++){
							System.out.println(offers.get(i).getPrice());
						}
					}
				]]></ClassDef>
			</ComplexDataType>
		</DataTypes>
		
		<EntityTypes>
			<MessageType name="OpenMarket">
				<Attribute name="price" type="Float"/>
			</MessageType>
			<MessageType name="Act_msg" />
			<MessageType name="BuyFood_msg">
				<ComplexDataProperty name="OfferList" type="OfferList"/>
			</MessageType>
			<MessageType name="SellFood_msg">
				<ComplexDataProperty name="OfferList" type="OfferList"/>
			</MessageType>
			<MessageType name="Clear_msg" />
			<ExogenousEventType name="StartOfDay" periodicity="24" />
			<ExogenousEventType name="EachDayAt8AM" periodicity="24" />
			<ExogenousEventType name="EndOfDay" periodicity="24" />
			
			<AgentType name="EconomicAgent">
				<!--<ComplexDataProperty name="assets" type="Quantity" upperMultiplicity="unbounded" />-->
			</AgentType>
			
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
				<!-- ============================================ -->
				<documentation>
					<description>Model Level representation of a Person</description>
				</documentation>
				<ComplexDataProperty name="assets" type="AssetsList" />
				<Attribute type="Float" name="EAT_AMOUNT" initialValue="1.0"/>
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="30.0"/>
				<Attribute type="Float" name="TARGET_MONEY_STOCK" initialValue="60.0"/>
				<Attribute type="Float" name="LEISURE_VALUE" initialValue="5.0"/>
				<Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
				<Attribute type="Float" name="HISTORICAL_FOOD_PRICE" initialValue="0.02"/>
				<Attribute type="Float" name="lastPrice"/>
				<Attribute type="Float" name="foodStock"/>
				<Attribute type="Float" name="goldAmount"/>
				<Attribute name="leisureWorker" type="Boolean" />
				<Attribute name="skillLevelFood" type="Float" />
				<Attribute name="skillLevelGold" type="Float" />
				<ComplexDataProperty name="BuyList" type="OfferList"/>
				<ComplexDataProperty name="SellList" type="OfferList"/>
				
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="eat" resultType="boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
							if(getAssets().getAsset("Food").getQuantity() - getEAT_AMOUNT() >= getEAT_AMOUNT() ){
								getAssets().getAsset("Food").withdraw(getEAT_AMOUNT());
								setFoodStock(getFoodStock()- getEAT_AMOUNT());
								System.out.println("Eat: " + getEAT_AMOUNT());
								return true;
							}	
							System.out.println("Die");
							return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
							getAssets().getAsset("Food").deposit(getSkillLevelFood());
							setFoodStock(getFoodStock() + getSkillLevelFood());
							System.out.println("produceFood: " + getAssets().getAsset("Food").getQuantity());
							return getFoodStock();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceGold" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
							getAssets().getAsset("Gold").deposit(getSkillLevelGold());
							setGoldAmount(getGoldAmount() + getSkillLevelGold());
							System.out.println("produceGold: " + getAssets().getAsset("Gold").getQuantity());
							return getGoldAmount();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = getAssets().getAsset("Gold").getQuantity();
			          	for (double x = getAssets().getAsset("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if(x == 0.0){
			            		x = .00000000001;
			            	} 
			            	double mod = .1*Math.pow(getTARGET_FOOD_STOCK()/x, .2) +.90/*5*/+Random.uniform(0.0, 1.0)*getRANDOM_FACTOR();
			            	double price = mod*getLastPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0){
			            		break;
			            	}
			              	purse -= quantum*price;
			            	if(purse < 0.0){
			            		break;
			            	}
			            	Offer o = new Offer();
			            	//prüfen ob überhaupt soviel abgehoben werden kann eventl. esrt im Markt
			            	o.setProduct("Food");
			            	o.setCurrency("Gold");
			            	o.setMaxQuantity(quantum);
			            	o.setPrice(price);
			            	getBuyList().addOffer(o);
			            	//System.out.println("buyFood: quantum" + quantum + " ||||| price:   " + price);
			          	}
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
						if(getAssets().getAsset("Food").getQuantity() > 1.5*getTARGET_FOOD_STOCK()){
				        	final double quantum = getEAT_AMOUNT() * 1.0;
				          	for (double x = getAssets().getAsset("Food").getQuantity(); x > 1.5*getTARGET_FOOD_STOCK(); x -= quantum) {
					            if(x == 0.0){
					            	x = .00000000001;
					            }
					            double mod = .1*Math.pow(getTARGET_FOOD_STOCK()/(x - getTARGET_FOOD_STOCK()), .2) +.90/*5*/+Random.uniform(0.0, 1.0)*getRANDOM_FACTOR();
					            double price = mod*getLastPrice();
					            if (price <= 0.0){
					            	break;
					            }
					            
					            Offer o = new Offer();
					            o.setProduct("Food");
				            	o.setCurrency("Gold");
				            	o.setMaxQuantity(quantum);
				            	o.setPrice(price);
				            	getSellList().addOffer(o);
					            //System.out.println("sellFood: quantum" + quantum + " ||||| price:   " + price);
				          }
						return true;
						}
						return false;
					]]></Body>
				</Function>
				<PeriodicTimeEventType name="SetAssets" />
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<CommunicationRule name="SetAssets_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<WHEN eventType="SetAssets" />
					<DO>
						<UPDATE-AGT>
							<Slot property="foodStock">
								<ValueExpr language="Java"><![CDATA[
									p.getAssets().addAsset(new Float(getFoodStock()), "Food", "Stk")
								]]></ValueExpr>
							</Slot>
							<Slot property="goldAmount">
								<ValueExpr language="Java"><![CDATA[
									p.getAssets().addAsset(60.0f, "Gold", "Stk")	
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>	
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<CommunicationRule name="OpenMarket_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<WHEN eventType="InMessageEvent" messageType="OpenMarket" messageVariable="msg"/>
					<IF language="Java">!eat()</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastPrice">
								<ValueExpr language="Java">msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OpenMarket" receiverIdRefs="0" />
						</SCHEDULE-EVT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<Slot property="lastPrice">
								<ValueExpr language="Java">msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</ELSE>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<CommunicationRule name="produceFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<description> The foodInventory is incremented with the value of the skillLevelFood. </description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java"><![CDATA[
						(((p.getAssets().getAsset("Gold").getQuantity() + (p.getAssets().getAsset("Food").getQuantity() * p.getLastPrice())) < p.getLEISURE_VALUE()) && p.isLeisureWorker()) || !p.isLeisureWorker()
					]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="foodStock">
								<ValueExpr language="Java"><![CDATA[
									p.produceFood()	
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="ProduceGold_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The goldInventory is incremented with the value of the skillLevelGold. </description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java"><![CDATA[
						(((p.getAssets().getAsset("Gold").getQuantity() + (p.getAssets().getAsset("Food").getQuantity() * p.getLastPrice())) < p.getLEISURE_VALUE()) && p.isLeisureWorker()) || !p.isLeisureWorker()
					]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="goldAmount">
								<ValueExpr language="Java"><![CDATA[ 
									p.produceGold()
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="BuyFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">buyFood()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BuyFood_msg" receiverIdRefs="2">
								<Slot property="OfferList">
									<ValueExpr language="Java">getBuyList()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="SellFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">sellFood()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="SellFood_msg" receiverIdRefs="2">
								<Slot property="OfferList">
									<ValueExpr language="Java">getSellList()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</CommunicationRule>
			</AgentType>
			
			<AgentType name="Market">
				<Attribute type="Float" name="marketPrice"/>
				<Attribute type="Float" name="marketVolume"/>
				<ComplexDataProperty name="buyOffers" type="OfferList"/>
				<ComplexDataProperty name="sellOffers" type="OfferList"/>
				
				<Function name="clear" resultType="Boolean">
					<Body language="Java"><![CDATA[
						System.out.println("Start");// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        if (getBuyOffers().isEmpty() || getSellOffers().isEmpty()) {
				        	// ToDO less
				        	getBuyOffers().getOffers().clear();
				        	getSellOffers().getOffers().clear();
				        	System.out.println("False");
				        	return false;
				        }
				        // merge prices into sorted list, eliminating duplicates
        				ArrayList<Double> prices = new ArrayList<Double>(getBuyOffers().getOffers().size() + getSellOffers().getOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().getOffers().size() && b < getBuyOffers().getOffers().size()) {
				            if (equal(getSellOffers().getOffers().get(s).getPrice(), getBuyOffers().getOffers().get(b).getPrice())) {
				            	prices.add(getSellOffers().getOffers().get(s++).getPrice());
				                b++;
				            } else if(getSellOffers().getOffers().get(s).getPrice() < getBuyOffers().getOffers().get(b).getPrice()){
                				prices.add(getSellOffers().getOffers().get(s++).getPrice());
                			} else{
                				prices.add(getBuyOffers().getOffers().get(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().getOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers().getOffers().get(s).getPrice())){
                				s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < getBuyOffers().getOffers().size()
                    			   && equal(prices.get(prices.size() - 1),getBuyOffers().getOffers().get(b).getPrice())){
                				b++;
                			}
                			// then add the remainder if there is one
        					if (s < getSellOffers().getOffers().size()){
	           				 	while (s < getSellOffers().getOffers().size()) {
					                if (!equal(prices.get(prices.size() - 1), getSellOffers().getOffers().get(s).getPrice())){
					                	prices.add(getSellOffers().getOffers().get(s).getPrice());
					                }
					                s++;
				            	}
				            }else if (b < getBuyOffers().getOffers().size()){
            					while (b < getBuyOffers().getOffers().size()) {
					                if (!equal(prices.get(prices.size() - 1), getBuyOffers().getOffers().get(b).getPrice())){
					                    prices.add(getBuyOffers().getOffers().get(b).getPrice());
					                }
					                b++;
					            }
            				}
				        }
				   System.out.println("True");				
						return true;
					]]></Body>
				</Function>
				<Function name="equal" resultType="Boolean">
					<Parameter name="a" type="Float"/>
					<Parameter name="b" type="Float"/>
					<Body language="Java"><![CDATA[
						/*Float eps = 1e-5;
						if (a + eps < b)
            				return false;
       					if (a - eps > b)
            				return false;*/
        				return true;
					]]></Body>
				</Function>
				
				<!-- List nicht einfach übersreiben sonder anhängen wichtig sobald es mehrere agenten gibt -->
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="Accept_BuyFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<WHEN eventType="InMessageEvent" messageType="BuyFood_msg" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="buyOffers">
								<ValueExpr language="Java">msg.getOfferList()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="Accept_SellFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<WHEN eventType="InMessageEvent" messageType="SellFood_msg" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="sellOffers">
								<ValueExpr language="Java">msg.getOfferList()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</CommunicationRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<CommunicationRule name="Clear">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<WHEN eventType="InMessageEvent" messageType="Clear_msg"/>
					<IF language="Java">clear()</IF><THEN></THEN>
				</CommunicationRule>
			</AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule">
			<!-- ====================================== -->
				<WHEN eventType="StartOfDay"/>
				<FOR objectVariable="m" objectType="Market" />
				<FOR objectVariable="p" objectType="Person" />
				<DO>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="OpenMarket">
						    <SenderIdRef language="Java">m.getId()</SenderIdRef>
							<ReceiverIdRef language="Java">p.getId()</ReceiverIdRef>
							<Slot property="price">
								<ValueExpr language="Java">m.getMarketPrice()</ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="EachDayAt8AM_Rule">
			<WHEN eventType="EachDayAt8AM"/>
			<FOR objectVariable="p" objectType="Person" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="Java">p.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		<!-- ========================== -->
		</EnvironmentRule>	
		<!-- ============================= -->
		<EnvironmentRule name="Die">
			<!-- ========================== -->
			<WHEN eventType="OutMessageEvent" messageType="OpenMarket" eventVariable="evt" />
			<DO>
				<UPDATE-ENV>
					<DestroyObject>
						<ObjectIdRef language="Java">
							evt.getActorIdRef()
						</ObjectIdRef>
					</DestroyObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		
		<EnvironmentRule name="EndOfDay_Rule">
			<WHEN eventType="EndOfDay"/>
			<FOR objectVariable="m" objectType="Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Clear_msg" senderIdRef="0">
						<ReceiverIdRef language="Java">m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<Agent type="Market" id="2">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="marketPrice" value="2.0" />
		</Agent>
		
		<Agent type="Person"  id="1000" >
			<Slot property="foodStock" value="20" />	
			<Slot property="goldAmount" value="60" />
			<Slot property="skillLevelGold">
				<RandomVariable>
					<Uniform lowerBound="3.0" upperBound="4.0" />
				</RandomVariable>
			</Slot>
			<Slot property="skillLevelFood">
				<!-- <RandomVariable>
					<Uniform lowerBound="1.25" upperBound="1.75" />
					</RandomVariable> -->
				<ValueExpr language="Java">0</ValueExpr>
			</Slot>
			<PeriodicTimeEvent type="SetAssets" occurrenceTime="1"  />
		</Agent>
		<Agent type="Person"  id="1001" >
			<Slot property="foodStock" value="120" />	
			<Slot property="goldAmount" value="60" />
			<Slot property="skillLevelGold">
				<RandomVariable>
					<Uniform lowerBound="3.0" upperBound="4.0" />
				</RandomVariable>
			</Slot>
			<Slot property="skillLevelFood">
				<!-- <RandomVariable>
					<Uniform lowerBound="1.25" upperBound="1.75" />
					</RandomVariable> -->
				<ValueExpr language="Java">0</ValueExpr>
			</Slot>
			<PeriodicTimeEvent type="SetAssets" occurrenceTime="1"  />
		</Agent>
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<ExogenousEvent occurrenceTime="8" type="EachDayAt8AM" />
		<ExogenousEvent occurrenceTime="24" type="EndOfDay" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="Food" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food</Text>
					<Text xml:lang="de">Marktpreis</Text>
					<Text xml:lang="es">Precio de Mercado</Text>
					<Text xml:lang="fr">Le Prix du Marché</Text>
					<Text xml:lang="ro">Pret mediu</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market price?</Text>
					<Text xml:lang="de">Was ist der durchschnittliche Marktpreis?</Text>
					<Text xml:lang="es">Cuál es el precio medio de mercado?</Text>
					<Text xml:lang="fr">Quel est le moyen prix du marché?</Text>
					<Text xml:lang="ro">Care este pretul mediu statilit de bursa?</Text>
				</Hint>
				<Format decimalPlaces="1">
					<Weight>kg</Weight>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="Volume" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Volume</Text>
					<Text xml:lang="de">Marktpreis</Text>
					<Text xml:lang="es">Precio de Mercado</Text>
					<Text xml:lang="fr">Le Prix du Marché</Text>
					<Text xml:lang="ro">Pret mediu</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market price?</Text>
					<Text xml:lang="de">Was ist der durchschnittliche Marktpreis?</Text>
					<Text xml:lang="es">Cuál es el precio medio de mercado?</Text>
					<Text xml:lang="fr">Quel est le moyen prix du marché?</Text>
					<Text xml:lang="ro">Care este pretul mediu statilit de bursa?</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
		</StatisticsUI>
	</UserInterface>
</SimulationScenario>
