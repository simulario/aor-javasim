<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.8.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../ext/aorsl/AORSL-0-8-3.xsd" xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	scenarioName="InfoGame" scenarioTitle="InfoGame"
	simulationManagerDirectory="../../..">

<SimulationParameters simulationSteps="8640" stepDuration="1" timeUnit="h"/>

<SimulationModel modelName="InfoGame" modelTitle="InfoGame">
	<documentation>
	<dc:description>Infogame is a game for education and research in information systems development created by Rommert J. Casimir in 1988. </dc:description>
	<dc:creator>Rommert J. Casimir</dc:creator>
	<dc:creator>Gerd Wagner</dc:creator>
	<dc:created>20090320</dc:created>
	<dc:source>Infogame by Rommert J. Casimir, 1988-2003</dc:source>
    </documentation>
    
<DataTypes>
	<Enumeration name="ItemRole">
		<EnumerationLiteral>PURCHASE_ITEM</EnumerationLiteral>
		<EnumerationLiteral>PRODUCTION_ITEM</EnumerationLiteral>
	</Enumeration>
	<Enumeration name="ProductionMode">
		<EnumerationLiteral>MAKE_TO_ORDER</EnumerationLiteral>
		<EnumerationLiteral>MAKE_TO_STOCK</EnumerationLiteral>
		<EnumerationLiteral>MAKE_TO_STOCK_WITH_BACKORDERS</EnumerationLiteral>
	</Enumeration>
	<ComplexDataType name="Input">
		<Attribute name="quantityPerRound" type="Integer"/>
		<ReferenceProperty name="itemType" type="ItemType"/>
	</ComplexDataType>
	<ComplexDataType name="Output">
		<Attribute name="quantityPerRound" type="Integer"/>
		<ReferenceProperty name="itemType" type="ItemType"/>
	</ComplexDataType>
</DataTypes>

<EntityTypes>
	<MessageType name="CustomerOrder">
		<ReferenceProperty name="itemType" type="ItemType"/>
		<Attribute name="quantity" type="Integer"/>
	</MessageType>
	<MessageType name="DeliveryConfirmation">
		<ReferenceProperty name="itemType" type="ItemType"/>
		<Attribute name="quantity" type="Integer"/>
	</MessageType>
	<ExogenousEventType name="ConsumerDemand">
		<Periodicity>
			<RandomVariable>
				<Uniform lowerBound="1" upperBound="5" />
			</RandomVariable>
		</Periodicity>
	</ExogenousEventType>
	<ActionEventType name="ProductionStart">
		<ReferenceProperty name="itemType" type="ItemType"/>
		<Attribute name="quantity" type="Integer"/>
	</ActionEventType>
	<PerceptionEventType name="ProductionFinished">
		<ReferenceProperty name="itemType" type="ItemType"/>
		<Attribute name="quantity" type="Integer"/>
	</PerceptionEventType>

	<ObjectType name="ItemType">
		<Attribute name="weight" type="Float"/>
		<ComponentType ref="ItemType"/>
	</ObjectType>	
	
	<ObjectType name="MachineType" superType="ItemType">
		<ReferenceProperty name="industry" type="Industry"/>
		<Attribute name="lifeSpan" type="Integer"/>
		<!--
		<Attribute name="lowProductivity" type="Integer"/>
		<Attribute name="normalProductivity" type="Integer"/>
		<Attribute name="maintenanceCost" type="Float"/>
		-->
	</ObjectType>
	<ObjectType name="Industry">
		<EnumerationProperty name="productionMode" type="ProductionMode"/>
	</ObjectType>
	<ObjectType name="ProductionTechnology">
		<ReferenceProperty name="industry" type="Industry"/>
		<ReferenceProperty name="machineType" type="MachineType"/>
		<!--
		<ComplexDataProperty name="inputs" type="Input" upperMultiplicity="unbounded"/>
		<ComplexDataProperty name="output" type="Output"/>
		<Attribute name="setUpDays" type="Integer"/>
		<Attribute name="requiredNmrOfOperators" type="Integer"/>
		-->
	</ObjectType>
	<!-- =================================================== -->
	<PhysicalAgentType name="Company">
	<!-- =================================================== -->
		<ReferenceProperty name="industry" type="Industry"/>
		<ReferenceProperty name="productionTechnology" type="ProductionTechnology"/>
		<BeliefEntityType name="ItemType">
			<BeliefAttribute name="itemRole" type="String"/>
			<BeliefAttribute name="quantityInStock" type="Integer"/>
			<BeliefAttribute name="reorderLevel" type="Integer"/>
			<BeliefAttribute name="reorderQuantity" type="Integer"/>
			<!--
			<BeliefAttribute name="reorderPeriod" type="Integer"/>
			<BeliefAttribute name="reorderUpToLevel" type="Integer"/>
			<BeliefAttribute name="promisedDeliveryTime" type="Integer"/>
			<BeliefAttribute name="minCustomerOrderQantity" type="Integer"/>
			<BeliefAttribute name="maxCustomerOrderQantity" type="Integer"/>
			<BeliefAttribute name="advertisingBudget" type="Float"/>
			<BeliefAttribute name="salesPrice" type="Float"/>
			-->
		</BeliefEntityType>
		<PeriodicTimeEventType name="EndOfRound">
			<Periodicity>
				<ValueExpr language="Java">3*30*24</ValueExpr>
			</Periodicity>
		</PeriodicTimeEventType>
		<PeriodicTimeEventType name="EndOfDay" periodicity="24" />
		<PeriodicTimeEventType name="StartOfMonth">
			<Periodicity>
				<ValueExpr language="Java">30*24</ValueExpr>
			</Periodicity>
		</PeriodicTimeEventType>
		<PeriodicTimeEventType name="EndOfMonth">
			<Periodicity>
				<ValueExpr language="Java">30*24</ValueExpr>
			</Periodicity>
		</PeriodicTimeEventType>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ReactionRule name="CustomerOrderFulfilmentRule">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<documentation><dc:description>When a customer order comes in, if the order quantity is less than or equal to the quantity in stock of the ordered item type, then the ordered items are taken from the stock (and shipped), and a message about the delivery of the ordered quantity is sent to the customer.</dc:description></documentation>
			<WHEN eventType="InMessageEvent" messageType="CustomerOrder" eventVariable="evt" messageVariable="msg"/>
			<FOR beliefEntityVariable="it" beliefEntityType="ItemType">
				<BeliefEntityIdRef language="Java">msg.getItemType()</BeliefEntityIdRef>
			</FOR>
			<IF language="Java">msg.getQuantity() &lt;= it.getQuantityInStock()</IF>
			<THEN>
				<UPDATE-AGT>
					<UpdateBeliefEntity beliefEntityVariable="it">
						<BeliefSlot property="quantityInStock">
							<ValueExpr language="Java">it.getQuantityInStock() - msg.getQuantity()</ValueExpr>
						</BeliefSlot>
					</UpdateBeliefEntity>
				</UPDATE-AGT>
				<SCHEDULE-EVT>
					<OutMessageEventExpr messageType="DeliveryConfirmation">
						<ReceiverIdRef language="Java">evt.getSenderIdRef()</ReceiverIdRef>
						<Slot property="itemType">
							<ValueExpr language="Java">msg.getItemType()</ValueExpr>
						</Slot>
						<Slot property="quantity">
							<ValueExpr language="Java">msg.getQuantity()</ValueExpr>
						</Slot>
					</OutMessageEventExpr>
				</SCHEDULE-EVT>
			</THEN>
		</ReactionRule>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ReactionRule name="DeliveryConfirmationRule">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<documentation><dc:description>When purchase items are received, the inventory is incremented by the delivered quantity.</dc:description></documentation>
			<WHEN eventType="InMessageEvent" messageType="DeliveryConfirmation" messageVariable="msg"/>
			<FOR beliefEntityVariable="it" beliefEntityType="ItemType">
				<BeliefEntityIdRef language="Java">msg.getItemType()</BeliefEntityIdRef>
			</FOR>
			<DO>
				<UPDATE-AGT>
					<UpdateBeliefEntity beliefEntityVariable="it">
						<BeliefSlot property="quantityInStock">
							<ValueExpr language="Java">it.getQuantityInStock() + msg.getQuantity()</ValueExpr>
						</BeliefSlot>
					</UpdateBeliefEntity>
				</UPDATE-AGT>
			</DO>
		</ReactionRule>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ReactionRule name="ProductionStartRule">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<documentation><dc:description>At the end of a day, if the quantity in stock of a production item has fallen below the reorder level, a production start action is performed.</dc:description></documentation>
			<WHEN eventType="EndOfDay"/>
			<FOR beliefEntityVariable="it" beliefEntityType="ItemType"/>
			<IF language="Java"><![CDATA[
				it.getItemRole().equals("PRODUCTION_ITEM") && (it.getQuantityInStock() < it.getReorderLevel())
			]]></IF>
			<THEN>
				<SCHEDULE-EVT>
					<ActionEventExpr actionEventType="ProductionStart">
						<Slot property="itemType">
							<ValueExpr language="Java">it.getIdRef()</ValueExpr>
						</Slot>
						<Slot property="quantity">
							<ValueExpr language="Java">it.getReorderQuantity()</ValueExpr>
						</Slot>
					</ActionEventExpr>
				</SCHEDULE-EVT>
			</THEN>
		</ReactionRule>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ReactionRule name="ProductionFinishedRule">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- This is a simplified version of the rule not modeling the transformation of input items -->
		<documentation><dc:description>When a production activitiy has been finished, the inventory is incremented by the produced quantity.</dc:description></documentation>
			<WHEN eventType="ProductionFinished" eventVariable="e"/>
			<FOR  beliefEntityVariable="it" beliefEntityType="ItemType">
				<BeliefEntityIdRef language="Java">e.getItemType()</BeliefEntityIdRef>
			</FOR>
		<DO>
			<UPDATE-AGT>
				<UpdateBeliefEntity beliefEntityVariable="it">
					<BeliefSlot property="quantityInStock">
						<ValueExpr language="Java">it.getQuantityInStock() + e.getQuantity()</ValueExpr>
					</BeliefSlot>
				</UpdateBeliefEntity>
			</UPDATE-AGT>
		</DO>
		</ReactionRule>
      </PhysicalAgentType>
</EntityTypes>
<!-- =================================================== -->
<EnvironmentRules>
<!-- =================================================== -->
	<EnvironmentRule name="ConsumerDemandRule">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<documentation><dc:description>When an exogenous consumer demand event occurs, a corresponding  customer order message event is created.</dc:description></documentation>
		<WHEN eventType="ConsumerDemand"/>
		<DO>
			<SCHEDULE-EVT>
				<InMessageEventExpr messageType="CustomerOrder" receiverIdRefs="1" senderIdRef="0">
					<Slot property="itemType">
						<ValueExpr language="Java">101</ValueExpr>
					</Slot>
					<Slot property="quantity">
						<ValueExpr language="Java">Random.uniformInt(1, 3)</ValueExpr>
					</Slot>
				</InMessageEventExpr>
			</SCHEDULE-EVT>
		</DO>
	</EnvironmentRule>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<EnvironmentRule name="ProductionStartRule">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<documentation><dc:description>When a production start action has been performed, a ProductionFinished perception event is created with some delay.</dc:description></documentation>
		<WHEN eventType="ProductionStart" eventVariable="e"/>
	<DO>
		<SCHEDULE-EVT>
			<PerceptionEventExpr eventType="ProductionFinished">
				<PerceiverIdRef language="Java">e.getActorIdRef()</PerceiverIdRef>
				<Delay>
					<RandomVariable>
						<Uniform lowerBound="12" upperBound="24" />
					</RandomVariable>
				</Delay>
				<Slot property="itemType">
					<ValueExpr language="Java">e.getItemType()</ValueExpr>
				</Slot>
				<Slot property="quantity">
					<ValueExpr language="Java">e.getQuantity()</ValueExpr>
				</Slot>
			</PerceptionEventExpr>
		</SCHEDULE-EVT>
	</DO>
	</EnvironmentRule>
</EnvironmentRules>
</SimulationModel>

<!-- =================================================== -->
<InitialState>
<!-- =================================================== -->
	<!--
	<Object type="Industry" name="Car" id="103">
		<Slot property="productionMode" value="MAKE_TO_STOCK_WITH_BACKORDERS"/>
	</Object>
	-->
	<Object type="ItemType" name="Bike" id="101">
		<Component type="ItemType" ref="BicycleFrame"></Component>
		<Component type="ItemType" ref="BicycleFrame"></Component>
		<Component type="ItemType" ref="BicycleFrame"></Component>
		<Component type="ItemType" ref="BicycleFrame"></Component>
	</Object>
	<Object type="ItemType" name="BicycleFrame" id="192"/>
	<Object type="ItemType" name="Handlebar" id="103"/>
	<Object type="ItemType" name="Wheel" id="104"/>
	<Object type="Industry" name="BikeIndustry" id="191">
		<Slot property="productionMode" value="MAKE_TO_STOCK"/>
	</Object>
	<Object type="Industry" name="MachineIndustry" id="192">
		<Slot property="productionMode" value="MAKE_TO_ORDER"/>
	</Object>
	<Object type="MachineType" name="BikeMM" id="191"> <!-- Bike Manufacturing Machine -->
		<Slot property="industry" value="191"/>
		<Slot property="lifeSpan" value="5"/>
	</Object>
	<Object type="MachineType" name="BikeMM2" id="192"> <!-- Bike Manufacturing Machine Manufacturing Machine -->
		<Slot property="industry" value="192"/>
	</Object>
	<Object type="ProductionTechnology" name="BikePT" id="211">
		<Slot property="industry" value="191"/>
		<Slot property="machineType" value="191"/>
<!--		
		<Slot property="inputs" 
		value="{itemType:1002, quantityPerRound:100} {itemType:1003, quantityPerRound:200} {itemType:1004, quantityPerRound:2000}"/>
		<Slot property="output" value="{itemType:1001, quantityPerRound:100}"/>
-->
	</Object>
	<Object type="ProductionTechnology" name="MachinePT" id="212">
		<Slot property="industry" value="192"/>
		<Slot property="machineType" value="192"/>
	</Object>
	<PhysicalAgent type="Company" name="Technium" id="1">
		<Slot property="industry" value="191"/>
		<Slot property="productionTechnology" value="211"/>
		<BeliefEntity type="ItemType" idRef="101">
			<BeliefSlot property="itemRole" value="PRODUCTION_ITEM"/>
			<BeliefSlot property="quantityInStock" value="100"/>
			<BeliefSlot property="reorderLevel" value="30"/>
			<BeliefSlot property="reorderQuantity" value="100"/>
		</BeliefEntity>
		<PeriodicTimeEvent type="EndOfDay" occurrenceTime="24"/>
		<PeriodicTimeEvent type="StartOfMonth" occurrenceTime="1"/>
		<PeriodicTimeEvent type="EndOfMonth" occurrenceTime="720"/>
		<PeriodicTimeEvent type="EndOfRound" occurrenceTime="2160"/>
	</PhysicalAgent>
	<ExogenousEvent type="ConsumerDemand" occurrenceTime="1"/>
  </InitialState>
</SimulationScenario>
