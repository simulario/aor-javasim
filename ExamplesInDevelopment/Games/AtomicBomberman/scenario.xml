<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org file:/D:/work/programming/eclipsePrj/AOR-Complete/trunk/AORSL/AORSL_0-9.xsd"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns="http://aor-simulation.org"
 xmlns:aors="http://aor-simulation.org"
 scenarioName="Bomberman"
 scenarioTitle="Atomic Bomberman"
 version="0.9">
            <!-- ================================================================================
            
            ================================================================================= -->
    
    <documentation>
        <dc:creator>Sascha Kaltschmidt and Benny Höckner</dc:creator>
        <dc:created>20110930</dc:created>
        <dc:title>Atomic Bomberman</dc:title>
        <dc:title xml:lang="de">Bombenmann</dc:title>
        <dc:subject>Agent-based simulation of classical bomberman game</dc:subject>
        <dc:subject xml:lang="de">Agentenbasierte Simulation des klassischen Bomberman Spiels</dc:subject>
        <dc:contributor>Gerd Wagner</dc:contributor>
        <dc:contributor>Gabriel Diaconita</dc:contributor>
        <dc:source>Most images are taken from the "Bombermaaan" game developed by the "Bombermaaan project" (http://bombermaaan.sourceforge.net/).
        </dc:source>
        <aors:shortDescription xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
            A reconstruction of the classical <a href="http://en.wikipedia.org/wiki/Bomberman">Bomberman</a> game originally published in 1983 by Hudson Soft".
        </aors:shortDescription>
        <aors:shortDescription xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
            Eine Rekonstruktion des klassischen <a href="http://de.wikipedia.org/wiki/Bomberman">Bomberman</a> Spiels, welches ursprünglich im Jahre 1983 von Hudson Soft entwickelt wurde.
        </aors:shortDescription>
        <aors:description xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
            <p>In this game 5 bombermans are fighting against each other. One of them is controlled by the user.
            Target for every bomberman is to eliminate every opponent by smart placing of bombs. Abilities of the agents and probabilities to win could be improved
            by collecting items.</p>
        </aors:description>
        <aors:description xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
            <p>In diesem Spiel treten 5 Bombermans gegeneinander an, wobei einer von diesen von einem Menschen gesteuert wird.
            Ziel eines jeden Bombermans ist es, alle Gegner durch geschicktes platzieren von Bomben zu eliminieren. Durch
            aufsammeln von diversen Gegenständen können spezielle Fähigkeiten der Spielfiguren verbessert und somit die Chancen
            auf den Sieg vergrößert werden.</p>
        </aors:description>
        <dc:license>Creative Commons Attribution-NonCommercial-ShareAlike 3.0,
            see http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:license>
    </documentation>
    
    <SimulationParameters simulationSteps="100000" stepTimeDelay="50"/>
    <SimulationModel modelName="Bomberman" modelTitle="AORSL version if Bomberman!">
    
        <SpaceModel geometry="Euclidean">
            <TwoDimensionalGrid xMax="15" yMax="13">
                <!-- only neccessary for drawing gras blocks -->
                <GridCellProperty name="cellRole" type="Integer" initialValue="__CellContent.NONE"/>
            </TwoDimensionalGrid>
        </SpaceModel>
        
        <DataTypes>
            <Enumeration name="Direction">
                <EnumerationLiteral>NONE</EnumerationLiteral>
                <EnumerationLiteral>LEFT</EnumerationLiteral>
                <EnumerationLiteral>UP</EnumerationLiteral>
                <EnumerationLiteral>RIGHT</EnumerationLiteral>
                <EnumerationLiteral>DOWN</EnumerationLiteral>
            </Enumeration>
            <Enumeration name="CellContent">
                <EnumerationLiteral>NONE</EnumerationLiteral>
                <EnumerationLiteral>SOLID</EnumerationLiteral>
                <EnumerationLiteral>DESTROYABLE</EnumerationLiteral>
                <EnumerationLiteral>BOMB</EnumerationLiteral>
                <EnumerationLiteral>ITEM</EnumerationLiteral>
                <EnumerationLiteral>BOMBERMAN</EnumerationLiteral>
                <EnumerationLiteral>EXPLOSION</EnumerationLiteral>
            </Enumeration>
            <Enumeration name="Items">
                <EnumerationLiteral>NONE</EnumerationLiteral>
                <EnumerationLiteral>BOMB</EnumerationLiteral>
                <EnumerationLiteral>FIRE</EnumerationLiteral>
                <EnumerationLiteral>DETONATOR</EnumerationLiteral>
                <EnumerationLiteral>BOMB_TOGGLE</EnumerationLiteral>
                <EnumerationLiteral>FIRE_TOGGLE</EnumerationLiteral>
                <EnumerationLiteral>DETONATOR_TOGGLE</EnumerationLiteral>
            </Enumeration>
            <Enumeration name="BombState">
                <EnumerationLiteral>TICKING1</EnumerationLiteral>
                <EnumerationLiteral>TICKING2</EnumerationLiteral>
                <EnumerationLiteral>TICKING3</EnumerationLiteral>
                <EnumerationLiteral>NOTTICKING1</EnumerationLiteral>
                <EnumerationLiteral>NOTTICKING2</EnumerationLiteral>
                <EnumerationLiteral>NOTTICKING3</EnumerationLiteral>
            </Enumeration>
        </DataTypes>
        <Globals>
            <GlobalVariable dataType="Integer" name="solidBlockListIndex" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="GameMap" />
            <GlobalVariable dataType="Integer" name="BombermanGameMap" /> <!-- Map for computer controlled bombermans with additional information -->
            <GlobalVariable dataType="Integer" name="solidBlockList"/>
            <GlobalVariable dataType="Integer" name="destroyableBlockList" />
            <GlobalVariable dataType="Integer" name="destroyableBlockListIndex" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="bombermanList" />
            <GlobalVariable dataType="Integer" name="bombermanListIndex" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="bombermanNameIndex" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="MapWidth" />
            <GlobalVariable dataType="Integer" name="MapHeight" />
            <GlobalVariable dataType="Integer" name="OldSimulationTick" initialValue="1" />
            <GlobalVariable dataType="Integer" name="lastBombId" initialValue="0" />
            <GlobalVariable dataType="Boolean" name="LeftBomb" initialValue="false"  />
            <GlobalVariable dataType="Boolean" name="OverBomb" initialValue="false"  />
            <GlobalVariable dataType="Boolean" name="RightBomb" initialValue="false"  />
            <GlobalVariable dataType="Boolean" name="UnderBomb" initialValue="false" />
            <GlobalVariable dataType="Boolean" name="gameReset" initialValue="false" />
            <GlobalVariable dataType="Integer" name="bombermanWins" />
            <GlobalVariable dataType="Integer" name="winsBomberman1" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="winsBomberman2" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="winsBomberman3" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="winsBomberman4" initialValue="0"/>
            <GlobalVariable dataType="Integer" name="winsBomberman5" initialValue="0"/>
            
            <GlobalFunction name="getTempGameMap" resultType="Array">
                <Body language="JavaScript">
                    <![CDATA[
                      var map = 
                       [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,3,0,2,0,2,0,2,0,2,0,2,0,4,1],
                        [1,0,1,2,1,2,1,0,1,2,1,2,1,0,1],
                        [1,2,2,0,0,0,0,2,2,2,2,2,2,2,1],
                        [1,0,1,2,1,2,1,0,1,2,1,2,1,0,1],
                        [1,2,0,0,2,0,2,0,2,0,2,0,0,2,1],
                        [1,0,1,2,1,2,1,5,1,2,1,2,1,0,1],
                        [1,2,2,2,2,2,0,0,0,2,2,2,2,2,1],
                        [1,0,1,2,1,2,1,2,1,2,1,2,1,0,1],
                        [1,2,2,2,2,2,2,0,0,0,0,0,2,2,1],
                        [1,0,1,2,1,2,1,2,1,2,1,2,1,0,1],
                        [1,7,0,2,0,2,0,0,0,2,0,2,0,6,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];
                        return map;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="bombermanColorName" resultType="String">
                <documentation>
                    <dc:description> Returns the color name of the bomberman
                    </dc:description>
                </documentation>
                <Body language="JavaScript">
                    <![CDATA[
                        var names = ["Black", "White", "Red", "Blue", "Green"];
                        return names[__Global.bombermanNameIndex++];
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="createLists" resultType="Integer">
                <documentation>
                    <dc:description> Function put the coordinates of the blocks into corresponding arrays.
            array form: x0, y0, x1, y1, ....
                    </dc:description>
                </documentation>
                <Body language="JavaScript">
                    <![CDATA[
                        var map = __Global.getGameMap();
                        var x = map[0].length;
                        var y = map.length;
                        
                        for (i = 1; i <= y; i++)
                        {
                            for (j = 1; j <= x; j++)
                            {
                                switch(map[y-i][j-1])
                                {
                                    case(__CellContent.DESTROYABLE):
                                    {
                                        __Global.destroyableBlockList.push(j);
                                        __Global.destroyableBlockList.push(i);
                                        break;
                                    }
                                    case(__CellContent.SOLID):
                                    {
                                        __Global.solidBlockList.push(j);
                                        __Global.solidBlockList.push(i);
                                        break;
                                    }
                                    case(__CellContent.BOMERBMAN):
                                    {
                                        __Global.bombermanList.push(j);
                                        __Global.bombermanList.push(i);
                                        __Global.GameMap[y-i][j-1] = __CellContent.NONE;
                                        break;
                                    }
                                    default:{break}
                                }
                            }
                        }
                        
                        return 0;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="getNextEntryOfList" resultType="Integer">
                <documentation>
                    <dc:description> Function returns the next element of the list corresponding to the given parameter
            and increases the corresponding index
                    </dc:description>
                </documentation>
                <Parameter name="blockType" type="Integer" />
                <Body language="JavaScript">
                    <![CDATA[
                        var result = 0;
                        
                        switch(blockType)
                        {
                            case(__CellContent.DESTROYABLE):
                            {
                                result = __Global.destroyableBlockList[__Global.destroyableBlockListIndex++];
                                break;
                            }
                            case(__CellContent.SOLID):
                            {
                                result = __Global.solidBlockList[__Global.solidBlockListIndex++];
                                break;
                            }
                            case(__CellContent.BOMBERMAN):
                            {
                                result = __Global.bombermanList[__Global.bombermanListIndex++];
                                break;
                            }
                            default: {break;}
                        }
                        
                        return result;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="convert" resultType="Array">
                <documentation>
                    <dc:description> Function converts the user readable map into an internal representation using an
            enumeration.
                    </dc:description>
                </documentation>
                <Body language="JavaScript">
                    <![CDATA[
                        var realMap = __Global.getTempGameMap();
                        
                        for (i = 0; i < realMap.length; i++)
                        {
                            for (j = 0; j < realMap[i].length; j++)
                            {
                                switch(realMap[i][j])
                                {
                                    case(0) : realMap[i][j] = __CellContent.NONE; break;
                                    case(1) : realMap[i][j] = __CellContent.SOLID; break;
                                    case(2) : realMap[i][j] = __CellContent.DESTROYABLE; break;
                                    default: realMap[i][j] = __CellContent.BOMERBMAN; break;
                                }
                            }
                        }
                        
                        return realMap;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="setMapCell" resultType="Array">
                <documentation>
                    <dc:description> Function sets the given MapCell with the given CellContent value and returns
            the hole map
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer" />
                <Parameter name="y" type="Integer" />
                <Parameter name="status" type="CellContent" />
                <Body language="JavaScript">
                    <![CDATA[
                        if (x > 0 && y > 0)
                        {
                            var map = __Global.getGameMap();
                            var rows = map.length;
                            
                            map[rows-y][x-1] = status;
                         }   
                            return map;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="setBombermanMapCell" resultType="Array">
                <documentation>
                    <dc:description> Function sets the given MapCell with the given CellContent value and returns
            the hole map (the map for computer controlled )
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer" />
                <Parameter name="y" type="Integer" />
                <Parameter name="status" type="Integer" />
                <Parameter name="range" type="Integer" />
                <Body language="JavaScript">
                    <![CDATA[
                        if (status === -2)
                            __Global.markBombAreaOnBombermanMap(x, y, range);
                        else if (status === 0 && range > 0)
                            __Global.unMarkBombAreaOnBombermanMap(x, y, range);
                            
                        if (x > 0 && y > 0)
                        {
                            var map = __Global.getBombermanGameMap();
                            var rows = map.length;
                            
                            map[rows-y][x-1] = status;
                         }   
                            return map;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="markBombAreaOnBombermanMap" resultType="void">
                <documentation>
                    <dc:description> Function marks the cells of the bombermanmap which are in range of an bomb. So the computer controlled bomberman know there not to move.
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer" />
                <Parameter name="y" type="Integer" />
                <Parameter name="range" type="Integer" />
                <Body language="JavaScript">
                    <![CDATA[
                        for (i = 1; i <= range; i++)
                        {
                            if (!__Global.isBlockOnCoordinates(x-i,y))
                                __Global.setBombermanMapCell(x-i, y, -1);
                            else
                                break;                        
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (!__Global.isBlockOnCoordinates(x+i,y))
                                __Global.setBombermanMapCell(x+i, y, -1);
                            else
                                break;
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (!__Global.isBlockOnCoordinates(x,y-i))
                                __Global.setBombermanMapCell(x, y-i, -1);
                            else
                                break;
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (!__Global.isBlockOnCoordinates(x,y+i))
                                __Global.setBombermanMapCell(x, y+i, -1);
                            else
                                break;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="unMarkBombAreaOnBombermanMap" resultType="void">
                <documentation>
                    <dc:description> Funtion unmarks the mark cells of the bombermanmap if the corresponding bombs detonates.
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer" />
                <Parameter name="y" type="Integer" />
                <Parameter name="range" type="Integer" />
                <Body language="JavaScript">
                    <![CDATA[
                        map = __Global.getBombermanGameMap();
                        height = map.length;
                        
                        for (i = 1; i <= range; i++)
                        {
                            if (map[height-y][x-i-1] === -1)
                                __Global.setBombermanMapCell(x-i, y, 0);
                            else
                                break;                        
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (map[height-y][x+i-1] === -1)
                                __Global.setBombermanMapCell(x+i, y, 0);
                            else
                                break;
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (map[height-(y-i)][x-1] === -1)
                                __Global.setBombermanMapCell(x, y-i, 0);
                            else
                                break;
                        }
                        for (i = 1; i <= range; i++)
                        {
                            if (map[height-(y+i)][x-1] === -1)
                                __Global.setBombermanMapCell(x, y+i, 0);
                            else
                                break;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ==================================================================================-->
            <GlobalFunction name="isBlockOnCoordinates" resultType="boolean">
                <documentation>
                    <dc:description> Checks if the bomberman could move to the given position, e.g. not possible if
            there is a solid block
                    </dc:description>
                </documentation>
                <Parameter name="x" type="int"/>
                <Parameter name="y" type="int"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var map = __Global.getGameMap();
                        var rows = map.length;
                        
                        if ((map[rows-y][x-1] === __CellContent.SOLID) || 
                            (map[rows-y][x-1] === __CellContent.DESTROYABLE) || 
                            (map[rows-y][x-1] === __CellContent.BOMB))
                        {
                            return true;
                        }
                        return false; 
                    ]]>
                </Body>
            </GlobalFunction>
        <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="checkIfBombermanInRange" resultType="Boolean">
                <documentation>
                    <dc:description> Function checks if a bomberman is in range of an bomb explosion.
                    </dc:description>
                </documentation>
                <Parameter name="bombermanX" type="Integer"/>
                <Parameter name="bombermanY" type="Integer"/>
                <Parameter name="bombX" type="Integer"/>
                <Parameter name="bombY" type="Integer"/>
                <Parameter name="bombRange" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        if((bombX === bombermanX || bombY === bombermanY) && (Math.abs(bombX+bombY - (bombermanX+bombermanY)) <= bombRange))
                        {
                            /* Bombe links neben bomberman */
                            if (bombY === bombermanY && bombX < bombermanX)
                            {
                                for(i=bombX; i<bombermanX-1; i++)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-bombY][i] !== __CellContent.NONE)
                                    return false;
                                }
                                return true;
                            }
                            /* Bombe rechts neben bomberman */
                            else if (bombY === bombermanY && bombX > bombermanX)
                            {
                                for(i=bombX; i>bombermanX+1; i--)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-bombY][i-2] !== __CellContent.NONE)
                                    return false;
                                }
                                return true;
                            }
                            /* Bombe unterhalb von bomberman */
                            else if (bombX === bombermanX && bombY < bombermanY)
                            {
                                for(i=bombY; i<bombermanY-1; i++)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-i-1][bombX-1] !== __CellContent.NONE)
                                    return false;
                                }
                                return true;
                            }
                            /* Bombe muss oberhalb von bomberman sein */
                            else if (bombX === bombermanX && bombY > bombermanY)
                            {
                                for(i=bombY; i>bombermanY+1; i--)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-i+1][bombX-1] !== __CellContent.NONE)
                                    return false;
                                }                                
                                return true;
                            }
                        }
                        return false;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="couldBlockBeDestroyed" resultType="Boolean">
                <documentation>
                    <dc:description> Function which checks, if a given block could be destroyed by a given bomb
                    </dc:description>
                </documentation>
                <Parameter name="blockX" type="Integer"/>
                <Parameter name="blockY" type="Integer"/>
                <Parameter name="bombX" type="Integer"/>
                <Parameter name="bombY" type="Integer"/>
                <Parameter name="bombRange" type="Integer"/>
                <Parameter name="bombId" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        if ((__Global.getOldSimulationTick() < __Simulator.getCurrentSimulationStep()) || (bombId !== __Global.getLastBombId()))
                        {
                            __Global.setOldSimulationTick(__Simulator.getCurrentSimulationStep());
                            __Global.setLastBombId(bombId);
                            __Global.setLeftBomb(false);
                            __Global.setOverBomb(false);
                            __Global.setRightBomb(false);
                            __Global.setUnderBomb(false);
                        }
                    
                        if((bombX === blockX || bombY === blockY) && (Math.abs(bombX+bombY - (blockX+blockY)) <= bombRange))
                        {
                            /* Bombe links neben Block */
                            if ((bombY === blockY && bombX < blockX) && !__Global.RightBomb)
                            {
                                for(i=bombX; i<blockX-1; i++)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-bombY][i] !== __CellContent.NONE)
                                    return false;
                                }
                                __Global.RightBomb = true;
                                
                                return true;
                            }
                            /* Bombe rechts neben Block */
                            else if ((bombY === blockY && bombX > blockX) && !__Global.LeftBomb)
                            {
                                for(i=bombX; i>blockX+1; i--)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-bombY][i-2] !== __CellContent.NONE)
                                    return false;
                                }
                                __Global.LeftBomb = true;
                                
                                return true;
                            }
                            /* Bombe unterhalb von Block */
                            else if ((bombX === blockX && bombY < blockY) && !__Global.OverBomb)
                            {
                                for(i=bombY; i<blockY-1; i++)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-i-1][bombX-1] !== __CellContent.NONE)
                                        return false;
                                }
                                __Global.OverBomb = true;
                                
                                return true;
                            }
                            /* Bombe muss oberhalb von Block sein */
                            else if ((bombX === blockX && bombY > blockY) && !__Global.UnderBomb)
                            {
                                for(i=bombY; i>blockY+1; i--)
                                {
                                    if (__Global.GameMap[__Global.MapHeight-i+1][bombX-1] !== __CellContent.NONE)
                                    return false;
                                }
                                __Global.UnderBomb = true;
                                
                                return true;
                            }
                        }
                        return false;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="convertToItem" resultType="Integer">
                <documentation>
                    <dc:description> Converts the given integer into an enumaration of type "item"
                    </dc:description>
                </documentation>
                <Parameter name="item" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        switch(item)
                        {
                            case(1): return __Items.BOMB; break;
                            case(2): return __Items.FIRE; break;
                            case(3): return __Items.DETONATOR; break;
                            default: return 0;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="toggleItem" resultType="Integer">
                <documentation>
                    <dc:description> This function is only for animation purposes. Every item toogles between two states. The "normal" and the "_toggle" state. So it is possible to switch the image and animate the item.
                    </dc:description>
                </documentation>
                <Parameter name="item" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                       switch(item)
                        {
                            case(__Items.BOMB): return __Items.BOMB_TOGGLE; break;
                            case(__Items.BOMB_TOGGLE): return __Items.BOMB; break;
                            case(__Items.FIRE): return __Items.FIRE_TOGGLE; break;
                            case(__Items.FIRE_TOGGLE): return __Items.FIRE; break;
                            case(__Items.DETONATOR): return __Items.DETONATOR_TOGGLE; break;
                            case(__Items.DETONATOR_TOGGLE): return __Items.DETONATOR; break;
                            default: return 0; break;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="getInitialBombState" resultType="Integer">
                <documentation>
                    <dc:description> This function decides which images for a bomb are shown. The self destroying one or the detonator bomb ones.
                    </dc:description>
                </documentation>
                <Parameter name="bombState" type="Boolean"/>
                <Body language="JavaScript">
                    <![CDATA[
                        if (bombState)
                        {
                            return __BombState.NOTTICKING1;
                        }
                        
                        return __BombState.TICKING1;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="getNextBombState" resultType="Integer">
                <documentation>
                    <dc:description> This function is only for animation purposes. It changes the state of the ticking bomb, so it is possible to use different images.
                    </dc:description>
                </documentation>
                <Parameter name="bombState" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        switch(bombState)
                        {
                            case(__BombState.TICKING1): return __BombState.TICKING2; break;
                            case(__BombState.TICKING2): return __BombState.TICKING3; break;
                            case(__BombState.TICKING3): return __BombState.TICKING1; break;
                            case(__BombState.NOTTICKING1): return __BombState.NOTTICKING2; break;
                            case(__BombState.NOTTICKING2): return __BombState.NOTTICKING3; break;
                            case(__BombState.NOTTICKING3): return __BombState.NOTTICKING1; break;
                            default: return 0; break;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            AI Logic - START
            ================================================================================= -->
            <GlobalFunction name="searchSaveSpot" resultType="Array">
                <documentation>
                    <dc:description> This function searches recursive an save spot from the given spot.
                    </dc:description>
                </documentation>
                <Parameter name="direction" type="Integer"/>
                <Parameter name="x" type="Integer"/>
                <Parameter name="y" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        if (direction > 3)
                            return null;
                        
                        var position = __Global.lookForSaveSpotAround(x,y);
                        if (position === null)
                        {
                            var isBlock = false;
                            switch(direction)
                            {
                                case(0): isBlock = __Global.isBlockOnCoordinates(x, y+1); break;
                                case(1): isBlock = __Global.isBlockOnCoordinates(x+1, y); break;
                                case(2): isBlock = __Global.isBlockOnCoordinates(x, y-1); break;
                                case(3): isBlock = __Global.isBlockOnCoordinates(x-1, y); break;
                                default: break;
                            }
                            
                            if(isBlock)
                                return __Global.searchSaveSpot(direction+1, x, y);
                            
                            switch(direction)
                            {
                                case(0): {
                                            var result = __Global.searchSaveSpot(direction, x, y+1);
                                            if (result === null)
                                                return __Global.searchSaveSpot(direction+1, x, y);
                                            else
                                                return result;
                                            break;
                                          }
                                case(1): {
                                            var result = __Global.searchSaveSpot(direction, x+1, y);
                                            if (result === null)
                                                return __Global.searchSaveSpot(direction+1, x, y);
                                            else
                                                return result;
                                            break;
                                          }
                                case(2): {
                                            var result = __Global.searchSaveSpot(direction, x, y-1);
                                            if (result === null)
                                                return __Global.searchSaveSpot(direction+1, x, y);
                                            else
                                                return result;
                                            break;
                                          }
                                case(3): {
                                            var result = __Global.searchSaveSpot(direction, x-1, y);
                                            if (result === null)
                                                return __Global.searchSaveSpot(direction+1, x, y);
                                            else
                                                return result;
                                            break;
                                          }
                                default: break;
                            }
                        }
                        else
                        {
                            return position;
                        }
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="lookForSaveSpotAround" resultType="Array">
                <documentation>
                    <dc:description> The function "look" if there is an save spot directly around the given spot. if not "null" will be returned.
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer"/>
                <Parameter name="y" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var map = __Global.getBombermanGameMap();
                        var height = map.length;
                        
                        if (map[height-y-1][x-1] ===  0) return new Array(x,y+1);
                        if (map[height-y]  [x]   ===  0) return new Array(x+1,y);
                        if (map[height-y+1][x-1] ===  0) return new Array(x,y-1);
                        if (map[height-y]  [x-2] ===  0) return new Array(x-1,y);
                        
                        return null;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="chooseTarget" resultType="Object">
                <documentation>
                    <dc:description> The function calculates an target for the copmuter controlled bomberman. Actual it only chooses the position of the bomberman with id = 1.
                    </dc:description>
                </documentation>
                <Parameter name="bomberman" type="Object"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var bombermanList = __Simulator.envSim.getObjectsByType("Bomberman");
                        
                        var result = {x: 0, y: 0};
                        for (i = 0; i < bombermanList.size(); i++)
                        {
                            if (1 === (bombermanList.get(i)).getId())
                            {
                                result = {
                                    x: (bombermanList.get(i)).getX(),
                                    y: (bombermanList.get(i)).getY()
                                }
                                break;
                            }
                        }
                        
                        return result;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="checkIfEnemyAround" resultType="Boolean">
                <documentation>
                    <dc:description> This function checks if there is an enemy around the given bomberman.
                    </dc:description>
                </documentation>
                <Parameter name="bomberman" type="Object"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var bombermanList = __Simulator.envSim.getObjectsByType("Bomberman");
                        
                        for (i = 0; i < bombermanList.size(); i++)
                        {
                            var bombi = bombermanList.get(i);
                            if (bomberman.getId() !== bombi.getId() &&
                                (bomberman.getX() === bombi.getX() || bomberman.getY() === bombi.getY()) &&
                                (Math.abs((bomberman.getX()+bomberman.getY()) - (bombi.getX() + bombi.getY())) <= 1)
                               )
                            {
                                return true;
                            }
                        }
                        
                        return false;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="isDestroyableBlockAround" resultType="Boolean">
                <documentation>
                    <dc:description> Functions checks if there is an destroyable block around the given position.
                    </dc:description>
                </documentation>
                <Parameter name="x" type="Integer"/>
                <Parameter name="y" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var map = __Global.getBombermanGameMap();
                        var height = map.length;
                        
                        if (map[height-y-1][x-1] ===  2) return true;
                        if (map[height-y]  [x]   ===  2) return true;
                        if (map[height-y+1][x-1] ===  2) return true;
                        if (map[height-y]  [x-2] ===  2) return true;
                        
                        return false;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="mainAi" resultType="void">
                <documentation>
                    <dc:description> Function for the computer controlled bombermans intelligence.
                    </dc:description>
                </documentation>
                <Parameter name="bomberman" type="Object"/>
                <Body language="JavaScript">
                    <![CDATA[
                        var map = __Global.getBombermanGameMap();
                        var height = map.length;
                        
                        bomberman.setNextX(0);
                        bomberman.setNextY(0);
                        bomberman.setNextDetonate(false);
                        bomberman.setPlantBomb(false);
                        
                        /*
                        * check if bomberman is save (is in bomb range or stands on bomb)
                        */
                        if (map[height-bomberman.getY()][ bomberman.getX()-1] === -1 || map[height-bomberman.getY()][ bomberman.getX()-1] === -2)
                        {
                            /*
                            * Bomberman is not save!
                            *
                            * try to find a save spot
                            */
                            var saveSpot = __Global.searchSaveSpot(0, bomberman.getX(), bomberman.getY());
                            
                            if (saveSpot !== null)
                            {
                                /*
                                * save spot found, now find a way to it with help of a* algo
                                */
                                var astar = new js.algorithms.ASTAR(__Global.getBombermanGameMap(), [-1,0,3,4,5,6,7]);
                                
                                var start = {x : bomberman.getX()-1, y : bomberman.getY()-1};
                                var target = {x: (saveSpot[0]-1), y: (saveSpot[1]-1)};
                                
                                var path = astar.search(start, target);
                                
                                /*
                                * a* should always found a way! (because of behaviour of the searchSaveSpot function)
                                */
                                if(path.length >= 1)
                                {
                                     var firstNodeFromPath = path[0];
                                     bomberman.setNextX(firstNodeFromPath.x - start.x);
                                     bomberman.setNextY(firstNodeFromPath.y - start.y);
                                }
                            }
                        }
                        else
                        {
                            //
                            // bomberman is save
                            // check if bomberman has detonator and use it
                            //
                            if (bomberman.isDetonator())
                            {
                                bomberman.setNextDetonate(true);
                            }
                            
                            //
                            // is an enemy in the near of the bomberman
                            //
                            if (bomberman.getNumberOfBombs() > 0 && __Global.checkIfEnemyAround(bomberman))
                            {
                                bomberman.setPlantBomb(true);
                            }
                            
                            var enemyPos = __Global.chooseTarget(bomberman);
                            
                            var astar = new js.algorithms.ASTAR(__Global.getBombermanGameMap(), [-1,0,3,4,5,6,7]);
                            
                            var start = {x : bomberman.getX()-1, y : bomberman.getY()-1};
                            var target = {x: enemyPos.x-1, y: enemyPos.y-1};
                                
                            var path = astar.search(start, target);
                            if (path.length > 0)
                            {
                                 var firstNodeFromPath = path[0];
                                 bomberman.setNextX(firstNodeFromPath.x - start.x);
                                 bomberman.setNextY(firstNodeFromPath.y - start.y);
                            }
                            else
                            {
                                var saveSpot = __Global.searchSaveSpot(0, bomberman.getX(), bomberman.getY());
                                if (bomberman.getNumberOfBombs() > 0 &&
                                    __Global.isDestroyableBlockAround(bomberman.getX(), bomberman.getY()) &&
                                    (saveSpot !== null)
                                    )
                                {
                                    bomberman.setPlantBomb(true);
                                }
                                else if (bomberman.getNumberOfBombs() > 0 && (saveSpot !== null))
                                {
                                    //
                                    // try to move in direction of enemy
                                    //
                                    
                                    if (enemyPos.y > bomberman.getY() && 
                                        (saveSpot !== null) &&
                                        !__Global.isBlockOnCoordinates(bomberman.getX(), bomberman.getY()+1) &&
                                        map[height-(bomberman.getY()+1)][ bomberman.getX()-1] !== -1)
                                    {
                                        bomberman.setNextY(1);
                                    }
                                    else if (enemyPos.y < bomberman.getY() && 
                                            (saveSpot !== null) &&
                                            !__Global.isBlockOnCoordinates(bomberman.getX(), bomberman.getY()-1) &&
                                            map[height-(bomberman.getY()-1)][ bomberman.getX()-1] !== -1)
                                    {
                                        bomberman.setNextY(-1);
                                    }
                                    else if (enemyPos.x > bomberman.getX() && 
                                            (saveSpot !== null) &&
                                            !__Global.isBlockOnCoordinates(bomberman.getX()+1, bomberman.getY()) &&
                                            map[height-bomberman.getY()][ bomberman.getX()] !== -1)
                                    {
                                        bomberman.setNextX(1);
                                    }
                                    else if (enemyPos.x < bomberman.getX() && 
                                            (saveSpot !== null) &&
                                            !__Global.isBlockOnCoordinates(bomberman.getX()-1, bomberman.getY()) &&
                                            map[height-bomberman.getY()][ bomberman.getX()-2] !== -1)
                                    {
                                        bomberman.setNextX(-1);
                                    }
                                    else if (saveSpot !== null)
                                    {
                                        /*var randomValue = parseInt( Math.random() * 4);
                                        //
                                        // not possible to walk in direction of enemy, so walk in a free direction
                                        //
                                        if (randomValue < 1) bomberman.setNextY(1);
                                        else if (randomValue < 2)  bomberman.setNextX(1);
                                        else if (randomValue < 3)  bomberman.setNextY(-1);
                                        else bomberman.setNextX(-1);*/
                                        var astar = new js.algorithms.ASTAR(__Global.getBombermanGameMap(), [-1,0,3,4,5,6,7]);
                            
                                        var start = {x : bomberman.getX()-1, y : bomberman.getY()-1};
                                        var target = {x: saveSpot[0]-1, y: saveSpot[1]-1};
                                            
                                        var path = astar.search(start, target);
                                        if (path.length > 0)
                                        {
                                             var firstNodeFromPath = path[0];
                                             bomberman.setNextX(firstNodeFromPath.x - start.x);
                                             bomberman.setNextY(firstNodeFromPath.y - start.y);
                                        }
                                    }
                                }
                            }
                        }
                        
                        //return result;
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            AI Logic - END
            ================================================================================= -->
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="updateWins" resultType="Array">
                <documentation>
                    <dc:description> Updates the wins of all bombermans. Works as follows:
            There is a global Array named "bombermanWins" which is updated if only one bomberman
            is alive. For the user it would be nice to see, how many times a bomberman has won,
            so the score should be printed. But it is not possible to print with an CDATA
            construct, so the array is splittet in 5 global variables.
                    </dc:description>
                </documentation>
                <Parameter name="bombermanId" type="Integer"/>
                <Body language="JavaScript">
                    <![CDATA[
                        __Global.bombermanWins[bombermanId-1] = __Global.bombermanWins[bombermanId-1] + 1;
                        
                        switch(bombermanId)
                        {
                            case(1): __Global.setWinsBomberman1(__Global.getWinsBomberman1() + 1); break;
                            case(2): __Global.setWinsBomberman2(__Global.getWinsBomberman2() + 1); break;
                            case(3): __Global.setWinsBomberman3(__Global.getWinsBomberman3() + 1); break;
                            case(4): __Global.setWinsBomberman4(__Global.getWinsBomberman4() + 1); break;
                            case(5): __Global.setWinsBomberman5(__Global.getWinsBomberman5() + 1); break;
                            default: break;
                        }
                        return __Global.getBombermanWins()
                    ]]>
                </Body>
            </GlobalFunction>
            <!-- ================================================================================
            
            ================================================================================= -->
            <GlobalFunction name="calcRandomItem" resultType="Integer">
                <documentation>
                    <dc:description> Function to distribute items with different probability.
                    </dc:description>
                </documentation>
                <Body language="JavaScript">
                    <![CDATA[
                        var value = parseInt( Math.random() * 100);
                        
                        if (value < 30)  return (0);    // no item with probability 0.3
                        if (value < 60)  return (1);    // bomb item with probability 0.3
                        if (value < 90)  return (2);    // fire item with probability 0.3
                        return (3);                     // detonator item with probability 0.1
                    ]]>
                </Body>
            </GlobalFunction>
        </Globals>
        <!-- ================================================================================
        EntityTypes
        ================================================================================= -->
        <EntityTypes>
            <!-- ================================================================================
            ActionEventTypes
            ================================================================================= -->
            <ActionEventType name="MoveBomberman">
                <Attribute type="Integer" name="x"/>
                <Attribute type="Integer" name="y"/>
                <Attribute type="Integer" name="bombermanId"/>
            </ActionEventType>
            <CausedEventType name="BombermanHasMoved">
                <Attribute type="Integer" name="bombermanId"/>
            </CausedEventType>
            <ActionEventType name="PlantBomb">
                <Attribute type="Integer" name="bombermanId" />
            </ActionEventType>
            <ActionEventType name="DetonateBombs">
                <Attribute type="Integer" name="bombermanId"/>
            </ActionEventType>
            <CausedEventType name="ExplodeBomb">
                <Attribute type="Integer" name="x"/>
                <Attribute type="Integer" name="y"/>
                <Attribute type="Integer" name="range"/>
                <Attribute type="Integer" name="bombermanId"/>
                <Attribute type="Integer" name="bombId"/>
            </CausedEventType>
            <CausedEventType name="DestroyBlock">
                <Attribute type="Integer" name="blockId"/>
            </CausedEventType>
            <CausedEventType name="DestroyBomb">
                <Attribute type="Integer" name="bombId"/>
                <Attribute type="Integer" name="bombermanId"/>
            </CausedEventType>
            <CausedEventType name="DestroyItem">
                <Attribute type="Integer" name="itemId"/>
            </CausedEventType>
            <CausedEventType name="GotItem"/>
            <CausedEventType name="BombermanDies">
                <Attribute type="Integer" name="bombermanId"/>
            </CausedEventType>
            <CausedEventType name="ResetGame"/>
            <CausedEventType name="ResetGame2"/>
            <CausedEventType name="ResetGame3"/>
            <CausedEventType name="GameWin"/>
            <CausedEventType name="GameLoose"/>
            <CausedEventType name="CreateItem">
                <Attribute type="Integer" name="x"/>
                <Attribute type="Integer" name="y"/>
                <Attribute type="Integer" name="item"/>
            </CausedEventType>
                
            <!-- ================================================================================
            Bomberman
            ================================================================================= -->
            <PhysicalAgentType name="Bomberman">
                <EnumerationProperty name="movingDirection" type="Direction"/>
                <Attribute type="Integer" name="bombRange" initialValue="1"/>
                <Attribute type="Integer" name="numberOfBombs" initialValue="1"/>
                <Attribute type="Boolean" name="detonator" initialValue="false"/>
                <Attribute type="Integer" name="nextX" initialValue="0"/>
                <Attribute type="Integer" name="nextY" initialValue="0"/>
                <Attribute type="Boolean" name="nextDetonate" initialValue="false"/>
                <Attribute type="Boolean" name="plantBomb" initialValue="false"/>
                <Attribute type="Integer" name="nextDirection"/>
                <Function name="calcNextMove" resultType="Integer">
          <documentation>
            <dc:description> Function calculates the direction of the Bomberman (only for animation)
            </dc:description>
          </documentation>
                    <Body language="JavaScript">
                        <![CDATA[
                            __Global.mainAi(this);
                            
                            if (this.getNextX() < 0) this.setNextDirection(__Direction.LEFT);
                            if (this.getNextX() > 0) this.setNextDirection(__Direction.RIGHT);
                            if (this.getNextY() < 0) this.setNextDirection(__Direction.DOWN);
                            if (this.getNextY() > 0) this.setNextDirection(__Direction.UP);
                            
                            if (this.getNextX() !== 0 || this.getNextY() !== 0)
                                return true;
                            else
                                return false;
                        ]]>
                    </Body>
                </Function>
                <ReactionRule name="Move_ReactionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ReactionRule moves the computer controlled Bomberman
            </dc:description>
          </documentation>
                    <ON-EACH-SIMULATION-STEP/>
                    <IF language="JavaScript">
                        <![CDATA[
                            __Simulator.getCurrentSimulationStep() % 10 === 0 && this.bomberman.calcNextMove()
                        ]]>
                    </IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="movingDirection">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getNextDirection()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="MoveBomberman">
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getNextX()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getNextY()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
                <ReactionRule name="Detonator_ReactionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ReactionRule scedules the DetonateBombs Event
            </dc:description>
          </documentation>
                    <ON-EACH-SIMULATION-STEP/>
                    <IF language="JavaScript">
                        <![CDATA[
                            __Simulator.getCurrentSimulationStep() % 10 === 0 && this.bomberman.isNextDetonate()
                        ]]>
                    </IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="DetonateBombs">
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
                <ReactionRule name="PlantBomb_ReactionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ReactionRule scedules the PlantBomb Event
            </dc:description>
          </documentation>
                    <ON-EACH-SIMULATION-STEP/>
                    <IF language="JavaScript">
                        <![CDATA[
                            __Simulator.getCurrentSimulationStep() % 10 === 0 && this.bomberman.isPlantBomb()
                        ]]>
                    </IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="numberOfBombs">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getNumberOfBombs()-1
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="PlantBomb">
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
                <!-- move left -->
                <ActionRule name="MoveLeft_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to move the Bomberman in Direction LEFT (only for animation) and scedules the moveBomberman Event
            </dc:description>
          </documentation>  
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="movingDirection" value="__Direction.LEFT" />
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="MoveBomberman">
                                <Slot property="x" value="-1" />
                                <Slot property="y" value="0" />
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                        this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ActionRule>
                <!-- move up -->
                <ActionRule name="MoveUp_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to move the Bomberman in Direction UP (only for animation) and scedules the moveBomberman Event
            </dc:description>
          </documentation>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="movingDirection" value="__Direction.UP" />
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="MoveBomberman">
                                <Slot property="x" value="0" />
                                <Slot property="y" value="1" />
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                        this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ActionRule>
                <!-- move right -->
                <ActionRule name="MoveRight_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to move the Bomberman in Direction RIGHT (only for animation) and scedules the moveBomberman Event
            </dc:description>
          </documentation>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="movingDirection" value="__Direction.RIGHT" />
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="MoveBomberman">
                                <Slot property="x" value="1" />
                                <Slot property="y" value="0" />
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                        this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ActionRule>
                <!-- move down -->
                <ActionRule name="MoveDown_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to move the Bomberman in Direction DOWN (only for animation) and scedules the moveBomberman Event
            </dc:description>
          </documentation>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="movingDirection" value="__Direction.DOWN" />
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="MoveBomberman">
                                <Slot property="x" value="0" />
                                <Slot property="y" value="-1" />
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                        this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                     </DO>
                </ActionRule>
                <!-- plant a bomb -->
                <ActionRule name="PlantBomb_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to schedule the PlantBomb Event to plant the Bomb of the player
            </dc:description>
          </documentation>
                    <IF language="JavaScript">
                        <![CDATA[
                            this.bomberman.getNumberOfBombs() > 0
                        ]]>
                    </IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="numberOfBombs">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getNumberOfBombs()-1
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="PlantBomb">
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ActionRule>
                <ActionRule name="Detonator_ActionRule" agentVariable="bomberman">
          <documentation>
            <dc:description> ActionRule to schedule the DetonateBombs Event to detonate all planted bombs
            </dc:description>
          </documentation>
                    <IF language="JavaScript">
                        <![CDATA[
                            this.bomberman.isDetonator()
                        ]]>
                    </IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <ActionEventExpr actionEventType="DetonateBombs">
                                <Slot property="bombermanId">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomberman.getId()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </ActionEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ActionRule>
            </PhysicalAgentType>
            <!-- ================================================================================
            Bomb
            ================================================================================= -->
            <PhysicalObjectType name="Bomb">
                <Attribute type="Integer" name="bombermanId" />
                <Attribute type="Integer" name="range" />
                <Attribute type="Integer" name="timer" initialValue="80" />
                <Attribute type="Integer" name="bombState"/>
                <Attribute type="Boolean" name="remoteControlled"/>
                <Attribute type="Boolean" name="bombMustDetonate" initialValue="false"/>
            </PhysicalObjectType>
            <!-- ================================================================================
            SolidBlock
            ================================================================================= -->
            <PhysicalObjectType name="SolidBlock" />
            <!-- ================================================================================
            DestroyableBlock
            ================================================================================= -->
            <PhysicalObjectType name="DestroyableBlock">
                <Attribute type="Integer" name="item"/>
            </PhysicalObjectType>
            <!-- ================================================================================
            Item
            ================================================================================= -->
            <PhysicalObjectType name="Item">
                <Attribute type="Integer" name="kind"/>
            </PhysicalObjectType>
            <PhysicalObjectType name="ExplodingBombCentral">
                <Attribute type="Integer" name="state" initialValue="4"/>
            </PhysicalObjectType>
            <PhysicalObjectType name="BurningBrick">
                <Attribute type="Integer" name="item" initialValue="0"/>
                <Attribute type="Integer" name="state" initialValue="5"/>
            </PhysicalObjectType>
        </EntityTypes>
        <!-- ================================================================================
        Environment Rules
        ================================================================================= -->
        <EnvironmentRules>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="MoveBomberman_Rule">
        <documentation>
          <dc:description> Rule reacts on moveEvent of every bomberman. Checks also if move is possible.
          </dc:description>
        </documentation>
                <WHEN eventType="MoveBomberman" eventVariable="moveEvent"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.moveEvent.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                            !__Global.isBlockOnCoordinates(this.bomberman.getX()+this.moveEvent.getX(),this.bomberman.getY()+this.moveEvent.getY())
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomberman">
                            <Slot property="x">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getX() + this.moveEvent.getX()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="y">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getY() + this.moveEvent.getY()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UpdateObject>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="BombermanHasMoved">
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="PlantBomb_Rule">
        <documentation>
          <dc:description>Rule reacts on planEvent and places the bomb in the __Global.GameMap and creates an
            object of type Bomb
          </dc:description>
        </documentation>
                <WHEN eventType="PlantBomb" eventVariable="plantEvent"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.plantEvent.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                        __Global.getGameMap()[__Global.getGameMap().length-this.bomberman.getY()][this.bomberman.getX()-1] !== __CellContent.BOMB 
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                             <![CDATA[
                                 __Global.setMapCell(this.bomberman.getX(), this.bomberman.getY(), __CellContent.BOMB)
                             ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <UpdateGlobalVariable name="BombermanGameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setBombermanMapCell(this.bomberman.getX(), this.bomberman.getY(), -2, this.bomberman.getBombRange())
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <Create>
                             <PhysicalObject type="Bomb">
                                 <Slot property="x">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             this.bomberman.getX()
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                                 <Slot property="y">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             this.bomberman.getY()
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                                 <Slot property="range">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             this.bomberman.getBombRange()
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                                 <Slot property="bombermanId">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             this.bomberman.getId()
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                                 <Slot property="remoteControlled">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             this.bomberman.isDetonator()
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                                 <Slot property="bombState">
                                     <ValueExpr language="JavaScript">
                                         <![CDATA[
                                             __Global.getInitialBombState(this.bomberman.isDetonator())
                                         ]]>
                                     </ValueExpr>
                                 </Slot>
                             </PhysicalObject>
                         </Create>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="BombState_Rule">
        <documentation>
          <dc:description>Rule has only visualisation purposes. Bomb is pumping up and down -> image toggle 
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP />
                <FOR-ObjectVariable objectType="Bomb" variable="bomb" />
                <IF language="JavaScript">
                    <![CDATA[
                        __Simulator.getCurrentSimulationStep() % 5 === 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomb">
                            <Slot property="bombState">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        __Global.getNextBombState(this.bomb.getBombState())
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UpdateObject>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ItemToggle_Rule">
        <documentation>
          <dc:description> Rule to toggle the item pictures. Depents on the itemstate.
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP />
                <FOR-ObjectVariable objectType="Item" variable="item" />
                <IF language="JavaScript">
                    <![CDATA[
                        __Simulator.getCurrentSimulationStep() % 5 === 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="item">
                            <Slot property="kind">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        __Global.toggleItem(this.item.getKind())
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </UpdateObject>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="DecreaseBombTimers_Rule">
        <documentation>
          <dc:description>Rule is executed in every simulation step and decreases the bomb timer of all bombs
            by 1 exactly till 0
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP/>
                <FOR-ObjectVariable objectType="Bomb" variable="bomb">
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            !this.bomb.isRemoteControlled() && !this.bomb.isBombMustDetonate()
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                        this.bomb.getTimer() > 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomb">
                            <Decrement property="timer" value="1" />
                        </UpdateObject>
                    </UPDATE-ENV>
                </THEN>
                <ELSE>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomb">
                            <Slot property="bombMustDetonate" value="true"/>
                        </UpdateObject>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="ExplodeBomb">
                            <Slot property="x">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getX()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="y">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getY()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="range">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getRange()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getBombermanId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                        <CausedEventExpr eventType="DestroyBomb">
                            <Slot property="bombId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getBombermanId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </ELSE>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="DetonateBombs_Rule">
        <documentation>
          <dc:description> Rule to detonate bombs (schedule destroyBomb Event) of given bomberman
          </dc:description>
        </documentation>
                <WHEN eventType="DetonateBombs" eventVariable="detBo"/>
                <FOR-ObjectVariable variable="bomb" objectType="Bomb" >
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.bomb.getBombermanId() === this.detBo.getBombermanId() && this.bomb.isRemoteControlled()
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <FOR-ObjectVariable variable="bomberman" objectType="Bomberman">
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.detBo.getBombermanId() === this.bomberman.getId()
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyBomb">
                            <Slot property="bombId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getBombermanId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                        <CausedEventExpr eventType="ExplodeBomb">
                            <Slot property="x">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getX()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="y">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getY()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="range">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getRange()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getBombermanId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckIfBombermanGetsKilled_Rule">
        <documentation>
          <dc:description> Rule checks if a Bomberman gets killed by the bomb
          </dc:description>
        </documentation>
                <WHEN eventType="ExplodeBomb" eventVariable="exBo"/>
                <FOR-ObjectVariable variable="bomberman" objectType="Bomberman" >
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            (this.bomberman.getX() === this.exBo.getX() && this.bomberman.getY() === this.exBo.getY()) ||
                            __Global.checkIfBombermanInRange(this.bomberman.getX(), this.bomberman.getY(), this.exBo.getX(), this.exBo.getY(), this.exBo.getRange())  
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="BombermanDies">
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckIfBlockGetsDestroyed_Rule">
        <documentation>
          <dc:description> Rule checks if a block gets destroyed by the bomb
          </dc:description>
        </documentation>
                <WHEN eventType="ExplodeBomb" eventVariable="exBo"/>
                <FOR-ObjectVariable variable="dB" objectType="DestroyableBlock" >
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            __Global.couldBlockBeDestroyed(this.dB.getX(), this.dB.getY(), this.exBo.getX(), this.exBo.getY(), this.exBo.getRange(), this.exBo.getBombId())  
                        ]]>
                        </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyBlock">
                            <Slot property="blockId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.dB.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckIfItemGetsDestroyed_Rule">
        <documentation>
          <dc:description> Rule checks if an item gets destroyed by the bomb.
          </dc:description>
        </documentation>
                <WHEN eventType="ExplodeBomb" eventVariable="exBo"/>
                <FOR-ObjectVariable variable="item" objectType="Item" >
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            __Global.couldBlockBeDestroyed(this.item.getX(), this.item.getY(), this.exBo.getX(), this.exBo.getY(), this.exBo.getRange(), this.exBo.getBombId())  
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyItem">
                            <Slot property="itemId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.item.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckIfBombGetsDestroyed_Rule">      
        <documentation>
          <dc:description> Rule checks if a bomb is in range of the other bomb and sets the timer to 0 (explosion)
          </dc:description>
        </documentation>
                <WHEN eventType="ExplodeBomb" eventVariable="exBo"/>
                <FOR-ObjectVariable variable="bomb" objectType="Bomb" >
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.bomb.getId() !== this.exBo.getBombId() && 
                            __Global.couldBlockBeDestroyed(this.bomb.getX(), this.bomb.getY(), this.exBo.getX(), this.exBo.getY(), this.exBo.getRange(), this.exBo.getBombId())  
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomb">
                            <Slot property="timer" value="0" />
                            <Slot property="remoteControlled" value="false"/>
                        </UpdateObject>
                    </UPDATE-ENV>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckBombermanFoundBombItem_Rule">      
        <documentation>
          <dc:description> Rule checks if the bomberman collects a bombitem.
          </dc:description>
        </documentation>
                <WHEN eventType="BombermanHasMoved" eventVariable="moveEvent"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.moveEvent.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <FOR-ObjectVariable objectType="Item" variable="item">
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.item.getX() === this.bomberman.getX() && this.item.getY() === this.bomberman.getY() && (this.item.getKind() === __Items.BOMB || this.item.getKind() === __Items.BOMB_TOGGLE)
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomberman">
                            <Increment property="numberOfBombs" value="1" />
                        </UpdateObject>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyItem">
                            <Slot property="itemId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.item.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                        <CausedEventExpr eventType="GotItem"/>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckBombermanFoundFireItem_Rule">
        <documentation>
          <dc:description> Rule checks if the bomberman collects a fireitem.
          </dc:description>
        </documentation>
                <WHEN eventType="BombermanHasMoved" eventVariable="moveEvent"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.moveEvent.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <FOR-ObjectVariable objectType="Item" variable="item">
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.item.getX() === this.bomberman.getX() && this.item.getY() === this.bomberman.getY() && (this.item.getKind() === __Items.FIRE || this.item.getKind() === __Items.FIRE_TOGGLE)
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomberman">
                            <Increment property="bombRange" value="1" />
                        </UpdateObject>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyItem">
                            <Slot property="itemId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.item.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                        <CausedEventExpr eventType="GotItem"/>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CheckBombermanFoundDetonatorItem_Rule">
        <documentation>
          <dc:description> Rule checks if the bomberman collects a detonatoritem.
          </dc:description>
        </documentation>
                <WHEN eventType="BombermanHasMoved" eventVariable="moveEvent"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.moveEvent.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <FOR-ObjectVariable objectType="Item" variable="item">
                    <SelectionCondition language="JavaScript">
                        <![CDATA[
                            this.item.getX() === this.bomberman.getX() && this.item.getY() === this.bomberman.getY() && (this.item.getKind() === __Items.DETONATOR || this.item.getKind() === __Items.DETONATOR_TOGGLE)
                        ]]>
                    </SelectionCondition>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomberman">
                            <Slot property="detonator" value="true" />
                        </UpdateObject>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyItem">
                            <Slot property="itemId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.item.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                        <CausedEventExpr eventType="GotItem"/>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="DestroyBlock_Rule">
        <documentation>
          <dc:description>Destroys the given block and also creates an item.
          </dc:description>
        </documentation>
                <WHEN eventType="DestroyBlock" eventVariable="desBo"/>
                <FOR-ObjectVariable objectType="DestroyableBlock" variable="dB">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.desBo.getBlockId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                        !__Global.isGameReset()
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <Create>
                            <PhysicalObject type="BurningBrick">
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.dB.getX()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.dB.getY()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="item">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.dB.getItem()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </PhysicalObject>
                        </Create>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setMapCell(this.dB.getX(), this.dB.getY(), __CellContent.NONE)
                                    ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <UpdateGlobalVariable name="BombermanGameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setBombermanMapCell(this.dB.getX(), this.dB.getY(), 0, 0)
                                    ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <DestroyObject objectVariable="dB" />
                    </UPDATE-ENV>
                </THEN>
                <ELSE>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="dB" />
                    </UPDATE-ENV>
                </ELSE>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="DestroyBomb_Rule">
        <documentation>
          <dc:description>Destroys the given bomb.
            Also the animation for the explosion is created, but only if the game will not be
            restartet.
          </dc:description>
        </documentation>
                <WHEN eventType="DestroyBomb" eventVariable="desBo"/>
                <FOR-ObjectVariable objectType="Bomb" variable="bomb">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.desBo.getBombId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                        __Global.isGameReset()
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="bomb" />
                    </UPDATE-ENV>
                </THEN>
                <ELSE>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setMapCell(this.bomb.getX(), this.bomb.getY(), __CellContent.NONE)
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <UpdateGlobalVariable name="BombermanGameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setBombermanMapCell(this.bomb.getX(), this.bomb.getY(), 0, this.bomb.getRange())
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <Create>
                            <PhysicalObject type="ExplodingBombCentral">
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomb.getX()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            this.bomb.getY()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </PhysicalObject>
                        </Create>
                        <DestroyObject objectVariable="bomb" />
                    </UPDATE-ENV>
                </ELSE>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="IncreaseBombNumberOfBombs_Rule">
        <documentation>
          <dc:description>Increases the number of bombs for the corresponding bomberman.
          </dc:description>
        </documentation>
                <WHEN eventType="DestroyBomb" eventVariable="desBo"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.desBo.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="bomberman">
                            <Increment property="numberOfBombs" value="1"/>
                        </UpdateObject>
                    </UPDATE-ENV>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="DestroyItem_Rule">
        <documentation>
          <dc:description>Destroys the item and actualize the map.
          </dc:description>
        </documentation>
                <WHEN eventType="DestroyItem" eventVariable="desIt"/>
                <FOR-ObjectVariable objectType="Item" variable="item">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.desIt.getItemId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <DO>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                  __Global.setMapCell(this.item.getX(), this.item.getY(), __CellContent.NONE)
                                    ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <DestroyObject objectVariable="item" />
                    </UPDATE-ENV>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="KillBomberman_Rule">
        <documentation>
          <dc:description>Kills the bomberman.
          </dc:description>
        </documentation>
                <WHEN eventType="BombermanDies" eventVariable="event"/>
                <FOR-ObjectVariable objectType="Bomberman" variable="bomberman">
                    <ObjectIdRef language="JavaScript">
                        <![CDATA[
                            this.event.getBombermanId()
                        ]]>
                    </ObjectIdRef>
                </FOR-ObjectVariable>
                <IF language="JavaScript">
                    <![CDATA[
                        this.getEnvironmentSimulator().getObjectsByType("Bomberman").size() <= 2 && !__Global.isGameReset()
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="gameReset" value="true" />
                        <DestroyObject objectVariable="bomberman" />
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="ResetGame" delay="1"/>
                        <CausedEventExpr eventType="ResetGame2" delay="20"/>
                        <CausedEventExpr eventType="ResetGame3" delay="60"/>
                    </SCHEDULE-EVT>
                </THEN>
                <ELSE>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="bomberman" />
                    </UPDATE-ENV>
                </ELSE>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ResetGame_Rule">
        <documentation>
          <dc:description>Reset the game by destroying all bombs.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame"/>
                <FOR-ObjectVariable variable="bomb" objectType="Bomb" />
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyBomb"><!-- definitly-->
                            <Slot property="bombId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomb.getBombermanId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ResetGame2_Rule">
        <documentation>
          <dc:description>Reset the game by destroying all items.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame"/>
                <FOR-ObjectVariable variable="item" objectType="Item" />
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyItem">
                            <Slot property="itemId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.item.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ResetGame3_Rule">
        <documentation>
          <dc:description>Reset the game by destroying all destroyable blocks.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame"/>
                <FOR-ObjectVariable variable="desBo" objectType="DestroyableBlock" />
                <DO>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="DestroyBlock">
                            <Slot property="blockId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.desBo.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ResetGame4_Rule">
        <documentation>
          <dc:description>Last bomberman gets killed and his global win stats get updated.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame"/>
                <FOR-ObjectVariable variable="bomberman" objectType="Bomberman" />
                <DO>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="bombermanWins">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.updateWins(this.bomberman.getId()) 
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="BombermanDies">
                            <Slot property="bombermanId">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.bomberman.getId()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <EnvironmentRule name="ResetGame5_Rule">
              <documentation>
          <dc:description>Winning Sound if player wins.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame2"/>
                <IF language="JavaScript">
                    <![CDATA[
                        __Global.getWinsBomberman1() >= 5
                    ]]>
                </IF>
                <THEN>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="GameWin"/>
                        <CausedEventExpr eventType="StopSimulation" />
                    </SCHEDULE-EVT>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="ResetGame6_Rule">
        <documentation>
          <dc:description>If anyone wins 5 rounds the game/simulation stops.
          Otherwise all obstacles and players are reseted and a new round begins.
          </dc:description>
        </documentation>
                <WHEN eventType="ResetGame3" />
                <IF language="JavaScript">
                    <![CDATA[
                        __Global.getWinsBomberman1() >= 5 ||
                        __Global.getWinsBomberman2() >= 5 ||
                        __Global.getWinsBomberman3() >= 5 ||
                        __Global.getWinsBomberman4() >= 5 ||
                        __Global.getWinsBomberman5() >= 5
                    ]]>
                </IF>
                <THEN>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="GameLoose"/>
                        <CausedEventExpr eventType="StopSimulation" />
                    </SCHEDULE-EVT>
                </THEN>
                <ELSE>
                    <UPDATE-ENV>
                        <UpdateGlobalVariable name="gameReset" value="false"/>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.convert()                   
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <UpdateGlobalVariable name="BombermanGameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.getTempGameMap()
                                ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                        <UpdateGlobalVariable name="destroyableBlockListIndex" value="0"/>
                        <UpdateGlobalVariable name="bombermanListIndex" value="0"/>
                        <UpdateGlobalVariable name="bombermanNameIndex" value="0"/>
                        <Create>
                            <PhysicalAgents type="Bomberman" rangeStartID="1" rangeEndID="5">
                                <Slot property="name">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.bombermanColorName()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.getNextEntryOfList(__CellContent.BOMBERMAN)
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.getNextEntryOfList(__CellContent.BOMBERMAN)
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="movingDirection" value="__Direction.DOWN" />
                            </PhysicalAgents>
                            <PhysicalObjects type="DestroyableBlock" rangeStartID="2000">
                                <RangeEndID language="JavaScript">
                                    <![CDATA[
                                        2000 + __Global.destroyableBlockList.length
                                    ]]>
                                </RangeEndID>
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.getNextEntryOfList(__CellContent.DESTROYABLE)
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.getNextEntryOfList(__CellContent.DESTROYABLE)
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="item">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                            __Global.calcRandomItem()
                                        ]]>
                                    </ValueExpr>
                                </Slot>
                            </PhysicalObjects>
                        </Create>
                    </UPDATE-ENV>
                </ELSE>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="AnimateExplosionCentral_Rule">
        <documentation>
          <dc:description>Changes the state of the central explosion and also destroys the object if animation
            ends.
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP/>
                <FOR-ObjectVariable objectType="ExplodingBombCentral" variable="explosion" />
                <IF language="JavaScript">
                    <![CDATA[
                        __Simulator.getCurrentSimulationStep() % 2 === 0 && this.explosion.getState() > 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="explosion">
                            <Decrement property="state" value="1"/>
                        </UpdateObject>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <EnvironmentRule name="DestroyExplosionCentral_Rule">
              <documentation>
          <dc:description>Animation for bombexplosion.
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP/>
                <FOR-ObjectVariable objectType="ExplodingBombCentral" variable="explosion" />
                <IF language="JavaScript">
                    <![CDATA[
                        this.explosion.getState() <= 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="explosion"/>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="AnimateBurningBrick_Rule">
        <documentation>
          <dc:description>Changes the state of the brick destruction and also destroys the object if animation
            ends.
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP/>
                <FOR-ObjectVariable objectType="BurningBrick" variable="brick" />
                <IF language="JavaScript">
                    <![CDATA[
                        __Simulator.getCurrentSimulationStep() % 2 === 0 && this.brick.getState() > 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <UpdateObject objectVariable="brick">
                            <Decrement property="state" value="1"/>
                        </UpdateObject>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <EnvironmentRule name="DestroyBurningBrick_Rule">
              <documentation>
          <dc:description>Burns the destroyable block down.
          </dc:description>
        </documentation>
                <ON-EACH-SIMULATION-STEP/>
                <FOR-ObjectVariable objectType="BurningBrick" variable="brick" />
                <IF language="JavaScript">
                    <![CDATA[
                        this.brick.getState() <= 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="brick"/>
                    </UPDATE-ENV>
                    <SCHEDULE-EVT>
                        <CausedEventExpr eventType="CreateItem">
                            <Slot property="x">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.brick.getX()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="y">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.brick.getY()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                            <Slot property="item">
                                <ValueExpr language="JavaScript">
                                    <![CDATA[
                                        this.brick.getItem()
                                    ]]>
                                </ValueExpr>
                            </Slot>
                        </CausedEventExpr>
                    </SCHEDULE-EVT>
                </THEN>
            </EnvironmentRule>
            <!-- ================================================================================
            
            ================================================================================= -->
            <EnvironmentRule name="CreateItem_Rule">
        <documentation>
          <dc:description>Creates an item if one should.
          </dc:description>
        </documentation>
                <WHEN eventType="CreateItem" eventVariable="event"/>
                <IF language="JavaScript">
                    <![CDATA[
                        this.event.getItem() > 0
                    ]]>
                </IF>
                <THEN>
                    <UPDATE-ENV>
                        <Create>
                            <PhysicalObject type="Item">
                                <Slot property="x">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                                this.event.getX()
                                            ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="y">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                                this.event.getY()
                                            ]]>
                                    </ValueExpr>
                                </Slot>
                                <Slot property="kind">
                                    <ValueExpr language="JavaScript">
                                        <![CDATA[
                                                __Global.convertToItem(this.event.getItem())
                                            ]]>
                                    </ValueExpr>
                                </Slot>
                            </PhysicalObject>
                        </Create>
                        <UpdateGlobalVariable name="GameMap">
                            <ValueExpr language="JavaScript">
                                <![CDATA[
                                    __Global.setMapCell(this.event.getX(), this.event.getY(), __CellContent.ITEM)
                                    ]]>
                            </ValueExpr>
                        </UpdateGlobalVariable>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
        </EnvironmentRules>
    </SimulationModel>
    
    <InitialState>
        <GlobalVariable name="GameMap">
            <ValueExpr language="JavaScript">
                <![CDATA[
                      __Global.convert()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="BombermanGameMap">
            <ValueExpr language="JavaScript">
                <![CDATA[
                      __Global.getTempGameMap()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="solidBlockList">
            <ValueExpr language="JavaScript">
                <![CDATA[
                    new Array()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="destroyableBlockList">
            <ValueExpr language="JavaScript">
                <![CDATA[
                    new Array()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="bombermanList">
            <ValueExpr language="JavaScript">
                <![CDATA[
                    new Array()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="MapWidth">
            <ValueExpr language="JavaScript">
                <![CDATA[
                    __Global.getTempGameMap()[0].length + __Global.createLists()
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="MapHeight">
            <ValueExpr language="JavaScript">
                <![CDATA[
                   __Global.getTempGameMap().length
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <GlobalVariable name="bombermanWins">
            <ValueExpr language="JavaScript">
                <![CDATA[
                    new Array(0,0,0,0,0)
                ]]>
            </ValueExpr>
        </GlobalVariable>
        <!-- Bomberman agent -->
        
        <PhysicalAgents type="Bomberman" rangeStartID="1" rangeEndID="5">
            <Slot property="name">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.bombermanColorName()
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="x">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.BOMBERMAN)
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="y">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.BOMBERMAN)
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="movingDirection" value="__Direction.DOWN" />
        </PhysicalAgents>
        
        <PhysicalObjects type="SolidBlock" rangeStartID="1000" >
            <RangeEndID language="JavaScript">
                <![CDATA[
                    1000 + __Global.solidBlockList.length
                ]]>
            </RangeEndID>
            <Slot property="x">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.SOLID)
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="y">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.SOLID)
                    ]]>
                </ValueExpr>
            </Slot>
        </PhysicalObjects>
        
        <PhysicalObjects type="DestroyableBlock" rangeStartID="2000">
            <RangeEndID language="JavaScript">
                <![CDATA[
                    2000 + __Global.destroyableBlockList.length
                ]]>
            </RangeEndID>
            <Slot property="x">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.DESTROYABLE)
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="y">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.getNextEntryOfList(__CellContent.DESTROYABLE)
                    ]]>
                </ValueExpr>
            </Slot>
            <Slot property="item">
                <ValueExpr language="JavaScript">
                    <![CDATA[
                        __Global.calcRandomItem()
                    ]]>
                </ValueExpr>
            </Slot>
        </PhysicalObjects>
    </InitialState>
    <UserInterface supportedLanguages="en">
        <AnimationUI showZoomControlPanel="false">
            <aors:StartPageText xmlns="http://www.w3.org/1999/xhtml">
                <aors:HtmlText>
                    <div style="float:left; width: 40%; padding: 7% 50px; text-align: center;">
                        <img src="media/screenshot.png" />
                    </div>
                    <div style="float:left; width: 40%; padding: 7% 0px">
                        <p>You play the role of the <b>BLACK</b> bomberman. Later maybe other!</p>
                        <p>These are the possible actions you can do:</p>
                        <ul>
                            <li>Move the <b>Bomberman</b>: <ul>
                                <li>left: '&#8592;' or '<i>A</i>' keys</li>
                                <li>right: '&#8594;' or '<i>D</i>' keys</li>
                                <li>up: '&#8593;' or '<i>W</i>' keys</li>
                                <li>down: '&#8595;' or '<i>S</i>' keys</li>
                            </ul>
                            </li>
                            <li>Plant a bomb by: <i>SPACEBAR</i></li>
                            <li>Use the detonator: <i>X</i></li>
                            <li>Kill all other <i>Bomberman</i> to win a round. Win 5 times to win the game!</li>
                            <li>Avoid getting hit by a <i>Bomb</i> and don't forget to collect items!</li>
                        </ul>
                    </div>
                </aors:HtmlText>
            </aors:StartPageText>
            <Views>
                <SpaceView canvasColor="grey">
                    <TwoDimensionalGridSpaceView2D backgroundColor="black">
                        <GridCellPropertyVisualizationMap a0="NONE" cellViewProperty="texture" mapType="enumerationMap" property="cellRole" v0="grasBlock.jpg" />
                    </TwoDimensionalGridSpaceView2D>
                </SpaceView>
                <PhysicalObjectView physicalObjectIdRef="1">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap a0="LEFT" a1="UP" a2="RIGHT" a3="DOWN" shapeProperty="texture" property="movingDirection" mapType="enumerationMap" v0="blackLeft.png" v1="blackBack.png" v2="blackRight.png" v3="blackFront.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectIdRef="2">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap a0="LEFT" a1="UP" a2="RIGHT" a3="DOWN" shapeProperty="texture" property="movingDirection" mapType="enumerationMap" v0="whiteLeft.png" v1="whiteBack.png" v2="whiteRight.png" v3="whiteFront.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectIdRef="3">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap a0="LEFT" a1="UP" a2="RIGHT" a3="DOWN" shapeProperty="texture" property="movingDirection" mapType="enumerationMap" v0="redLeft.png" v1="redBack.png" v2="redRight.png" v3="redFront.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectIdRef="4">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap a0="LEFT" a1="UP" a2="RIGHT" a3="DOWN" shapeProperty="texture" property="movingDirection" mapType="enumerationMap" v0="blueLeft.png" v1="blueBack.png" v2="blueRight.png" v3="blueFront.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectIdRef="5">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap a0="LEFT" a1="UP" a2="RIGHT" a3="DOWN" shapeProperty="texture" property="movingDirection" mapType="enumerationMap" v0="greenLeft.png" v1="greenBack.png" v2="greenRight.png" v3="greenFront.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="Bomb">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="bombState" mapType="enumerationMap" a0="TICKING1" a1="TICKING2" a2="TICKING3" v0="bomb1.png" v1="bomb2.png" v2="bomb3.png"/>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="bombState" mapType="enumerationMap" a0="NOTTICKING1" a1="NOTTICKING2" a2="NOTTICKING3" v0="bomb4.png" v1="bomb5.png" v2="bomb6.png"/>
                            <!--<ShapePropertyVisualizationMap shapeProperty="texture" property="range" mapType="equalityCaseWise" a0="1" a1="2" a2="3" a3="4" v0="bomb10.png" v1="bomb12.png" v2="bomb13.png" v3="bomb14.png"/>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="range" mapType="equalityCaseWise" a0="5" a1="6" a2="7" a3="8" v0="bomb15.png"  v1="bomb16.png" v2="bomb17.png" v3="bomb18.png"/>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="range" mapType="equalityCaseWise" a0="9" v0="bomb19.png"/>-->
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="DestroyableBlock">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="x" mapType="caseWise" a0="1000000" v0="destroyableBlock.jpg" />
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="SolidBlock">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="x" mapType="caseWise" a0="1000000" v0="solidBlock.jpg" />
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="Item">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="kind" mapType="enumerationMap" a0="BOMB" a1="FIRE" a2="DETONATOR" v0="bombItem1.png" v1="fireItem1.png" v2="detonatorItem1.png"/>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="kind" mapType="enumerationMap" a0="BOMB_TOGGLE" a1="FIRE_TOGGLE" a2="DETONATOR_TOGGLE" v0="bombItem2.png" v1="fireItem2.png" v2="detonatorItem2.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="ExplodingBombCentral">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="state" mapType="equalityCaseWise" a0="4" a1="3" a2="2" a3="1" v0="burstCentral0.png" v1="burstCentral1.png" v2="burstCentral2.png" v3="burstCentral3.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <PhysicalObjectView physicalObjectType="BurningBrick">
                    <PhysicalShape2D>
                        <Square>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="state" mapType="equalityCaseWise" a0="5" a1="4" a2="3" a3="2" v0="burningBrick0.png" v1="burningBrick1.png" v2="burningBrick2.png" v3="burningBrick3.png"/>
                            <ShapePropertyVisualizationMap shapeProperty="texture" property="state" mapType="equalityCaseWise" a0="1" v0="burningBrick4.png"/>
                        </Square>
                    </PhysicalShape2D>
                </PhysicalObjectView>
                <EventAppearance eventType="DestroyBomb">
                    <Sound soundFile="boom.wav" />
                </EventAppearance>
                <EventAppearance eventType="GotItem">
                    <Sound soundFile="gotItem.wav" />
                </EventAppearance>
                <EventAppearance eventType="GameLoose">
                    <Sound soundFile="loose.wav"/>
                </EventAppearance>
            </Views>
            <AgentControlUI initiallyPlayedAgent="Bomberman">
                <AgentControlByAgentType type="Bomberman" suspendReactionRules="Move_ReactionRule Detonator_ReactionRule PlantBomb_ReactionRule">
                    <LeftOutputPanel width="200px">
                        <OutputFieldGroup label="Reports">
                            <OutputField label="Black  " agentAttribute="id">
                                <Source>
                                    <GlobalVariable name="winsBomberman1"/>
                                </Source>
                            </OutputField>
                            <OutputField label="White " agentAttribute="id">
                                <Source>
                                    <GlobalVariable name="winsBomberman2"/>
                                </Source>
                            </OutputField>
                            <OutputField label="Red    " agentAttribute="id">
                                <Source>
                                    <GlobalVariable name="winsBomberman3"/>
                                </Source>
                            </OutputField>
                            <OutputField label="Blue    " agentAttribute="id">
                                <Source>
                                    <GlobalVariable name="winsBomberman4"/>
                                </Source>
                            </OutputField>
                            <OutputField label="Green " agentAttribute="id">
                                <Source>
                                    <GlobalVariable name="winsBomberman5"/>
                                </Source>
                            </OutputField>
                            <OutputField label="No. of bombs" agentAttribute="numberOfBombs" />
                            <OutputField label="Bombrange" agentAttribute="bombRange" />
                        </OutputFieldGroup>
                    </LeftOutputPanel>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="A" />
                            <KeyboardEventExpr keyIdentifier="Left"/>
                        </WHEN>
                        <EXECUTE actionRule="MoveLeft_ActionRule" />
                    </UserActionEventListener>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="W" />
                            <KeyboardEventExpr keyIdentifier="Up"/>
                        </WHEN>
                        <EXECUTE actionRule="MoveUp_ActionRule" />
                    </UserActionEventListener>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="D" />
                            <KeyboardEventExpr keyIdentifier="Right"/>
                        </WHEN>
                        <EXECUTE actionRule="MoveRight_ActionRule" />
                    </UserActionEventListener>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="S" />
                            <KeyboardEventExpr keyIdentifier="Down"/>
                        </WHEN>
                        <EXECUTE actionRule="MoveDown_ActionRule" />
                    </UserActionEventListener>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="Spacebar"/>
                        </WHEN>
                        <EXECUTE actionRule="PlantBomb_ActionRule" />
                    </UserActionEventListener>
                    <UserActionEventListener>
                        <WHEN>
                            <KeyboardEventExpr keyIdentifier="X"/>
                        </WHEN>
                        <EXECUTE actionRule="Detonator_ActionRule" />
                    </UserActionEventListener>
                </AgentControlByAgentType>
            </AgentControlUI>
        </AnimationUI>
    </UserInterface>
</SimulationScenario>