<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://aor-simulation.org ../../../ext/aorsl/AORSL-0-8-3.xsd"
  xmlns="http://aor-simulation.org" xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:aors="http://aor-simulation.org" version="0.8.3"
  scenarioName="BugsGrowingInGridSpace"
  scenarioTitle="100 bugs move around randomly in a 50x50 grid space, feeding and growing"
  simulationManagerDirectory="../../..">
  <SimulationParameters simulationSteps="200" stepDuration="100" timeUnit="ms" stepTimeDelay="150" randomSeed="100"/>

  <SimulationModel modelName="BugsGrowingInGridSpace" modelTitle="Bugs moving around randomly in a grid space feeding and growing with food represented as a grid cell property">
    <documentation>
      <dc:creator>Gerd Wagner</dc:creator>
      <dc:created>20080801</dc:created>
      <dc:description> Bugs move around randomly in a 100x100 grid space. They feed and grow. Food is represented as a grid cell property. When a bug arrives on a new cell, it eats the available food. </dc:description>
    </documentation>

    <SpaceModel geometry="Toroidal" spatialDistanceUnit="cm">
    	<TwoDimensional xMax="40" yMax="20">
    		<OverlayGrid gridCellHeight="1" gridCellWidth="1" />
    	</TwoDimensional>
    </SpaceModel>
     
    <EntityTypes>
      <ActionEventType name="Move" />
      <ActionEventType name="Eat" />
      <PerceptionEventType name="ArrivalOnNewCell" />
    	
      <!-- =================================================== -->
      <PhysicalAgentType name="Bug">
        <!-- =================================================== -->
        <PeriodicTimeEventType name="GoOn">
          <Periodicity>
          	<DiscreteRandomVariable>
          		<UniformInt lowerBound="1" upperBound="3" />
          	</DiscreteRandomVariable>
          </Periodicity>
        </PeriodicTimeEventType>
      	
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule name="GoOn_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
            <dc:description>When receiving the periodic reminder signal to go on, the bug moves.</dc:description>
          </documentation>
          <WHEN eventType="GoOn"/>
        	<DO>
            <SCHEDULE-EVT>
              <ActionEventExpr actionEventType="Move"/>
            </SCHEDULE-EVT>
        	</DO>
        </ReactionRule>
      	
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule name="ArrivalOnNewCell_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
            <dc:description>When the bug arrives on a new cell, it eats the available food</dc:description>
          </documentation>
          <WHEN eventType="ArrivalOnNewCell"/>
        	<DO>
            <SCHEDULE-EVT>
              <ActionEventExpr actionEventType="Eat"/>
            </SCHEDULE-EVT>
        	</DO>
        </ReactionRule>
      </PhysicalAgentType>
    </EntityTypes>

    <EnvironmentRules>
      <!-- =================================================== -->
      <EnvironmentRule name="Move_Rule">
        <!-- =================================================== -->
        <documentation>
          <dc:description>When a bug performs a move action, its position is updated by adding one of the vectors {-1,0,1} x {-1,0,1} chosen at random using the predefined SpaceModel methods newX/newY. In addition, a perception event that it has arrived at a new cell is created for the bug.</dc:description>
        </documentation>
        <WHEN eventType="Move" eventVariable="e"/>
        <FOR objectVariable="b" objectType="Bug">
          <ObjectRef language="Java">e.getActor()</ObjectRef>
        </FOR>
        <DO>
        <UPDATE-ENV>
          <UpdateObject objectVariable="b">
            <Slot property="x">
              <ValueExpr language="Java">
              	Simulator.spaceModel.newX( b, Random.uniformInt(3)-1)
              </ValueExpr>
            </Slot>
            <Slot property="y">
              <ValueExpr language="Java">
              	Simulator.spaceModel.newY( b, Random.uniformInt(3)-1)
              </ValueExpr>
            </Slot>
          </UpdateObject>
        </UPDATE-ENV>
        <SCHEDULE-EVT>
          <PerceptionEventExpr eventType="ArrivalOnNewCell">
            <PerceiverIdRef language="Java">e.getActorIdRef()</PerceiverIdRef>
          </PerceptionEventExpr>
        </SCHEDULE-EVT>
        </DO>
      </EnvironmentRule>
    	
      <!-- =================================================== -->
      <EnvironmentRule name="Eat_Rule">
        <!-- =================================================== -->
        <documentation>
          <dc:description>When a bug has performed an Eat action, it grows by 1/5 of the food level of its cell and the food level of the cell is decreased to 1/2.</dc:description>
        </documentation>
        <WHEN eventType="Eat" eventVariable="e"/>
        <FOR objectVariable="b" objectType="Bug">
          <ObjectRef language="Java">e.getActor()</ObjectRef>
        </FOR>
        <IF language="Java">
        	Simulator.spaceModel.getGridCell( (int) b.getX(), (int) b.getY()).getFoodLevel() > 0 
        </IF>
        <THEN>
        <UPDATE-ENV>
          <UpdateObject objectVariable="b">
            <Slot property="m">
              <ValueExpr language="Java">
              	b.getM() + Simulator.spaceModel.getGridCell( (int) b.getX(), (int) b.getY()).getFoodLevel() / 5.0 
              </ValueExpr>
            </Slot>
          </UpdateObject>
          <UpdateGridCell gridCellVariable="gridCell">
            <XCoordinate language="Java">(int) b.getX()</XCoordinate>
            <YCoordinate language="Java">(int) b.getY()</YCoordinate>
            <Slot property="foodLevel">
              <ValueExpr language="Java">
              	gridCell.getFoodLevel() - gridCell.getFoodLevel()/2.0
              </ValueExpr>
            </Slot>
          </UpdateGridCell>
        </UPDATE-ENV>
        </THEN>
      </EnvironmentRule>
    </EnvironmentRules>
  </SimulationModel>

  <InitialState>
    <PhysicalAgents type="Bug" rangeStartID="1" rangeEndID="100" hasRandomPosition="true">
      <Slot property="m" value="0"/>
      <PeriodicTimeEvent occurrenceTime="1" type="GoOn" />
    </PhysicalAgents>
    <GridCells>
      <Slot property="foodLevel">
      	<RandomVariable>
      		<Uniform lowerBound="0" upperBound="10" />
      	</RandomVariable>
      </Slot>
    </GridCells>
  </InitialState>

  <Views>
    <SpaceView>
      <Grid>
        <VisualizationMap cellViewProperty="fill" cellProperty="foodLevel" caseWise="true"
          v0="white" a0="1" v1="rgb(128,255,128)" a1="3" v2="rgb(172,255,172)" a2="6"
          v3="rgb(0,255,0)" a3="8" v4="rgb(0,204,0)"/>
      </Grid>
    </SpaceView>

    <View physicalObjectType="Bug" shape2D="circle">
      <ShapeSlot shapeProperty="fill" value="brown"/>
      <VisualizationMap property="m" shapeProperty="r" caseWise="false" a0="0.2" a1="0.008"/>
    </View>
  </Views>
</SimulationScenario>
