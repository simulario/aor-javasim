<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:h="http://www.w3.org/1999/xhtml" 
	version="0.8.4" xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/ERSL/ERSL_0-8-4.xsd" 
	scenarioName="BasicInventoryManagement" 
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="5000" stepDuration="1" timeUnit="D"/>

	<SimulationModel modelName="BasicInventoryManagement" modelTitle="A simple inventory management system with lost sales statistics">

		<documentation>
			<dc:creator>Uwe Herrmann</dc:creator>
			<dc:created>20101107</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:modified>20110318</dc:modified>
			<dc:description>The daily demand (say, for TVs in an electronics shop) is normally distributed, 
				with a mean of 5 units and a standard deviation of 1.8 units. Hint: round off demands to 
				the closest integer during simulation. A replenishment order is placed when the quantity in stock 
				falls below the reorder level. The quantity of a replenishment order is computed as the reorder-up-to-level 
				minus the quantity in stock. Lead time is distributed uniformly between 1 and 3 days. 
				If a demand occurs on a day when the productQuantityInStock level is zero, the sale is lost. 
				The number of lost sales is to be collected and displayed as a percentage.</dc:description>
		</documentation>

		<Statistics>
			<Variable name="totalNumberOfLostSales" dataType="Integer" />
			<Variable name="percentageOfLostSales" dataType="Float">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java">
						(float) SimStatistics.totalNumberOfLostSales.getValue() / SimParameter.SIMULATION_STEPS
					</ValueExpr>
				</Source>
			</Variable>
		</Statistics>
        
		<Globals>
			<GlobalVariable name="productQuantityInStock" dataType="Integer"/>
			<GlobalVariable name="REORDER_LEVEL" dataType="Integer" initialValue="20"/>
			<GlobalVariable name="REORDER_UP_TO_LEVEL" dataType="Integer" initialValue="30"/>
			<GlobalFunction name="randomDailyDemand" resultType="Integer">
				<Body language="Java"><![CDATA[
		int r = Random.uniformInt(0,99);
		if (r<1) return 10; 			
		else if (r<2) return 1;
		else if (r<6) return 2;
		else if (r<14) return 3;
		else if (r<30) return 4;
		else if (r<51) return 5;
		else if (r<72) return 6;
		else if (r<88) return 7;
		else if (r<96) return 8;
		else return 9;
		]]></Body>
			</GlobalFunction>
		</Globals>

		<EntityTypes>
			<ExogenousEventType name="DailyDemand" periodicity="1">
<!--  NEW FEATURE
				<Attribute name="quantity" type="Integer">
					<PeriodicAssignment>
						<RandomVariable><NormalInt mean="5" standardDeviation="1.8"/></RandomVariable>
					</Slot>	
-->
			</ExogenousEventType>
			<CausedEventType name="Delivery">
				<Attribute name="quantity" type="Integer"/>
			</CausedEventType>
		</EntityTypes>

		<EnvironmentRules>
			<EnvironmentRule name="DailyDemand_Rule">
				<documentation>
					<dc:description>On DailyDemand, if the productQuantityInStock is greater than or equal to the demand, 
						the demand is subtracted from the productQuantityInStock. Else if the productQuantityInStock 
						is less than the demand, the productQuantityInStock drops to 0 and we have an increase of lost sales, 
						calculated as demand minus productQuantityInStock. This also works in the case where the productQuantityInStock 
						is already zero at the beginning of the day. If the productQuantityInStock is less than the reorder level, 
						a Delivery event is scheduled with a quantity of reorder-up-to-level minus productQuantityInStock items
						and with a uniformly distributated random delay of 1, 2 or 3 days.</dc:description>
				</documentation>
				<WHEN eventType="DailyDemand"/>
				<FOR dataVariable="demand" dataType="Integer">
					<ValueExpr language="Java"> Random.normalInt( 5, 1.8) </ValueExpr>
				</FOR>
				<IF language="Java"><![CDATA[ Global.productQuantityInStock >= demand ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGlobalVariable name="productQuantityInStock">
							<ValueExpr language="Java"> Global.productQuantityInStock - demand </ValueExpr>
						</UpdateGlobalVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Condition language="Java"><![CDATA[ Global.productQuantityInStock < Global.REORDER_LEVEL	]]></Condition>
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4"/>
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<ValueExpr language="Java"> Global.REORDER_UP_TO_LEVEL - Global.productQuantityInStock </ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</THEN>
				<ELSE>
					<UPDATE-ENV>
						<UpdateStatisticsVariable variable="totalNumberOfLostSales">
							<ValueExpr language="Java">
								SimStatistics.totalNumberOfLostSales.getValue() + demand - Global.productQuantityInStock
							</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateGlobalVariable name="productQuantityInStock" value="0" />
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4"/>
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<GlobalVariableValueExpr variable="REORDER_UP_TO_LEVEL"/>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</ELSE>
			</EnvironmentRule>
			
			<EnvironmentRule name="Delivery_Rule">
				<documentation>
					<dc:description>On Delivery, the number of ordered items gets added to the productQuantityInStock.</dc:description>
				</documentation>
				<WHEN eventType="Delivery" eventVariable="d"/>
				<DO>
					<UPDATE-ENV>
						<UpdateGlobalVariable name="productQuantityInStock">
							<ValueExpr language="Java">Global.productQuantityInStock + d.getQuantity()</ValueExpr>
						</UpdateGlobalVariable>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>			
		</EnvironmentRules>
	</SimulationModel>
	
	<InitialState>
		<GlobalVariable name="productQuantityInStock" value="20"/>
		<ExogenousEvent type="DailyDemand" occurrenceTime="1"/>
	</InitialState>

	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="percentageOfLostSales">
				<Label>
					<Text xml:lang="en">Lost Sales</Text>
					<Text xml:lang="de">Nichtrealisierte Verkäufe</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the percentage of lost sales?</Text>
					<Text xml:lang="de">Wiveiel Prozent nichtrealisierte Verkäufe gab es?</Text>
				</Hint>
				<Format decimalPlaces="1"><Math>%</Math></Format>
			</StatisticsVariableUI>
		</StatisticsUI>
		
	</UserInterface>
</SimulationScenario>