<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:h="http://www.w3.org/1999/xhtml" 
	version="0.9" xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/ERSL/ERSL_0-9.xsd" 
	scenarioName="BasicInventoryManagement" 
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="365" stepDuration="1" timeUnit="D"/>

	<SimulationModel modelName="BasicInventoryManagement" 
			modelTitle="A simple inventory management system with lost sales statistics">
		<documentation>
			<dc:creator>Uwe Herrmann</dc:creator>
			<dc:created>20101107</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:contributor>Oana Nicolae</dc:contributor>
			<dc:modified>20111122</dc:modified>
			<dc:title>Inventory Management</dc:title>
			<dc:title xml:lang="de">Lagerverwaltung</dc:title>
			<shortDescription>
				A simple inventory management system with a replenishment policy based on a reorder level.
			</shortDescription>
			<shortDescription xml:lang="de">
				Ein einfaches Lagerverwaltungssystem mit einem Wiederbeschaffungsverfahren,
				das auf einem Sicherheitsbestand (engl. "reorder level") basiert.
			</shortDescription>
			<description><h:p>The daily demand (say, for TVs in an electronics shop) is normally distributed, 
				with a mean of 5 units and a standard deviation of 1.8 units. A replenishment order is placed 
				when the quantity in stock falls below the reorder level. The order quantity of a replenishment order 
				is computed as the reorder-up-to-level minus the quantity in stock. Lead time is distributed 
				uniformly between 1 and 3 days.	If a demand is greater than the current stock level, 
				the sale is lost.	The number of lost sales is to be computed and displayed as a percentage.</h:p>
				<h:p>The inventory is modeled as an object with three attributes: <h:code>productQuantityInStock</h:code>, 
				<h:code>reorderLevel</h:code> and <h:code>reorderUpToLevel</h:code>. For simplicity, the model
				does not create replenishment orders, but instead it only schedules corresponding future 
				<h:code>Delivery</h:code> events.</h:p>				
			</description>
			<description xml:lang="de"><h:p>Die Tagesnachfrage (z.B. für Fernsehgeräte in einem Geschäft) ist 
				normalverteilt mit einem Mittelwert von 5 und einer Standardabweichung von 1,8. Ein Wiederbeschaffungsauftrag
				wird erteilt, wenn der Lagerbestand unter den Sicherheitsbestand (<h:code>reorderLevel</h:code>) fällt. 
				Die Bestellmenge eines Wiederbeschaffungsauftrags wird als Differenz aus dem Sollbestand 
				(<h:code>reorderUpToLevel</h:code>) und dem	Sicherheitsbestand errechnet. Die Vorlaufzeit für Lieferungen 
				ist uniform verteilt zwischen 1 und 3 Tagen. Wenn eine Nachfrage den Lagerbestand übersteigt, 
				ist der Auftrag verloren. Die Anzahl der verlorenen	Aufträge ist zu ermitteln und als Prozentsatz 
				anzuzeigen.</h:p>
				<h:p>Das Lager wird als Objekt mit drei Attributen modelliert: <h:code>productQuantityInStock</h:code>, 
				<h:code>reorderLevel</h:code> und <h:code>reorderUpToLevel</h:code>. Zur Vereinfachung werden im
				Simulationsmodell keine Wiederbeschaffungsaufträge erzeugt, sondern nur entsprechende zukünftige
				<h:code>Delivery</h:code>-Ereignisse.</h:p>
			</description>
			<CcLicense license="CC BY-SA"/>
			<dc:subject>inventory management</dc:subject>
			<mediaFiles>
				<image file="Inventory_Acik-Fotolia_4302799.jpg" license="© Acik Fotolia.com" author="Acik" />
			</mediaFiles>
			<!--
			<titleImage file="Inventory_Acik-Fotolia_4302799.jpg"/>
			-->
		</documentation>

		<Statistics>
			<Variable name="totalNumberOfLostSales" dataType="Integer" />
			<Variable name="percentageOfLostSales" dataType="Float">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java">
						(float) SimStatistics.totalNumberOfLostSales.getValue() 
						/ SimParameter.SIMULATION_STEPS
					</ValueExpr>
					<ValueExpr language="JavaScript">
						__SimStatistics.totalNumberOfLostSales.getValue() 
						/ __SimParameter.SIMULATION_STEPS
					</ValueExpr>
				</Source>
			</Variable>
			<Variable name="stockLevel" dataType="Integer" />
			<Variable name="dailyDemand" dataType="Integer" />
		</Statistics>

		<EntityTypes>
			<!-- ================================================== -->
			<ExogenousEventType name="DailyDemand" periodicity="1" />
			<!-- ================================================== -->
			<CausedEventType name="Delivery">
			<!-- ============================================== -->
				<Attribute name="quantity" type="Integer" />
			</CausedEventType>
			
			<!-- ================================================== -->
			<ObjectType name="Inventory">
			<!-- ================================================== -->
				<Attribute name="productQuantityInStock" type="Integer" />
				<Attribute name="reorderLevel" type="Integer" />
				<Attribute name="reorderUpToLevel" type="Integer" />
				<Attribute name="waitingForDelivery" type="Boolean" />
			</ObjectType>
		</EntityTypes>

		<EnvironmentRules>
			<!-- =========================================== -->
			<EnvironmentRule name="DailyDemand_Rule1">
			<!-- =========================================== -->
				<documentation>
					<dc:description>On DailyDemand, if the productQuantityInStock is greater than or equal to the demand, 
						the demand is subtracted from the productQuantityInStock. Else if the productQuantityInStock 
						is less than the demand, the productQuantityInStock drops to 0 and we have an increase of lost sales, 
						calculated as demand minus productQuantityInStock. This is also the case when the productQuantityInStock 
						is already zero at the beginning of the day. If the productQuantityInStock is less than the reorder level, 
						and the inventory is not WaitingForDelivery, a new Delivery event is scheduled with a quantity of reorderUpToLevel 
						minus productQuantityInStock items and with a uniformly distributated random delay of 1, 2 or 3 days.
					</dc:description>
				</documentation>
				<WHEN eventType="DailyDemand" />
				<FOR objectVariable="inv" objectType="Inventory" objectIdRef="1" />
				<FOR dataVariable="demand" dataType="Integer">
					<ValueExpr language="Java"> Random.normalInt( 5, 1.8) </ValueExpr>
					<ValueExpr language="JavaScript"> js.util.Random.normalInt( 5, 1.8) </ValueExpr>
				</FOR>
				<FOR dataVariable="waiting" dataType="Boolean">
					<ValueExpr language="Java JavaScript">this.inv.isWaitingForDelivery()</ValueExpr>
				</FOR>
				<IF language="Java JavaScript"><![CDATA[ 
					this.inv.getProductQuantityInStock() < this.demand 
					]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateStatisticsVariable variable="totalNumberOfLostSales">
							<ValueExpr language="Java"><![CDATA[ 
								SimStatistics.totalNumberOfLostSales.getValue() + demand - 
								inv.getProductQuantityInStock()
							]]></ValueExpr>
							<ValueExpr language="JavaScript"><![CDATA[ 
								__SimStatistics.totalNumberOfLostSales.getValue() + this.demand -
								this.inv.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="dailyDemand">
							<ValueExpr language="Java JavaScript">this.demand</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="stockLevel">
							<ValueExpr language="Java JavaScript">this.inv.getProductQuantityInStock()</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateObject objectVariable="inv">
							<Slot property="productQuantityInStock" value="0" />
							<Slot property="waitingForDelivery" value="true" />
						</UpdateObject>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Condition language="Java JavaScript"> this.waiting == false </Condition>
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4" />
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<ValueExpr language="Java JavaScript">this.inv.getReorderUpToLevel()</ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>
			
			<!-- =========================================== -->
			<EnvironmentRule name="DailyDemand_Rule2">
				<!-- =========================================== -->
				<documentation>
					<dc:description>On DailyDemand, if the productQuantityInStock is greater than or equal to the demand, 
						the demand is subtracted from the productQuantityInStock. Else if the productQuantityInStock 
						is less than the demand, the productQuantityInStock drops to 0 and we have an increase of lost sales, 
						calculated as demand minus productQuantityInStock. This is also the case when the productQuantityInStock 
						is already zero at the beginning of the day. If the productQuantityInStock is less than the reorder level, 
						and the inventory is not WaitingForDelivery, a new Delivery event is scheduled with a quantity of reorderUpToLevel 
						minus productQuantityInStock items and with a uniformly distributated random delay of 1, 2 or 3 days.
					</dc:description>
				</documentation>
				<WHEN eventType="DailyDemand" />
				<FOR objectVariable="inv" objectType="Inventory" objectIdRef="1" />
				<FOR dataVariable="demand" dataType="Integer">
					<ValueExpr language="Java"> Random.normalInt( 5, 1.8) </ValueExpr>
					<ValueExpr language="JavaScript"> js.util.Random.normalInt( 5, 1.8) </ValueExpr>
				</FOR>
				<FOR dataVariable="waiting" dataType="Boolean">
					<ValueExpr language="Java JavaScript">this.inv.isWaitingForDelivery()</ValueExpr>
				</FOR>
				<IF language="Java JavaScript"><![CDATA[ 
		     (this.inv.getProductQuantityInStock() - this.demand) >= 0 &&
			 (this.inv.getProductQuantityInStock() - this.demand) < this.inv.getReorderLevel()
			   ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="inv">
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java JavaScript"><![CDATA[ 
			this.inv.getProductQuantityInStock() - this.demand 
							]]></ValueExpr>
							</Slot>
							<Slot property="waitingForDelivery" value="true" />
						</UpdateObject>
						<UpdateStatisticsVariable variable="stockLevel">
							<ValueExpr language="Java JavaScript"> this.inv.getProductQuantityInStock()	</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="dailyDemand">
							<ValueExpr language="Java JavaScript">this.demand</ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Condition language="Java JavaScript"> this.waiting == false </Condition>
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4" />
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<ValueExpr language="Java JavaScript"><![CDATA[ 
									this.inv.getReorderUpToLevel() - this.inv.getProductQuantityInStock() 
								]]></ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>
			<!-- =========================================== -->
			<EnvironmentRule name="Delivery_Rule">
			<!-- =========================================== -->
				<documentation>
					<dc:description>On Delivery, the number of ordered items gets added to the productQuantityInStock.</dc:description>
				</documentation>
				<WHEN eventType="Delivery" eventVariable="d" />
				<FOR objectVariable="inv" objectType="Inventory" objectIdRef="1" /> 
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="inv">
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java JavaScript">this.inv.getProductQuantityInStock() + this.d.getQuantity()</ValueExpr>
							</Slot>
							<Slot property="waitingForDelivery" value="false" />
						</UpdateObject>
						<UpdateStatisticsVariable variable="stockLevel">
							<ValueExpr language="Java JavaScript"><![CDATA[ 
							     this.inv.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>			
		</EnvironmentRules> 
	</SimulationModel>
	<!-- =========================================== -->
	<InitialState>
		<!-- =========================================== -->
		<ExogenousEvent type="DailyDemand" occurrenceTime="1" />
		<!-- =========================================== -->
		<Object type="Inventory" id="1" name="inventory">
		<!-- =========================================== -->
			<Slot property="productQuantityInStock" value="20" />
			<Slot property="reorderLevel" value="20" />
			<Slot property="reorderUpToLevel" value="30" />
			<Slot property="waitingForDelivery" value="false" />
		</Object>
	
	</InitialState>
	<!-- =========================================== -->
	<UserInterface supportedLanguages="en de">
	<!-- =========================================== -->
		<InitialStateUI>
			<ObjectUI objectType="Inventory">
				<PropertyUI property="reorderLevel" inputFieldLength="1" label="Reorder level">
					<Label>
						<Text xml:lang="de">Sicherheitsbestand</Text>
					</Label>
				</PropertyUI>
				<PropertyUI property="reorderUpToLevel" inputFieldLength="1" label="Reorder up to level">
					<Label>
						<Text xml:lang="de">Sollbestand</Text>
					</Label>					
				</PropertyUI>
			</ObjectUI>
		</InitialStateUI>
		<StatisticsUI>
			<StatisticsVariableUI variable="percentageOfLostSales">
				<Label>
					<Text xml:lang="en">Lost Sales</Text>
					<Text xml:lang="de">Nichtrealisierte Verkäufe</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the percentage of lost sales?</Text>
					<Text xml:lang="de">Wiveiel Prozent nichtrealisierte Verkäufe gab es?</Text>
				</Hint>
				<Format decimalPlaces="2"><Math>%</Math></Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="stockLevel" comparisonGroup="Demand_StockLevel" showChart="true">
				<Label>
					<Text xml:lang="en">Stock level</Text>
					<Text xml:lang="de">Lagerbetsnd</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">How many product items are there in the stock?</Text>
					<Text xml:lang="de">Wieveiele Produkteinheiten sind auf Lager?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="dailyDemand" comparisonGroup="Demand_StockLevel" showChart="true">
				<Label>
					<Text xml:lang="en">Daily demand</Text>
					<Text xml:lang="de">Tagesnachfrage</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">How big is the daily demand?</Text>
					<Text xml:lang="de">Wie groß ist die Tagesnachfrage?</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>	
		<AnimationUI>
				<Views>
					<SpaceView>
						<TwoDimensionalSpaceView2D backgroundImage="Inventory_Acik-Fotolia_4302799_background.jpg" />
					</SpaceView>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<ObjectView objectType="Inventory" objectIdRef="1">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
						<Shape2D x="700px" y="50px">
							<Rectangle positioning="CenterBottom" fill="grey" width="100" stroke="black"
								strokeWidth="4" >
								<ShapePropertyVisualizationMap shapeProperty="height" property="productQuantityInStock"
									mapType="polynomial" a0="0" a1="2" />
							</Rectangle>
						</Shape2D>
						<DisplayInfo property="productQuantityInStock" content="items in stock"/>
					</ObjectView>
				</Views>
		</AnimationUI>
	</UserInterface>
</SimulationScenario>