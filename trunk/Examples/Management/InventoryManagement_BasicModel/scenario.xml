<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:h="http://www.w3.org/1999/xhtml" 
	version="0.9" xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/ERSL/ERSL_0-9.xsd" 
	scenarioName="BasicInventoryManagement" 
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="365" stepDuration="1" timeUnit="D"/>

	<SimulationModel modelName="BasicInventoryManagement" modelTitle="A simple inventory management system 
		with lost sales statistics">

		<documentation>
			<dc:creator>Uwe Herrmann</dc:creator>
			<dc:created>20101107</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:contributor>Oana Nicolae</dc:contributor>
			<dc:modified>20111122</dc:modified>
			<dc:title>Inventory Management</dc:title>
			<dc:title xml:lang="de">Lagerverwaltung</dc:title>
			<shortDescription>
				Simulation of a simple inventory management system with a replenishment policy based on a reorder level.
			</shortDescription>
			<shortDescription xml:lang="de">
				Simulation eines einfachen Lagerverwaltungssystems mit einer Wiederbeschaffungsvorgehensweise,
				die auf einem Sicherheitsbestand (reorder level) basiert.
			</shortDescription>
			<description>The daily demand (say, for TVs in an electronics shop) is normally distributed, 
				with a mean of 5 units and a standard deviation of 1.8 units. A replenishment order is placed 
				when the quantity in stock falls below the reorder level. The order quantity of a replenishment order 
				is computed as the reorder-up-to-level minus the quantity in stock. Lead time is distributed 
				uniformly between 1 and 3 days.	If a demand is greater than the productQuantityInStock, 
				the sale is lost.	The number of lost sales is to be computed and displayed as a percentage.
			</description>
			<description xml:lang="de">Die Tagesnachfrage (z.B. für Fernsehgeräte in einem Geschäft) ist 
				normalverteilt mit einem Mittelwert von 5 und einer Standardabweichung von 1,8. Ein Wiederbeschaffungsauftrag
				wird erteilt, wenn der Lagerbestand unter den Sicherheitsbestand fällt. Die Bestellmenge eines
				Wiederbeschaffungsauftrags wird als Differenz aus dem Sollbestand (reorder-up-to-level) und dem
				Sicherheitsbestand errechnet. Die Vorlaufzeit für Lieferungen ist uniform verteilt zwischen 1 und 3 Tagen. 
				Wenn eine Nachfrage den Lagerbestand übersteigt, ist der Auftrag verloren. Die Anzahl der verlorenen  
				Aufträge ist zu ermitteln und als Prozentsatz anzuzeigen.
			</description>
			<CcLicense license="CC BY-SA"/>
		</documentation>

		<Statistics>
			<Variable name="totalNumberOfLostSales" dataType="Integer" />
			<Variable name="percentageOfLostSales" dataType="Float">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java">
						(float) SimStatistics.totalNumberOfLostSales.getValue() / SimParameter.SIMULATION_STEPS
					</ValueExpr>
					<ValueExpr language="JavaScript">
						__SimStatistics.totalNumberOfLostSales.getValue() / __SimParameter.SIMULATION_STEPS
					</ValueExpr>
				</Source>
			</Variable>
			<Variable name="productInStock" dataType="Integer" />
			<Variable name="dailyDemand" dataType="Integer" />
		</Statistics>

		<EntityTypes>
			<!-- ================================================== -->
			<ExogenousEventType name="DailyDemand" periodicity="1" />
			<!-- ================================================== -->
			<CausedEventType name="Delivery">
			<!-- ============================================== -->
				<Attribute name="quantity" type="Integer"/>
			</CausedEventType>
			
			<!-- ================================================== -->
			<ObjectType name="Inventory">
				<!-- ================================================== -->
				<Attribute name="productQuantityInStock" type="Integer" />
				<Attribute name="reorderLevel" type="Integer" />
				<Attribute name="reorderUpToLevel" type="Integer" />
			</ObjectType>
		</EntityTypes>

		<EnvironmentRules>
			<!-- =========================================== -->
			<EnvironmentRule name="DailyDemand_Rule">
			<!-- =========================================== -->
				<documentation>
					<dc:description>On DailyDemand, if the productQuantityInStock is greater than or equal to the demand, 
						the demand is subtracted from the productQuantityInStock. Else if the productQuantityInStock 
						is less than the demand, the productQuantityInStock drops to 0 and we have an increase of lost sales, 
						calculated as demand minus productQuantityInStock. This also works in the case where the productQuantityInStock 
						is already zero at the beginning of the day. If the productQuantityInStock is less than the reorder level, 
						a Delivery event is scheduled with a quantity of reorder-up-to-level minus productQuantityInStock items
						and with a uniformly distributated random delay of 1, 2 or 3 days.
					</dc:description>
				</documentation>
				<WHEN eventType="DailyDemand" />
				<FOR objectVariable="s" objectType="Inventory" objectIdRef="1" />
				<FOR dataVariable="demand" dataType="Integer">
					<ValueExpr language="Java"> Random.normalInt( 5, 1.8) </ValueExpr>
					<ValueExpr language="JavaScript"> js.util.Random.normalInt( 5, 1.8) </ValueExpr>
				</FOR>
				<IF language="Java"><![CDATA[ 
					s.getProductQuantityInStock() >= demand 
					]]></IF>
				<IF language="JavaScript"><![CDATA[ 
					this.s.getProductQuantityInStock() >= this.demand 
					]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java"><![CDATA[ 
									s.getProductQuantityInStock() - demand 
									]]></ValueExpr>
								<ValueExpr language="JavaScript"><![CDATA[ 
									this.s.getProductQuantityInStock() - this.demand 
									]]></ValueExpr>
							</Slot>
						</UpdateObject>
						<UpdateStatisticsVariable variable="productInStock">
							<ValueExpr language="Java"><![CDATA[ 
								 s.getProductQuantityInStock()
							]]></ValueExpr>
							<ValueExpr language="JavaScript"><![CDATA[ 
								this.s.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Condition language="Java"><![CDATA[ 
								s.getProductQuantityInStock() < s.getReorderLevel()	
								]]></Condition>
							<Condition language="JavaScript"><![CDATA[ 
								this.s.getProductQuantityInStock() < this.s.getReorderLevel()	
								]]></Condition>
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4" />
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<ValueExpr language="Java"><![CDATA[ 
									s.getReorderUpToLevel() - s.getProductQuantityInStock() 
									]]></ValueExpr>
								<ValueExpr language="JavaScript"><![CDATA[ 
									this.s.getReorderUpToLevel() - this.s.getProductQuantityInStock() 
									]]></ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</THEN>
				<ELSE>
					<UPDATE-ENV>
						<UpdateStatisticsVariable variable="totalNumberOfLostSales">
							<ValueExpr language="Java"><![CDATA[ 
								SimStatistics.totalNumberOfLostSales.getValue() + demand - s.getProductQuantityInStock()
							]]></ValueExpr>
							<ValueExpr language="JavaScript"><![CDATA[ 
								__SimStatistics.totalNumberOfLostSales.getValue() + this.demand -
								this.s.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="dailyDemand">
							<ValueExpr language="Java">demand</ValueExpr>
							<ValueExpr language="JavaScript">this.demand</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="productInStock">
							<ValueExpr language="Java">s.getProductQuantityInStock()</ValueExpr>
							<ValueExpr language="JavaScript">this.s.getProductQuantityInStock()</ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateObject objectVariable="s">
							<Slot property="productQuantityInStock" value="0" />
						</UpdateObject>
						<UpdateStatisticsVariable variable="productInStock">
							<ValueExpr language="Java"><![CDATA[ 
								 s.getProductQuantityInStock()
							]]></ValueExpr>
							<ValueExpr language="JavaScript"><![CDATA[ 
								this.s.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="Delivery">
							<Delay>
								<DiscreteRandomVariable>
									<UniformInt lowerBound="2" upperBound="4" />
								</DiscreteRandomVariable>
							</Delay>
							<Slot property="quantity">
								<ValueExpr language="Java">s.getReorderUpToLevel()</ValueExpr>
								<ValueExpr language="JavaScript">this.s.getReorderUpToLevel()</ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</ELSE>
			</EnvironmentRule>
			<!-- =========================================== -->
			<EnvironmentRule name="Delivery_Rule">
				<!-- =========================================== -->
				<documentation>
					<dc:description>On Delivery, the number of ordered items gets added to the productQuantityInStock.</dc:description>
				</documentation>
				<WHEN eventType="Delivery" eventVariable="d" />
				<FOR objectVariable="s" objectType="Inventory" objectIdRef="1" /> 
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java JavaScript">this.s.getProductQuantityInStock() + this.d.getQuantity()</ValueExpr>
							</Slot>
						</UpdateObject>
						<UpdateStatisticsVariable variable="productInStock">
							<ValueExpr language="Java"><![CDATA[ 
							     s.getProductQuantityInStock()
							]]></ValueExpr>
							<ValueExpr language="JavaScript"><![CDATA[ 
								this.s.getProductQuantityInStock()
							]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>			
		</EnvironmentRules> 
	</SimulationModel>
	<!-- =========================================== -->
	<InitialState>
		<!-- =========================================== -->
		<ExogenousEvent type="DailyDemand" occurrenceTime="1" />
		<!-- =========================================== -->
		<Object type="Inventory" id="1" name="inventory">
			<!-- =========================================== -->
			<Slot property="productQuantityInStock" value="20" />
			<Slot property="reorderLevel" value="20" />
			<Slot property="reorderUpToLevel" value="30" />
		</Object>
	</InitialState>
	<!-- =========================================== -->
	<UserInterface supportedLanguages="en de">
	<!-- =========================================== -->
		<InitialStateUI>
			<ObjectUI objectType="Inventory">
				<PropertyUI property="reorderLevel" inputFieldLength="1" label="REORDER_LEVEL: " />
				<PropertyUI property="reorderUpToLevel" inputFieldLength="1" label="REORDER_UP_TO_LEVEL: "/>
			</ObjectUI>
		</InitialStateUI>
		<StatisticsUI>
			<StatisticsVariableUI variable="percentageOfLostSales">
				<Label>
					<Text xml:lang="en">Lost Sales</Text>
					<Text xml:lang="de">Nichtrealisierte Verkäufe</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the percentage of lost sales?</Text>
					<Text xml:lang="de">Wiveiel Prozent nichtrealisierte Verkäufe gab es?</Text>
				</Hint>
				<Format decimalPlaces="2"><Math>%</Math></Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="productInStock" comparisonGroup="PD" showChart="true">
				<Label>
					<Text xml:lang="en">Product Items in Stock</Text>
					<Text xml:lang="de">Product Items in Stock</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is number of product items in the stock ?</Text>
					<Text xml:lang="de">What is number of product items in the stock ?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="dailyDemand" comparisonGroup="PD" showChart="true">
				<Label>
					<Text xml:lang="en">Daily Demand</Text>
					<Text xml:lang="de">Daily Demand</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the value of the daily demand ?</Text>
					<Text xml:lang="de">What is the value of the daily demand ?</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>	
		<AnimationUI>
				<aors:StartPageText xmlns="http://www.w3.org/1999/xhtml">
					<aors:HtmlText>
						<img style="float:right; padding-left:1em;" src="media/InventoryManagement.jpg" />
						<h4>Inventory Management</h4>
						<p>The daily demand for TVs in an electronics shop is normally distributed with a mean of 5 units 
					       and a standard deviation of 1.8 units. A replenishment order is placed when the quantity in stock 
					       falls below the reorder level. The quantity of a replenishment order is computed as the reorder-up-to-level 
					       minus the quantity in stock. The lead time of a delivery is distributed uniformly between 1 and 3 days. 
					       If a demand occurs on a day when the productQuantityInStock level is zero, the sale is lost. 
					       The number of lost sales is to be collected and displayed as a percentage.</p>
					</aors:HtmlText>
					<aors:HtmlText xml:lang="de">
						<img style="float:right; padding-left:1em;" src="media/InventoryManagement.jpg" />
						<h4>Inventory Management</h4>
						<p>In einem Elektronikshop ist die Tagesnachfrage nach Fernsehgeräten normalverteilt 
						   mit einem Mittelwert von 5 und einer Standardabweichung von 1,8. Ein Wiederbeschaffungsauftrag
						   wird erteilt, wenn der Lagerbestand unter den Sicherheitsbestand fällt. Die Bestellmenge eines
						   Wiederbeschaffungsauftrags wird als Differenz aus dem Sollbestand (reorder-up-to-level) und dem
						   Sicherheitsbestand errechnet. Die Vorlaufzeit für Lieferungen ist uniform verteilt zwischen 1 und 3 Tagen. 
						   Wenn eine Nachfrage den Lagerbestand übersteigt, ist der Auftrag verloren. Die Anzahl der verlorenen  
						   Aufträge ist zu ermitteln und als Prozentsatz anzuzeigen.</p>
					</aors:HtmlText>
				</aors:StartPageText>
				<Views>
					<SpaceView>
						<TwoDimensionalSpaceView2D backgroundColor="darkgrey" />
					</SpaceView>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<ObjectView objectType="Stock" objectIdRef="1">
						<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
						<Shape2D x="750px" y="50px">
							<Rectangle positioning="CenterBottom" fill="yellow" height="20" width="50" stroke="black"
								strokeWidth="4" >
								<ShapePropertyVisualizationMap shapeProperty="height" property="productQuantityInStock"
									mapType="polynomial" a0="0" a1="2" />
							</Rectangle>
						</Shape2D>
						<DisplayInfo content="Product Item(s) in Stock"  property="productQuantityInStock" />
					</ObjectView>
				</Views>
		</AnimationUI>
	</UserInterface>
</SimulationScenario>