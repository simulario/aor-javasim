
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-9.xsd"
    xmlns="http://aor-simulation.org"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:aors="http://aor-simulation.org"
    version="0.9"
    scenarioName="MinEcon_LaborFoodUtility_BL6scenario"
    simulationManagerDirectory="../../..">
    <SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0" randomSeed="47"/>
    <SimulationModel modelName="MinEcon_LaborFoodUtility_BL6" modelTitle="A Minimal Economy with a Labor, Food and Utility Market">
      <documentation>
          <dc:title>Minimal Economy with a Labor, Food and Utility Market</dc:title>
          <dc:subject>Agent-based computational economics</dc:subject>
          <dc:creator>Lars Langjahr</dc:creator>
          <dc:created>20101031</dc:created>
          <dc:contributor>Gerd Wagner</dc:contributor>
          <dc:contributor>Gabriel Diaconita</dc:contributor>
          <dc:modified>20101203</dc:modified>
      </documentation>
        <Statistics>
            <Variable name="PriceFood" dataType="Float">
                <Source>
                    <ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
                </Source>
            </Variable>
            <Variable name="BuyOffersFood" dataType="Float">
                <Source>
                    <ObjectProperty property="Demand" objectType="Market" objectIdRef="2"/>
                </Source>
            </Variable>
            <Variable name="SellOffersFood" dataType="Float">
                <Source>
                    <ObjectProperty property="Supply" objectType="Market" objectIdRef="2"/>
                </Source>
            </Variable>
            <Variable name="PriceUtility" dataType="Float">
                <Source>
                    <ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
                </Source>
            </Variable>
            <Variable name="BuyOffersUtility" dataType="Float">
                <Source>
                    <ObjectProperty property="Demand" objectType="Market" objectIdRef="4"/>
                </Source>
            </Variable>
            <Variable name="SellOffersUtility" dataType="Float">
                <Source>
                    <ObjectProperty property="Supply" objectType="Market" objectIdRef="4"/>
                </Source>
            </Variable>
            <Variable name="PriceLabor" dataType="Float">
                <Source>
                    <ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
                </Source>
            </Variable>
            <Variable name="BuyOffersLabor" dataType="Float">
                <Source>
                    <ObjectProperty property="Demand" objectType="Market" objectIdRef="3"/>
                </Source>
            </Variable>
            <Variable name="SellOffersLabor" dataType="Float">
                <Source>
                    <ObjectProperty property="Supply" objectType="Market" objectIdRef="3"/>
                </Source> 
            </Variable>
        </Statistics>
        
        <DataTypes>
            <ComplexDataType name="TradeOffer">
                <Attribute type="String" name="product"/>
                <Attribute type="Float" name="price"/>
                <Attribute type="Boolean" name="buy"/>
                <Attribute type="Integer" name="bidderIdRef"/>
                <Attribute type="Float" name="min"/>
            </ComplexDataType>
        </DataTypes>
        <EntityTypes>
            <!-- ===================================== -->
            <MessageType name="StartOfDay_Notification">
                <documentation>A message of the market to announce the trading price of the last day</documentation>
                <Attribute type="Float" name="price"/>
                <Attribute type="String" name="marketType"/>
            </MessageType>
            <!--========================================-->
            <MessageType name="Act_msg">
                <documentation>A message to an EconomicAgent, which signals them to being with their work.</documentation>
            </MessageType>
            <!-- ====================================== -->
            <MessageType name="ClearMarket">
                <documentation>A message to a Market, which ends the trading day.</documentation>
            </MessageType>
            <!-- ====================================== -->
            <MessageType name="BL6Offer">
                <documentation>An offer to the market, made by a BL6Agent</documentation>
                <ComplexDataProperty name="offer" type="TradeOffer" />
            </MessageType>
            <!-- ====================================== -->
            <MessageType name="MatchingOffer">
                <documentation>A successful trade returned from the market</documentation>
                <ComplexDataProperty name="offer" type="TradeOffer" />
            </MessageType>
            <!-- ===================================== -->
            <ExogenousEventType name="Init">
                <documentation>Triggers certain EnvironmentRule, needed for the initialization</documentation>
            </ExogenousEventType>
            <!-- ============================================ -->
            <ExogenousEventType name="StartOfDay" periodicity="9">
                <documentation>
                    Starts a new day. EnvironmentRules are triggered, which check if a person has enough food, a firm is bankrupt
                    and send the marketprices of the last day to all EconomicAgents
                </documentation>
            </ExogenousEventType>
            <!-- ============================================ -->
            <ExogenousEventType name="StartWork" periodicity="9">
                <documentation>Triggers the StartWork_ER-EnvironmentRule, which tells the EconomicAgents to start with their work.</documentation>
            </ExogenousEventType>
            <!-- ============================================ -->
            <ExogenousEventType name="CloseMarket" periodicity="9">
                <documentation>
                    Ends the day, by triggering the CloseMarket_ER-EnvironmentRule.
                    Tells to the Markets to end of the trading day and calculate a new market price.
                </documentation>
            </ExogenousEventType>
            <!-- ============================================ -->
            <AgentType name="EconomicAgent">
                <!-- ================================= -->
                <documentation>
                    Superclass of Person and Firm, which has the basic functionality for communicating with the market(price updates and successful transactions).
                    Further it adds help functions to find a specific asset or to create an offer.
                    
                    LABOR_ALLOWANCE: The amount of labor, a laborer offers every day.
                    lastFoodPrice, lastLaborPrice, lastUtilityPrice: The trading price of the last day.
                </documentation>
                <ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded" />
                <Attribute type="Float" name="LABOR_ALLOWANCE" initialValue="1.0"/>
                <Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
                <Attribute type="Float" name="lastFoodPrice" initialValue="0"/>
                <Attribute type="Float" name="lastLaborPrice" initialValue="0"/>
                <Attribute type="Float" name="lastUtilityPrice" initialValue="0"/>
                <!-- ============================== -->
                <Function name="getAssetByName" resultType="aors.util.economics.Quantity">
                    <documentation>Finds an asset from the AssetsList by String</documentation>
                    <Parameter name="name" type="String"/>
                    <Body language="Java"><![CDATA[
                        int i;
                        aors.util.ArrayListInterface<aors.util.economics.Quantity> assets = getAssets();
                        for (i=0; i < assets.size(); i++){
                          if (!assets.get(i).isDiscrete()) {
                            if (((aors.util.economics.ContinuousQuantity)assets.get(i)).getContinuousQuantityType().getName().equals(name)) break;
                          } else {
                            if (((aors.util.economics.DiscreteQuantity)assets.get(i)).getType().equals(name)) break;
                          }
                        }
                        return assets.get(i);
                        ]]></Body>
                    <Body language="JavaScript"><![CDATA[
						var i;
						var assets = this.getAssets();
						for (i=0; i < assets.size(); i++){
						 if (!assets.get(i).isDiscrete()) {
						   if (assets.get(i).getContinuousQuantityType().getName() === name) break;
						   } else {
						     if (assets.get(i).getType() === name) break;
						    }
			             }
						 return assets.get(i);
                        ]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="createOffer" resultType="BL6Offer">
                    <documentation>Needed to create a BL6Offer in JavaScript</documentation>
                    <Parameter name="product" type="String"/>
                    <Parameter name="quantity" type="Float"/>
                    <Parameter name="buy" type="Boolean"/>
                    <Parameter name="min" type="Float"/>
                    <Body language="JavaScript">
                        var offer = new sim.model.dataTypes.TradeOffer();
                        offer.setProduct(product);
                        offer.setQuantity(quantity);
                        offer.setBuy(buy);
                        offer.setBidderIdRef(this.getId());
                        offer.setMin(min);
                        return offer;
                    </Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="StartOfDay_Food_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the food market is updated.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Food")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Food"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastFoodPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="StartOfDay_Labor_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the labor market is updated.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Labor")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Labor"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastLaborPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="StartOfDay_Utility_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the utility market is updated</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Utility")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Utility"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastUtilityPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Money_Rule" agentVariable="agt">
                    <documentation>When a sell transaction was successful, the money amount is increased by the quantity times the price of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Money_Rule" agentVariable="agt">
                    <documentation>When a buy transaction was successful, the money amount is decreased by the quantity times the price of the offer</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Food_Rule" agentVariable="agt">
                    <documentation>When a buyfood transaction was successful, the food amount is increased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Food_Rule" agentVariable="agt">
                    <documentation>When a sellfood transaction was successful, the food amount is decreased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() == "Food" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Labor_Rule" agentVariable="agt">
                    <documentation>When a buylabor transaction was successful, the labor amount is increased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Labor_Rule" agentVariable="agt">
                    <documentation>When a selllabor transaction was successful, the labor amount is decreased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Utility_Rule" agentVariable="agt">
                    <documentation>When a buyutility transaction was successful, the utility amount is increased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Utility_Rule" agentVariable="agt">
                    <documentation>When a sellutility transaction was successful, the utility amount is decreased by the quantity of the offer.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ========================================== -->
            <AgentType name="Person" superType="EconomicAgent">
                <documentation>
                    Superclass to represent a BL6Person.
                    
                    EAT_AMOUNT: The amount of food a person eats every day.
                    TARGET_FOOD_STOCK: The aimed food amount.
                    income: Amount of money a person can spend during a day.
                </documentation>
                <Attribute type="Float" name="EAT_AMOUNT"/>
                <Attribute type="Float" name="TARGET_FOOD_STOCK"/>
                <Attribute type="Float" name="income"/>
            </AgentType>
            <!-- ========================================= -->
            <AgentType name="Firm" superType="EconomicAgent">
                <documentation>Superclass to represent a BL6Firm</documentation>
            </AgentType>
            <!-- ======================================== -->
            <AgentType name="BL6Person" superType="Person">
                <documentation>Superclass of a BL6Laborer</documentation>
            </AgentType>
           <!-- ======================================== -->
            <AgentType name="BL6Laborer" superType="BL6Person">
                <documentation>
                    Every day a BL6Laborer has to consume EAT_AMOUNT units of food or he dies.
                    To earn money he sells his labor to the market.
                    Depending on his TARGET_FOOD_STOCK, he decides how much money spends on food and utility.
                </documentation>
                <Attribute type="Float" name="baseSavingToIncomeRation" initialValue="10"/>
                <Attribute type="Float" name="epsilon" initialValue="0.1"/>
                <Attribute type="Float" name="upsilon" initialValue="0.4"/>
                <Attribute type="Float" name="savingRate"/>
                <Attribute type="Float" name="consumption"/>
                <Attribute type="Float" name="eConsumption"/>
                <Attribute type="Float" name="nConsumption"/>
                <Attribute type="Float" name="minN"/>
                <Attribute type="Float" name="lowRR"/>
                <Attribute type="Float" name="highRR"/>
                <Attribute type="Float" name="wage"/>
                <Attribute type="Float" name="targetSavings"/>
                <Attribute type="Float" name="targetConsumption"/>
                <Attribute type="Boolean" name="first" initialValue="true"/>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="wage_Rule">
                    <documentation>Calculates the daily income</documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="income">
                                <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity * this.msg.getOffer().getPrice()</ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="consumption_Rule" agentVariable="agt">
                    <documentation>
                        At the first day, he spends his whole income.
                        Every other day he decides how much he wants to save, the rest is his new targetConsumption.
                        The new consumption is calculated by the consumption of the last day and the new targetConsumption.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="targetSavings">
                                <ValueExpr language="Java JavaScript">this.agt.getIncome() * this.agt.getBaseSavingToIncomeRation()</ValueExpr>
                            </Slot>
                            <Slot property="targetConsumption">
                                <ValueExpr language="Java JavaScript">this.agt.getAssetByName("Money").getQuantity - this.agt.getTargetSavings()</ValueExpr>
                            </Slot>
                            <Slot property="consumption">
                                <ValueExpr language="Java JavaScript">
                                    Math.min(
                                      Math.max(
                                        this.agt.getConsumption() * (1 - this.agt.getUpsilon()),
                                        this.agt.getTargetConsumption()
                                      ),
                                      this.agt.getConsumption() * (1 + this.agt.getUpsilon())
                                    )
                                </ValueExpr>
                            </Slot>
                            <Slot property="consumption">
                                <ValueExpr language="Java JavaScript">this.agt.isFirst() ? this.agt.getIncome() : this.agt.getConsumption()</ValueExpr>
                            </Slot>
                            <Slot property="first" value="false" />
                            <Slot property="income" value="0" />
                        </UPDATE-AGT>
                    </DO>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="buyFood_Rule" agentVariable="agt">
                    <documentation>Decides how much consumption spends for food</documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="nConsumption">
                                <ValueExpr language="Java JavaScript">
                                    this.agt.getConsumption() * Math.max(0, 1 - this.agt.getAssetByName("Food").getQuantity () / this.agt.getTARGET_FOOD_STOCK())
                                </ValueExpr>
                            </Slot>
                            <Slot property="minN">
                                <ValueExpr language="Java JavaScript">
                                    <![CDATA[ this.agt.getAssetByName("Food").getQuantity() < 2 * this.agt.getEatAmount() ? this.agt.getEAT_AMOUNT() : 0]]>
                                </ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL6Offer" receiverIdRefs="2">
                                <Slot property="offer">
                                    <ValueExpr language="Java">new TradeOffer(){
                                    setProduct("Food");
                                    setQuantity(getNConsumption());
                                    setBuy(true);
                                    setBidderIdRef(getId());
                                    setMin(getMinN());
                                    }</ValueExpr>
                                    <ValueExpr language="JavaScript">
                                        this.agt.CreateOffer("Food, this.agt.getNConsumption(), true, this.agt.getMinN())
                                    </ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="buyUtility_Rule" agentVariable="agt">
                    <documentation>Part of consumption which was not spend on food, it is on utility</documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <DO>
                        <UPDATE-AGT>
                            <Slot property="eConsumption">
                                <ValueExpr language="Java JavaScript">this.agt.getConsumption() - this.agt.getNConsumption()</ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL6Offer" receiverIdRefs="4">
                                <Slot property="offer">
                                    <ValueExpr language="Java">new TradeOffer(){
                                      setProduct("Utility");
                                      setQuantity(getEConsumption());
                                      setBuy(true);
                                      setBidderIdRef(getId());
                                      }</ValueExpr>
                                    <ValueExpr language="JavaScript">this.agt.createOffer("Utility", this.agt.getEConsumption(), true)</ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
               <ReactionRule name="sellLabor_Rule" agentVariable="agt">
                   <documentation>Offers his labor to the market.</documentation>
                   <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                   <DO>
                       <SCHEDULE-EVT>
                           <OutMessageEventExpr messageType="BL6Offer" receiverIdRefs="3">
                               <Slot property="offer">
                                   <ValueExpr language="Java">new TradeOffer(){
                                     setProduct("Labor");
                                     setQuantity(1);
                                     setBuy(false);
                                     setBidderIdRef(getId());
                                     }</ValueExpr>
                                   <ValueExpr language="JavaScript">this.agt.createOffer("Labor", 1, false)</ValueExpr>
                               </Slot>
                           </OutMessageEventExpr>
                       </SCHEDULE-EVT>
                   </DO>
               </ReactionRule>
            </AgentType>
            <!-- ========================================== -->            
        </EntityTypes>
    </SimulationModel>
    <InitialState>
        
    </InitialState>
</SimulationScenario>
