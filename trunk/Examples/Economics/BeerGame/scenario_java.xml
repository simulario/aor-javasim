<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>
<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-9.xsd"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns="http://aor-simulation.org"
 xmlns:aors="http://aor-simulation.org"
 scenarioName="BeerGame"
 scenarioTitle="The MIT Beer Game"
 simulationManagerDirectory="../../.."
 version="0.9">
  <SimulationParameters randomSeed="100" simulationSteps="364" stepDuration="7" stepTimeDelay="50"
    timeUnit="D" />
  <SimulationModel modelName="BeerGame" modelTitle="The MIT Beer Game">
    <documentation>
    	<dc:created>20090501</dc:created>
    	<dc:creator>Oana Nicolae</dc:creator>
      <dc:contributor>Daniel Draeger</dc:contributor>
    	<dc:contributor>Mircea Diaconescu</dc:contributor>
    	<dc:contributor>Gerd Wagner</dc:contributor>
    	<dc:modified>20110218</dc:modified>
      <aors:shortDescription xmlns="http://www.w3.org/1999/xhtml">
        This model describes the classical <a href="http://web.mit.edu/jsterman/www/SDG/beergame.html">MIT Beer Game</a>. 
        It is a management simulation with a
        beer supply chain consisting of four nodes: the Retailer, the Wholesaler, the Distributor
        and the Factory. Every intermediate node has one upstream node to order and receive beer
        from and one downstream node to receive orders from and to delivery beer to. An order takes
        7 days and a delivery takes 14 days. At the end of a week every node decides how much beer
        to order and calculates its costs for current stock and outstanding orders. 
      </aors:shortDescription>

      <description xmlns:h="http://www.w3.org/1999/xhtml">
        <h:p>
        This model describes the classical MIT Beer Game
        (http://web.mit.edu/jsterman/www/SDG/beergame.html). It is a management simulation with a
        beer supply chain consisting of four nodes: the Retailer, the Wholesaler, the Distributor
        and the Factory. Every intermediate node has one upstream node to order and receive beer
        from and one downstream node to receive orders from and to delivery beer to. An order takes
        7 days and a delivery takes 14 days. At the end of a week every node decides how much beer
        to order and calculates its costs for current stock and outstanding orders. </h:p></description>
    </documentation>
    <Statistics>
      <Variable dataType="Integer" name="customerDemand">
        <Source aggregationFunction="avg">
          <ObjectProperty objectType="Customer" property="order" />
        </Source>
      </Variable>
      <Variable dataType="Integer" name="factoryDelivery">
        <Source>
          <ObjectProperty objectIdRef="1" objectType="TopSupplyChainNode"
            property="currentSalesOrderQuantity" />
        </Source>
      </Variable>
      <Variable dataType="Integer" name="distributorInventory">
        <Source>
          <ObjectProperty objectIdRef="2" objectType="IntermediarySupplyChainNode"
            property="inventory" />
        </Source>
      </Variable>
      <Variable dataType="Float" name="distributorCosts">
        <Source>
          <ObjectProperty objectIdRef="2" objectType="IntermediarySupplyChainNode" property="costs"
           />
        </Source>
      </Variable>
      <Variable dataType="Integer" name="wholesalerInventory">
        <Source>
          <ObjectProperty objectIdRef="3" objectType="IntermediarySupplyChainNode"
            property="inventory" />
        </Source>
      </Variable>
      <Variable dataType="Float" name="wholesalerCosts">
        <Source>
          <ObjectProperty objectIdRef="3" objectType="IntermediarySupplyChainNode" property="costs"
           />
        </Source>
      </Variable>
      <Variable dataType="Integer" name="retailerInventory">
        <Source>
          <ObjectProperty objectIdRef="4" objectType="IntermediarySupplyChainNode"
            property="inventory" />
        </Source>
      </Variable>
      <Variable dataType="Float" name="retailerCosts">
        <Source>
          <ObjectProperty objectIdRef="4" objectType="IntermediarySupplyChainNode" property="costs"
           />
        </Source>
      </Variable>
      <Variable dataType="Float" name="systemCosts" />
    </Statistics>
    <Globals>
      <GlobalVariable name="currentWeek" dataType="Integer" initialValue="1"/>
    </Globals>
    <EntityTypes>
      <MessageType name="Order">
        <Attribute name="quantity" type="Integer" />
      </MessageType>
      <MessageType name="BeerDelivery">
        <Attribute name="quantity" type="Integer" />
      </MessageType>
      <ExogenousEventType name="CustomerDemand" periodicity="7" />
      <ExogenousEventType name="EndOfSystemWeek" periodicity="7" />
      
      <!-- ========================== -->
      <AgentType name="Customer">
      <!-- ========================== -->
        <Attribute name="order" type="Integer" />
      </AgentType>
      
      <!-- ==================================== -->
      <AgentType name="AbstractSupplyChainNode">
       <!-- ==================================== -->
        <!-- currentSalesOrderQuantity: the orders received in the current cycle -->
        <Attribute name="currentSalesOrderQuantity" type="Integer" />
        <!-- outDelivery: the total amount of delivery at the end of the week -->
        <Attribute name="outDelivery" type="Integer" />
        <PeriodicTimeEventType name="EndOfWeek" periodicity="7" />
      </AgentType>
      
      <!-- ==================================================================== -->
      <AgentType name="TopSupplyChainNode" superType="AbstractSupplyChainNode">
      <!-- ==================================================================== -->
        <ReactionRule agentVariable="node" name="Order_Rule">
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
            When an order comes in, the currentSalesOrderQuantity is incremented by
              the ordered quantity. 
          </documentation>
          <WHEN eventType="InMessageEvent" messageType="Order" messageVariable="msg" />
          <DO>
            <UPDATE-AGT>
              <Slot property="currentSalesOrderQuantity">
                <ValueExpr language="Java">msg.getQuantity()</ValueExpr>
                <ValueExpr language="JavaScript">this.msg.getQuantity()</ValueExpr>
              </Slot>
            </UPDATE-AGT>
          </DO>
        </ReactionRule>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_ShippingBeer_Rule">
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
            At the end of a week, the Factory sends the outDelivery amount of bier
              to the downstream node. The outDelivery amount is equal with the
              currentSalesOrderQuantity. The currentSalesOrderQuantity becomes zero.
            
          </documentation>
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">	this.node.getCurrentSalesOrderQuantity() > 0 </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="outDelivery">
                <ValueExpr language="Java JavaScript"> this.node.getCurrentSalesOrderQuantity() </ValueExpr>
              </Slot>
              <Slot property="currentSalesOrderQuantity" value="0" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="13" messageType="BeerDelivery">
                <ReceiverIdRef language="Java JavaScript">this.node.getId() + 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">this.node.getOutDelivery()</ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
      </AgentType>
      <!-- =========================================================================== -->
      <AgentType memorySize="5" name="IntermediarySupplyChainNode" superType="AbstractSupplyChainNode">
        <!-- =========================================================================== -->
        <!-- inventory: the current beer in stock -->
        <Attribute name="inventory" type="Integer" />
        <!-- backorderQuantity: orders of previous cycles that aren't fulfilled yet -->
        <Attribute name="backorderQuantity" type="Integer" />
        <!-- the last order value that this agent made -->
        <Attribute name="myLastOrder" type="Integer" />
        <!--  -->
      	<Attribute name="sendOrder" type="Boolean" initialValue="false"/>
        <!-- costs: costs at the end of the week -->
        <Attribute name="costs" type="Float" />
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- STEP 1: InComingOrder and InComingDeliveries -->
        <ReactionRule agentVariable="node" name="Order_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
             When an order comes in, the currentSalesOrderQuantity is incremented by
              the ordered quantity. 
          </documentation>
          <WHEN eventType="InMessageEvent" messageType="Order" messageVariable="msg" />
          <DO>
            <UPDATE-AGT>
              <Slot property="currentSalesOrderQuantity">
                <ValueExpr language="Java JavaScript">this.msg.getQuantity()</ValueExpr>
              </Slot>
            </UPDATE-AGT>
          </DO>
        </ReactionRule>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="BeerDelivery_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
            When a beer delivery message comes in, the inventory is incremented by
              the quantity of delivered beer. 
          </documentation>
          <WHEN eventType="InMessageEvent" messageType="BeerDelivery" messageVariable="msg" />
          <DO>
            <UPDATE-AGT>
              <Slot property="inventory">
                <ValueExpr language="Java JavaScript">
                	this.node.getInventory() + this.msg.getQuantity()
                </ValueExpr>
              </Slot>
            </UPDATE-AGT>
          </DO>
        </ReactionRule>
        <!-- STEP 2: OutDeliveries -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_ShippingPartialOrder_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
              At the end of a week, if there is not enough beer in stock for all
              orders, then the the node will ship as much beer as in stock, the inventory level is
              set to 0, the backorderQuantity is incremented by the shortage quantity, and a
              corresponding beer delivery message is sent to the downstream node. 
          </documentation>
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
							(this.node.getInventory() < (this.node.getCurrentSalesOrderQuantity() + this.node.getBackorderQuantity()))
			      ]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="outDelivery">
                <ValueExpr language="Java JavaScript">this.node.getInventory()</ValueExpr>
              </Slot>
              <Slot property="backorderQuantity">
                <ValueExpr language="Java JavaScript">
                  <![CDATA[
										(this.node.getBackorderQuantity() + this.node.getCurrentSalesOrderQuantity()) - this.node.getInventory()       				
				       		]]>
                </ValueExpr>
              </Slot>
              <Slot property="inventory" value="0" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="13" messageType="BeerDelivery">
                <Condition language="Java JavaScript">this.node.getOutDelivery() > 0</Condition>
                <ReceiverIdRef language="Java JavaScript">this.node.getId() + 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">this.node.getOutDelivery()</ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_ShippingTotalOrder_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
              At the end of a week, if there is enough beer in stock for all orders,
              then the inventory level is decremented by the total order quantity, and a
              corresponding beer delivery message is sent to the downstream node. 
          </documentation>
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
							this.node.getInventory() >= (this.node.getCurrentSalesOrderQuantity() + this.node.getBackorderQuantity()) 
							&& ((this.node.getCurrentSalesOrderQuantity() + this.node.getBackorderQuantity()) > 0)
        		]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="outDelivery">
                <ValueExpr language="Java JavaScript">
                  <![CDATA[
										this.node.getCurrentSalesOrderQuantity() + this.node.getBackorderQuantity()       				
				       		]]>
                </ValueExpr>
              </Slot>
              <Slot property="inventory">
                <ValueExpr language="Java JavaScript">
                  <![CDATA[
										this.node.getInventory() - this.node.getOutDelivery()       				
				       		]]>
                </ValueExpr>
              </Slot>
              <Slot property="backorderQuantity" value="0" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="13" messageType="BeerDelivery">
                <ReceiverIdRef language="Java JavaScript">this.node.getId() + 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">this.node.getOutDelivery()</ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!-- STEP 3: OutOrders -->
        <!--  #### inventory == 0  AND myLastOrder - backorder < 2 * currentSalesOrder #### -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_OrderingBeer_R1_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
              This node has no inventory and no backorders for now. This is a margin
              case, but is very possible to appear. In this case, the node will order twice as the
              last order request it gets plus some random beer value. 
          </documentation>
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
              !this.node.isSendOrder() &&
              this.node.getInventory() == 0 && 
							(this.node.getMyLastOrder() - this.node.getBackorderQuantity() < 2 * this.node.getCurrentSalesOrderQuantity())
			   		]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="myLastOrder">
                <ValueExpr language="Java">
                  <![CDATA[
                    this.node.getBackorderQuantity() +  2 * this.node.getCurrentSalesOrderQuantity() 
                    - this.node.getMyLastOrder() + aors.util.Random.uniformInt(1,5)  
                  ]]>
                </ValueExpr>
                <ValueExpr language="JavaScript">
                  <![CDATA[
                     this.node.getBackorderQuantity() +  2 * this.node.getCurrentSalesOrderQuantity() 
                     - this.node.getMyLastOrder() + js.util.Random.uniformInt(1,5)
                  ]]>
                </ValueExpr>
              </Slot>
              <Slot property="sendOrder" value="true" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="6" messageType="Order">
                <ReceiverIdRef language="Java JavaScript">this.node.getId() - 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">
                    <![CDATA[
											this.node.getMyLastOrder()
										]]>
                  </ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!--  #### inventory == 0 AND myLastOrder - backorder >= 2 * currentSalesOrder #### -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_OrderingBeer_R2_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
              This node has no inventory but it has backorders. In this case, 
            	the node will place an order for raising the inventory to twice the
              last order received plus some extra random quantity.
            
          </documentation>
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
              !this.node.isSendOrder() &&
							this.node.getInventory() == 0 && 
							this.node.getMyLastOrder() - this.node.getBackorderQuantity() >=  
							  2 * this.node.getCurrentSalesOrderQuantity()
			   		]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="myLastOrder">
                <RandomVariable>
                  <UniformInt lowerBound="1" upperBound="5" />
                </RandomVariable>
              </Slot>
              <Slot property="sendOrder" value="true" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="6" messageType="Order">
                <Condition language="Java JavaScript"> this.node.getMyLastOrder() > 0 </Condition>
                <ReceiverIdRef language="Java JavaScript"> this.node.getId() - 1 </ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript"> this.node.getMyLastOrder() </ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!--  #### inventory > 0  AND inventory + myLastOrder < 2 * currentSalesOrderQuantity #### -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_OrderingBeer_R3_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
              !this.node.isSendOrder() &&
              this.node.getInventory() > 0  &&
							(this.node.getInventory() + this.node.getMyLastOrder() < 2 * this.node.getCurrentSalesOrderQuantity())							
			  	  ]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="myLastOrder">
                <ValueExpr language="Java">
                  <![CDATA[
                    2 * this.node.getCurrentSalesOrderQuantity() - this.node.getInventory() 
                    - this.node.getMyLastOrder() + aors.util.Random.uniformInt(1,5)
                  ]]>
                </ValueExpr>
                <ValueExpr language="JavaScript">
                  <![CDATA[
                     2 * this.node.getCurrentSalesOrderQuantity() - this.node.getInventory() 
                    - this.node.getMyLastOrder() + js.util.Random.uniformInt(1,5)
                  ]]>
                </ValueExpr>
              </Slot>
              <Slot property="sendOrder" value="true" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="6" messageType="Order">
                <ReceiverIdRef language="Java JavaScript">this.node.getId() - 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">
                    <![CDATA[
											this.node.getMyLastOrder()
       							]]>
                  </ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!--  #### inventory > 0  AND inventory + myLastOrder  >= 2 * currentSalesOrderQuantity -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_OrderingBeer_R4_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <WHEN eventType="EndOfWeek" />
          <IF language="Java JavaScript">
            <![CDATA[
              !this.node.isSendOrder() &&
              this.node.getInventory() > 0  &&
							(this.node.getInventory() + this.node.getMyLastOrder() >= 2 * this.node.getCurrentSalesOrderQuantity())							
			  	  ]]>
          </IF>
          <THEN>
            <UPDATE-AGT>
              <Slot property="myLastOrder">
                <RandomVariable>
                  <UniformInt lowerBound="1" upperBound="3" />
                </RandomVariable>
              </Slot>
              <Slot property="sendOrder" value="true" />
            </UPDATE-AGT>
            <SCHEDULE-EVT>
              <OutMessageEventExpr delay="6" messageType="Order">
                <Condition language="Java JavaScript">this.node.getMyLastOrder() > 0</Condition>
                <ReceiverIdRef language="Java JavaScript">this.node.getId() - 1</ReceiverIdRef>
                <Slot property="quantity">
                  <ValueExpr language="Java JavaScript">
                    <![CDATA[
                      this.node.getMyLastOrder()
                    ]]>
                  </ValueExpr>
                </Slot>
              </OutMessageEventExpr>
            </SCHEDULE-EVT>
          </THEN>
        </ReactionRule>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ReactionRule agentVariable="node" name="EndOfWeek_CostCalculation_Rule">
          <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
          <documentation>
              An agent rule for the calculation of costs: beer in stock has costs of
              1 money unit, not fulfilled orders 2 units 
          </documentation>
          <WHEN eventType="EndOfWeek" eventVariable="event" />
          <DO>
            <UPDATE-AGT>
              <Slot property="costs">
                <ValueExpr language="Java JavaScript">
                  <![CDATA[
										this.node.getCosts() + (1 * this.node.getInventory()) + (2 * this.node.getBackorderQuantity())        				
			        		]]>
                </ValueExpr>
              </Slot>
              <!-- clean up -->
              <Slot property="currentSalesOrderQuantity" value="0" />
              <Slot property="sendOrder" value="false" />
            </UPDATE-AGT>
          </DO>
        </ReactionRule>
      
      </AgentType>
    </EntityTypes>
    <EnvironmentRules>
      <!-- =================================================== -->
      <EnvironmentRule name="CustomerDemand_Rule">
      <!-- =================================================== -->
        <documentation>
            When an external customer demand event occurs, a corresponding order
            message event is created. 
        </documentation>
        <WHEN eventType="CustomerDemand" eventVariable="cd" />
        <FOR objectIdRef="4" objectType="IntermediarySupplyChainNode" objectVariable="retailer" />
        <FOR objectType="Customer" objectVariable="customer" />
        <DO>
          <UPDATE-ENV>
            <UpdateObject objectVariable="customer">
              <Slot property="order">
                <RandomVariable>
                  <UniformInt lowerBound="3" upperBound="5" />
                </RandomVariable>
              </Slot>
            </UpdateObject>
          </UPDATE-ENV>
          <SCHEDULE-EVT>
            <InMessageEventExpr messageType="Order" senderIdRef="5">
              <ReceiverIdRef language="Java JavaScript">this.retailer.getId()</ReceiverIdRef>
              <Slot property="quantity">
                <ValueExpr language="Java JavaScript">this.customer.getOrder()</ValueExpr>
              </Slot>
            </InMessageEventExpr>
          </SCHEDULE-EVT>
        </DO>
      </EnvironmentRule>
      <!-- =================================================== -->
      <EnvironmentRule name="EndOfWeek_UpdateSystemCosts_Rule">
        <!-- =================================================== -->
        <WHEN eventType="EndOfSystemWeek" />
        <DO>
          <UPDATE-ENV>
            <UpdateStatisticsVariable variable="systemCosts">
              <ValueExpr language="Java">
                <![CDATA[
		 							SimStatistics.retailerCosts.getValue() + SimStatistics.wholesalerCosts.getValue() + SimStatistics.distributorCosts.getValue()        				
		        				]]>
              </ValueExpr>
              <ValueExpr language="JavaScript">
                <![CDATA[
		 							SimStatistics.retailerCosts.getValue() + SimStatistics.wholesalerCosts.getValue() + SimStatistics.distributorCosts.getValue()        				
		        				]]>
              </ValueExpr>
            </UpdateStatisticsVariable>
            <IncrementGlobalVariable name="currentWeek" value="1"/>
          </UPDATE-ENV>
        </DO>
      </EnvironmentRule>
    </EnvironmentRules>
  </SimulationModel>
  <!-- =================================================== -->
  <InitialState>
    <!-- =================================================== -->
    <Agent id="5" name="Customer" type="Customer">
      <Slot property="order" value="0" />
    </Agent>
    <Agent id="4" name="Retailer" type="IntermediarySupplyChainNode">
      <Slot property="inventory" value="20" />
      <Slot property="myLastOrder" value="0" />
      <PeriodicTimeEvent occurrenceTime="7" type="EndOfWeek" />
    </Agent>
    <Agent id="3" name="Wholesaler" type="IntermediarySupplyChainNode">
      <Slot property="inventory" value="20" />
      <Slot property="myLastOrder" value="0" />
      <PeriodicTimeEvent occurrenceTime="7" type="EndOfWeek" />
    </Agent>
    <Agent id="2" name="Distributor" type="IntermediarySupplyChainNode">
      <Slot property="inventory" value="20" />
      <Slot property="myLastOrder" value="0" />
      <PeriodicTimeEvent occurrenceTime="7" type="EndOfWeek" />
    </Agent>
    <Agent id="1" name="Factory" type="TopSupplyChainNode">
      <Slot property="inventory" value="20" />
      <PeriodicTimeEvent occurrenceTime="7" type="EndOfWeek" />
    </Agent>
    <ExogenousEvent occurrenceTime="7" type="EndOfSystemWeek" />
    <ExogenousEvent occurrenceTime="1" type="CustomerDemand" />
  </InitialState>
  <UserInterface supportedLanguages="en de">
    <StatisticsUI>
      <StatisticsVariableUI comparisonGroup="Inventar" variable="customerDemand">
        <Label>
          <Text xml:lang="en">avg Customer Demand</Text>
          <Text xml:lang="de">Kundenbestellung</Text>
          <Text xml:lang="es">La demanda promedio de los clientes</Text>
          <Text xml:lang="fr">La demande moyenne du client</Text>
          <Text xml:lang="ro">Cantitatea medie comandata</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">Average amount of Beer the customer has ordered</Text>
          <Text xml:lang="de">Durchschnitt der Kundenbestellungen</Text>
          <Text xml:lang="es">La cantidad promedio de la cerveza que el cliente ha ordenado</Text>
          <Text xml:lang="fr">La demande moyenne de la bière que le client a commandé</Text>
          <Text xml:lang="ro">Cantitatea medie de bere comandata</Text>
        </Hint>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Inventar" variable="retailerInventory">
        <Label>
          <Text xml:lang="en">Retailer Inventory</Text>
          <Text xml:lang="de">Lagerbestand Einzelhändler</Text>
          <Text xml:lang="es">Inventario de existencias Minorista</Text>
          <Text xml:lang="fr">L'inventaire pour la vente au détail</Text>
          <Text xml:lang="ro">Inventarul stocurilor de vanzare cu amanuntul</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The quantity of beer the retailer has in stock</Text>
          <Text xml:lang="de">Die Menge Bier, die der Einzelhaendler im Lager hat</Text>
          <Text xml:lang="es">La cantidad de cerveza que el minorista tiene en almacén</Text>
          <Text xml:lang="fr">La quantité de bière que le détaillant a en stock</Text>
          <Text xml:lang="ro">Cantitatea de bere existenta in stocul de vanzare cu amanuntul</Text>
        </Hint>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Costs" variable="retailerCosts">
        <Label>
          <Text xml:lang="en">Retailer Costs</Text>
          <Text xml:lang="de">Kosten Einzelhändler</Text>
          <Text xml:lang="es">Coste Minorista</Text>
          <Text xml:lang="fr">Le coût de détail</Text>
          <Text xml:lang="ro">Costul cu amanuntul</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The cumulated costs of the retailer</Text>
          <Text xml:lang="de">Die aufsummierten Kosten des Einzelhändlers</Text>
          <Text xml:lang="es">El coste sumado del minorista</Text>
          <Text xml:lang="fr">Le coût total des ventes au détail</Text>
          <Text xml:lang="ro">Costul total al vanzarilor cu amanuntul</Text>
        </Hint>
        <Format decimalPlaces="2">
          <Currency>EUR(€)</Currency>
        </Format>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Inventar" variable="wholesalerInventory">
        <Label>
          <Text xml:lang="en">Wholesaler Inventory</Text>
          <Text xml:lang="de">Lagerbestand Großhändler</Text>
          <Text xml:lang="es">Inventario de existencias Mayorista</Text>
          <Text xml:lang="fr">L'inventaire du l'engrossiste</Text>
          <Text xml:lang="ro">Inventarul en gros</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The quantity of beer the wholesaler has in stock</Text>
          <Text xml:lang="de">Die Menge Bier, die der Großhändler im Lager hat</Text>
          <Text xml:lang="es">La cantidad de cerveza que el mayorista tiene en almacén</Text>
          <Text xml:lang="fr">La quantité de bière que l'engrossiste a en stock</Text>
          <Text xml:lang="ro">Cantitatea de bere existenta in stocul en gros</Text>
        </Hint>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Costs" variable="wholesalerCosts">
        <Label>
          <Text xml:lang="en">Wholesaler Costs</Text>
          <Text xml:lang="de">Kosten Großhändler</Text>
          <Text xml:lang="es">Coste Mayorista</Text>
          <Text xml:lang="fr">Le coût en gros</Text>
          <Text xml:lang="ro">Costul en gros</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The cumulated costs of the wholesaler</Text>
          <Text xml:lang="de">Die aufsummierten Kosten des Großhändlers</Text>
          <Text xml:lang="es">El coste sumado del mayorista</Text>
          <Text xml:lang="fr">Le coût total des ventes au gros</Text>
          <Text xml:lang="ro">Costul total al vanzarilor en gros</Text>
        </Hint>
        <Format decimalPlaces="2">
          <Currency>EUR(€)</Currency>
        </Format>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Inventar" variable="distributorInventory">
        <Label>
          <Text xml:lang="en">Distributor Inventory</Text>
          <Text xml:lang="de">Lagerbestand Distributeur</Text>
          <Text xml:lang="es">Inventario de existencias Distribuidor</Text>
          <Text xml:lang="fr">L'inventaire du distributeur</Text>
          <Text xml:lang="ro">Inventarul distribuitorului</Text>
        </Label>
        <Hint>
          <Text xml:lang="de">Die Menge Bier, die der Distributeur im Lager hat</Text>
          <Text xml:lang="en">The quantity of beer the distributor has in stock</Text>
          <Text xml:lang="es">La cantidad de cerveza distribuida</Text>
          <Text xml:lang="fr">La quantité de bière distribuée</Text>
          <Text xml:lang="ro">Cantitatea de bere distribuita</Text>
        </Hint>
      </StatisticsVariableUI>
      <StatisticsVariableUI comparisonGroup="Costs" variable="distributorCosts">
        <Label>
          <Text xml:lang="en">Distributor Costs</Text>
          <Text xml:lang="de">Kosten Distributeur</Text>
          <Text xml:lang="es">Coste Distribuidor</Text>
          <Text xml:lang="fr">Le coût de distribution</Text>
          <Text xml:lang="ro">Cost distribuitor</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The cumulated costs of the distributor</Text>
          <Text xml:lang="de">Die aufsummierten Kosten des Distributeuers</Text>
          <Text xml:lang="es">El coste sumado del distribuidor</Text>
          <Text xml:lang="fr">Le coût total de distribution de la bière</Text>
          <Text xml:lang="ro">Costul total al berii distribuite</Text>
        </Hint>
        <Format decimalPlaces="2">
          <Currency>EUR(€)</Currency>
        </Format>
      </StatisticsVariableUI>
      <StatisticsVariableUI variable="factoryDelivery">
        <Label>
          <Text xml:lang="en">Factory Delivery</Text>
          <Text xml:lang="de">Lieferung von Brauerei</Text>
          <Text xml:lang="es">Entrega de la cervezería</Text>
          <Text xml:lang="fr">Livraison de la brasserie</Text>
          <Text xml:lang="ro">Livrarea de la fabrica de bere</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The amount of rawmaterial by the factory</Text>
          <Text xml:lang="de">Anzahl an Rohmaterial von der Fabrik</Text>
          <Text xml:lang="es">La cantidad de materia prima de la empresa</Text>
          <Text xml:lang="fr">La quantité de bière livre par la brasserie</Text>
          <Text xml:lang="ro">Cantitatea de bere distribuita de fabrica</Text>
        </Hint>
      </StatisticsVariableUI>
      <StatisticsVariableUI variable="systemCosts">
        <Label>
          <Text xml:lang="en">System Costs</Text>
          <Text xml:lang="de">Gesamtkosten</Text>
          <Text xml:lang="es">Coste total</Text>
          <Text xml:lang="fr">Le coût total</Text>
          <Text xml:lang="ro">Cost sistem</Text>
        </Label>
        <Hint>
          <Text xml:lang="en">The costs of all supplychainnodes</Text>
          <Text xml:lang="de">Die Kosten aller Lieferkettenknoten</Text>
          <Text xml:lang="es">Coste total de la cadena de suministro</Text>
          <Text xml:lang="fr">Le coût total des noeuds de la chaîne d'approvisionnement</Text>
          <Text xml:lang="ro">Costul total al nodurilor din lanţul de aprovizionare</Text>
        </Hint>
        <Format decimalPlaces="2">
          <Currency>EUR(€)</Currency>
        </Format>
      </StatisticsVariableUI>
    </StatisticsUI>
    <AnimationUI>
      <aors:StartPageText xmlns="http://www.w3.org/1999/xhtml">
        <aors:HtmlText>
          <p>In this management simulation there is a <strong>beer supply chain</strong> consisting of four nodes: 
            Retailer, Wholesaler, Distributor	and Factory. Retailer, Wholesaler and Distributor have one upstream node 
            to order and receive beer	from, while Wholesaler, Distributor	and Factory have one downstream node 
            to receive orders from and deliver beer to. An order takes
            7 days and a delivery takes 14 days. At the end of a week every node decides how much beer
            to order and calculates its costs for current stock and outstanding orders.</p></aors:HtmlText>
        <aors:HtmlText xml:lang="de">
          <p>In diesem Planspiel geht es um eine <strong>Bier-Lieferkette</strong>, 
            die aus vier Knoten besteht: Brauerei, Distributionszentrum, Großhändler und Einzelhändler. 
            Distributionszentrum, Großhändler und Einzelhändler haben je einen Vorgängerknoten, bei dem sie Bier
            bestellen und von dem sie die Bierlieferungen erhalten. Brauerei, Distributionszentrum und Großhändler
            haben je einen Nachfolgerknoten, von dem sie Bestellungen erhalten und den sie mit Bier beliefern.
            Eine Bestellung kommt nach 7 Tagen an, während eine Lieferung erst nach 14 Tagen ankommt. Am Ende
            jeder Woche werden für jeden Knoten die angefallenen Kosten (für das Lager und die Nachlieferungen) aktualisiert 
            und Distributionszentrum,	Großhändler und Einzelhändler müssen entscheiden, wie viele Kästen Bier	sie 
            bestellen wollen.</p></aors:HtmlText>
      </aors:StartPageText>
      <aors:HelpText xmlns="http://www.w3.org/1999/xhtml">
        <aors:HtmlText>
          <p>In this management simulation there is a <strong>beer supply chain</strong> consisting of four nodes: 
          Retailer, Wholesaler, Distributor	and Factory. <br/>Retailer, Wholesaler and Distributor have one upstream node 
          to order and receive beer	from, while Wholesaler, Distributor	and Factory have one downstream node 
          to receive orders from and deliver beer to. <br/>An order takes
          7 days and a delivery takes 14 days.<br/>At the end of a week every node decides how much beer
          to order and calculates its costs for current stock and outstanding orders.</p></aors:HtmlText>
        <aors:HtmlText xml:lang="de">
          <p>In diesem Planspiel geht es um eine <strong>Bier-Lieferkette</strong>, 
          die aus vier Knoten besteht: Brauerei, Distributionszentrum, Großhändler und Einzelhändler. 
          Distributionszentrum, Großhändler und Einzelhändler haben je einen Vorgängerknoten, bei dem sie Bier
          bestellen und von dem sie die Bierlieferungen erhalten. <br/>Brauerei, Distributionszentrum und Großhändler
          haben je einen Nachfolgerknoten, von dem sie Bestellungen erhalten und den sie mit Bier beliefern.
          <br/>Eine Bestellung kommt nach 7 Tagen an, während eine Lieferung erst nach 14 Tagen ankommt. <br/>Am Ende
          jeder Woche werden für jeden Knoten die angefallenen Kosten (für das Lager und die Nachlieferungen) aktualisiert 
          und Distributionszentrum,	Großhändler und Einzelhändler müssen entscheiden, wie viele Kästen Bier	sie 
          bestellen wollen.</p></aors:HtmlText>
      </aors:HelpText>
      <Views>
        <SpaceView canvasColor="darkgrey" canvasHeight="743" canvasWidth="1156">
          <TwoDimensionalSpaceView2D />
        </SpaceView>
        <ObjectView displayID="false" displayName="true" objectIdRef="1">
          <Shape2D x="1000px" y="200px">
            <Rectangle width="150" height="170" texture="factory.png" />
          </Shape2D>
          <AttachedShape2D offsetX="0px" offsetY="-100px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck.png" />
            </Shape2D>
          </AttachedShape2D>
        </ObjectView>
        <ObjectView displayID="false" displayName="true" objectIdRef="2">
          <Shape2D x="750px" y="200px">
            <Rectangle width="150" height="150" texture="distributor.png" />
          </Shape2D>
          <AttachedShape2D offsetX="150px" offsetY="-130px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck_flip.png" />
            </Shape2D>
          </AttachedShape2D>
        </ObjectView>
        <ObjectView displayID="false" displayName="true" objectIdRef="3">
          <Shape2D x="500px" y="220px">
            <Rectangle width="150" height="120" texture="wholesaler.png" />
          </Shape2D>
          <AttachedShape2D offsetX="0px" offsetY="-100px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck.png" />
            </Shape2D>
          </AttachedShape2D>
          <AttachedShape2D offsetX="150px" offsetY="-140px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck_flip.png" />
            </Shape2D>
          </AttachedShape2D>
        </ObjectView>
        <ObjectView displayID="false" displayName="true" objectIdRef="4">
          <Shape2D x="250px" y="220px">
            <Rectangle width="150" height="100" texture="retailer.png" />
          </Shape2D>
          <AttachedShape2D offsetX="0px" offsetY="-95px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck.png" />
            </Shape2D>
          </AttachedShape2D>
          <AttachedShape2D offsetX="150px" offsetY="-130px">
            <Shape2D>
              <Rectangle width="75" height="55" texture="truck_flip.png" />
            </Shape2D>
          </AttachedShape2D>
        </ObjectView>
        <ObjectView displayID="false" displayName="true" objectIdRef="5">
          <Shape2D x="75px" y="220px">
            <Rectangle width="100" height="100" texture="customer.png" />
          </Shape2D>
          <DisplayInfo content="beer unit(s)" property="order" />
        </ObjectView>
        
        <EventAppearance eventType="EndOfSystemWeek">
          <Sound soundFile="end_of_week"/>
        </EventAppearance>
      </Views>
    </AnimationUI>
  </UserInterface>
</SimulationScenario>
