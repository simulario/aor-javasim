<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
	xmlns="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/" 
	xmlns:aors="http://aor-simulation.org"
	version="0.8.4" scenarioName="ThiefAndPolice" 
	scenarioTitle="Thief and Police in traffic simulation"
	simulationManagerDirectory="../../..">
	
	<SimulationParameters simulationSteps="10000" stepDuration="1" stepTimeDelay="50"/>
	
	<SimulationModel modelName="ThiefAndPolice" modelTitle="ThiefAndPolice">
		<documentation>
			<dc:created>20100313</dc:created>
			<dc:creator>Thimo HÃ¶rster</dc:creator>
			<dc:source>Based on a scenario distributed at the master thesis of ...</dc:source>
			<dc:description>Thief and Police describes a gridbased street scenario. The thief agent trys to rob the bank and trys to escape to a hideout afterwards. Meanwhile police cars are on patrol and chase the thief, trying to surround him, if percepted.</dc:description>
		</documentation> 
  		 		
		<SpaceModel geometry="Euclidean" spatialDistanceUnit="km">
			<TwoDimensionalGrid xMax="29" yMax="29" startCountingWithZero="false">
				<GridCellProperty name="cellType" type="Integer" />  <!-- 0 = none; 1 = street; 2 = crossing -->
				<GridCellProperty name="crossingType" type="Integer"/> <!-- 1 = NESW; 2 = NES; 3 = NEW; 4 = NSW; 5 = ESW; 6 = NE; 7 = NW; 8 = SE; 9 = SW; -->
				<GridCellProperty name="carID" type="Integer"/> <!-- to be replaced -->
			</TwoDimensionalGrid>
		</SpaceModel>
		
		<Statistics>
			<Variable name="thief_win" dataType="Integer"><Source><ObjectProperty property="thiefWin" objectType="Thief"/></Source></Variable>
			<Variable name="thief_lose" dataType="Integer"><Source><ObjectProperty property="thiefLose" objectType="Thief"/></Source></Variable>
			<Variable name="steps_per_distance" dataType="Float"><Source><ObjectProperty property="stepsPerDistance" objectType="Traffic"/></Source></Variable>
			<Variable name="starting_distance" dataType="Integer"><Source><ObjectProperty property="startingDistance" objectType="Traffic"/></Source></Variable>
			<Variable name="timesteps" dataType="Integer"><Source><ObjectProperty property="timeSteps" objectType="Traffic"/></Source></Variable>
			<Variable name="distance_to_target" dataType="Float"><Source><ObjectProperty property="distanceToTarget" objectType="Traffic"/></Source></Variable>
			<Variable name="distance_to_police" dataType="Float"><Source><ObjectProperty property="lastDistanceToPolice" objectType="Thief"/></Source></Variable>
			<Variable name="last_police_x" dataType="Integer"><Source><ObjectProperty property="lastPoliceX" objectType="Thief"/></Source></Variable>
			<Variable name="last_police_y" dataType="Integer"><Source><ObjectProperty property="lastPoliceY" objectType="Thief"/></Source></Variable>
			<Variable name="reward" dataType="Integer"><Source><ObjectProperty property="reward" objectType="Car"/></Source></Variable>
			<Variable name="value_1" dataType="Float"><Source><ObjectProperty property="value1" objectType="Car"/></Source></Variable>
			<Variable name="value_2" dataType="Float"><Source><ObjectProperty property="value2" objectType="Car"/></Source></Variable>
			<Variable name="value_3" dataType="Float"><Source><ObjectProperty property="value3" objectType="Car"/></Source></Variable>
			<Variable name="value_4" dataType="Float"><Source><ObjectProperty property="value4" objectType="Car"/></Source></Variable>
		</Statistics>
	
		<DataTypes>
			<Enumeration name="Direction4">
				<EnumerationLiteral>N</EnumerationLiteral>
				<EnumerationLiteral>E</EnumerationLiteral>
				<EnumerationLiteral>S</EnumerationLiteral>
				<EnumerationLiteral>W</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="ThiefState">
				<EnumerationLiteral>BANK</EnumerationLiteral>
				<EnumerationLiteral>CHASE</EnumerationLiteral>
				<EnumerationLiteral>ROBBING</EnumerationLiteral>
				<EnumerationLiteral>HIDEOUT</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="PoliceState">
				<EnumerationLiteral>PATROL</EnumerationLiteral>
				<EnumerationLiteral>CHASE</EnumerationLiteral>
				<EnumerationLiteral>BLOCK</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="TrafficState">
				<EnumerationLiteral>START</EnumerationLiteral>
				<EnumerationLiteral>DESTINATION</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="LearningModes">
				<EnumerationLiteral>LA</EnumerationLiteral>
				<EnumerationLiteral>QL</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="ActionChoices">
				<EnumerationLiteral>RANDOM</EnumerationLiteral>
				<EnumerationLiteral>MAX</EnumerationLiteral>
			</Enumeration>
			<ComplexDataType name="LA_ProbabilityMatrix_16_8_4">
				<ClassDef language="Java">
					<![CDATA[
					private double[][][] P = new double[16][8][4];
					double alpha = 0.99;
					private int subState1 = 0;
					private int subState2 = 0;
					private int action = 0;

					public LA_ProbabilityMatrix_16_8_4() {
						for (int i=0; i < 16; i++) {
							for (int j=0; j < 8; j++) {
								for (int k=0; k < 4; k++) {
									P[i][j][k] = 0.25;
								}
							}
						}
					}
					
					public double getValue(long r, long s, long c) {
						return P[(int)r-1][(int)s-1][(int)c-1];
					}
					
					public int randomIndex(long r, long s) {
						subState1 = (int)r - 1;
					  	subState2 = (int)s - 1;
						action = 0;
						double[] test = new double[4];
						
						for (int j=0; j < 4; j++) {
							test[j] = Math.random() * P[subState1][subState2][j];
						}
						
						for (int i=1; i < 4; i++) {
							if (test[i] > test[action]) {
								action = i;
							}
						}
						
						return action + 1;
					}
					
					public int maxIndex(long r, long s) {
					  	subState1 = (int)r - 1;
					  	subState2 = (int)s - 1;
						action = 0;
						for (int j=1; j < 4; j++) { 
							if (P[subState1][subState2][j] > P[subState1][subState2][action]) {
								action = j;
							}
						}
						return action + 1;
					}
					
					public void update(double reward, long policy) {			
						switch ((int)policy) {
							case 0: 
								if (reward > 0) { this.successUpdate();	}
								if (reward < 0) { this.failureUpdate(); }
								break;
							case 1:
								if (reward >  0) { this.successUpdate(); }
								if (reward <  0) { this.failureUpdate(); }
								if (reward == 0) { this.successUpdate(); }
								break;
							case 2:
								if (reward >  0) { this.successUpdate(); }
								if (reward <  0) { this.failureUpdate(); }
								if (reward == 0) { this.failureUpdate(); }
								break;
							case 3:
								if (reward >  0) { this.successUpdate(); }
								break;
							case 4:
								if (reward <  0) { this.failureUpdate(); }
								break;
						}
					}
					
					public void successUpdate() {
						P[subState1][subState2][action] = P[subState1][subState2][action] + alpha * (1 - P[subState1][subState2][action]);
						for (int j=0; j < 4; j++) { 
							if (j != action) {
								P[subState1][subState2][j] = (1-alpha)*P[subState1][subState2][j];
							}
						}
						this.normalize();
					}
					
					public void failureUpdate() {
						P[subState1][subState2][action] = P[subState1][subState2][action] * (1-alpha);
						for (int j=0; j < 4; j++) { 
							if (j != action) {
								P[subState1][subState2][j] = ((alpha/3)+1)*P[subState1][subState2][j];
							}
						}
						this.normalize();
					}
					
					private void normalize() {
						double action_sum = 0;
						for (int j=0; j < 4; j++) { 
							action_sum = action_sum + P[subState1][subState2][j];
						}

						for (int j=0; j < 4; j++) { 
							P[subState1][subState2][j] = P[subState1][subState2][j] / action_sum;
						}
					}
					]]>
				</ClassDef>
			</ComplexDataType>
			<ComplexDataType name="QL_ProbabilityMatrix_16_8_4">
				<ClassDef language="Java">
					<![CDATA[
					private double[][][] Q = new double[16][8][4];
					double alpha = 0.05;
					double gamma = 0.5;
					private int subState1 = 0;
					private int subState2 = 0;
					private int action = 0;
					
					public QL_ProbabilityMatrix_16_8_4() {
						for (int i=0; i < 16; i++) {
							for (int j=0; j < 8; j++) {
								for (int k=0; k < 4; k++) {
									Q[i][j][k] = 0.25;
								}
							}
						}
					}
					
					public double getValue(long r, long s, long c) {
						return Q[(int)r-1][(int)s-1][(int)c-1];
					}
					
					public int randomIndex(long r, long s) {
						subState1 = (int)r - 1;
					  	subState2 = (int)s - 1;
						action = 0;
						double[] test = new double[4];
						
						for (int j=0; j < 4; j++) {
							test[j] = Math.random() * Q[subState1][subState2][j];
						}
						
						for (int i=1; i < 4; i++) {
							if (test[i] > test[action]) {
								action = i;
							}
						}
						
						return action + 1;
					}
					
					public int maxIndex(long r, long s) {
						subState1 = (int)r - 1;
					  	subState2 = (int)s - 1;
						action = 0;
						
						for (int j=1; j < 4; j++) {
							if (Q[subState1][subState2][j] > Q[subState1][subState2][action]) {
								action = j;
							}
						}
						
						return action + 1;
					}
					
					public double maxValue(long r, long s) {
						int nextSubstate1 = (int)r - 1;
					  	int nextSubstate2 = (int)s - 1;
						int bestAction = 0;
						for (int j=1; j < 4; j++) { 
							if (Q[nextSubstate1][nextSubstate2][j] > Q[nextSubstate1][nextSubstate2][bestAction]) {
								bestAction = j;
							}
						}
						return Q[nextSubstate1][nextSubstate2][bestAction];
					}
					
					public void update(long nextSubState1, long nextSubstate2, double reward) {
						// Q(a,s) = Q(a,s) + alpha * (reward + gamma * max{Q(a',s')} - Q(a,s))
						Q[subState1][subState2][action] = Q[subState1][subState2][action] + alpha * (reward + gamma * this.maxValue(nextSubState1, nextSubstate2) - Q[subState1][subState2][action]);
						//this.normalize();
					}
					
					public void normalize() {
						int min_action = 0;
						for (int j=1; j < 4; j++) { 
							if (Q[subState1][subState2][j] < Q[subState1][subState2][min_action]) {
								min_action = j;
							}
						}
						
						if (Q[subState1][subState2][min_action] < 0) {
							for (int j=0; j < 4; j++) { 
								Q[subState1][subState2][j] = Q[subState1][subState2][j] + Math.abs(Q[subState1][subState2][min_action]) + 0.00001;
							}
						}
						
						
						double action_sum = 0;
						for (int j=0; j < 4; j++) { 
							action_sum = action_sum + Q[subState1][subState2][j];
						}

						for (int j=0; j < 4; j++) { 
							Q[subState1][subState2][j] = Q[subState1][subState2][j] / action_sum;
						}
					}
					]]>
				</ClassDef>
			</ComplexDataType>
		</DataTypes>
		
		<EntityTypes>
			<MessageType name="TellTarget">
				<documentation>
					<dc:description>Message created by the police station, sending coordinates to each police car.</dc:description>
				</documentation>
				<Attribute name="thiefX" type="Integer"/>
				<Attribute name="thiefY" type="Integer"/>
			</MessageType>
			<MessageType name="TellStation">
				<documentation>
					<dc:description>Message created by police car and send to the policestation.</dc:description>
				</documentation>
				<Attribute name="thiefX" type="Integer"/>
				<Attribute name="thiefY" type="Integer"/>
			</MessageType>
			<MessageType name="AbortChase" >
				<documentation>
					<dc:description>Message created by the policestation, sending abort chase order to each police car.</dc:description>
				</documentation>
			</MessageType>
			
			<PerceptionEventType name="PrepareToAct"/>
			
			<!-- Car -->		
			<PhysicalAgentType name="Car">
				<documentation>
					<dc:description>Supertype of police and thief with all needed basic attributes and functions.</dc:description>
				</documentation>
				
				<EnumerationProperty name="comingFrom" type="Direction4"/>
				<EnumerationProperty name="direction" type="Direction4"/>
				<Attribute type="Integer" name="destinationX"/>
				<Attribute type="Integer" name="destinationY"/>
				<Attribute type="Float" name="speed"/>
				<Attribute type="Float" name="normalSpeed"/>
				<Attribute type="Float" name="chaseSpeed"/>
				<Attribute type="Float" name="progressInCell"/>
				
				<Attribute type="Float" name="value1"/>
				<Attribute type="Float" name="value2"/>
				<Attribute type="Float" name="value3"/>
				<Attribute type="Float" name="value4"/>
				<Attribute type="Float" name="reward"/>
				
				<Function name="getDirectionRandom" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int cellType = (int)Simulator.spaceModel.getGridCell((int)this.getX(), (int)this.getY()).getCellType();
						Direction4 dir4 = Direction4.N;
						
						if (cellType == 2) {
							dir4 = this.getCrossingDirectionRandom();
						} else {
							dir4 = this.getStreetDirection();
						}
						
						return dir4;						
						]]>
					</Body>
				</Function>
				<Function name="getCrossingDirectionRandom" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						int crossType = (int)Simulator.spaceModel.getGridCell(xCurrent, yCurrent).getCrossingType();
						Direction4 dir4 = Direction4.N;
						
						if (crossType == 1) {
							int random = Random.uniformInt(0,3);
							switch (random) {
								case 0: dir4 = Direction4.N; break;
								case 1: dir4 = Direction4.E; break;
								case 2: dir4 = Direction4.S; break;
								case 3: dir4 = Direction4.W; break;
							}
						}
						
						if (crossType == 2) {
							int random = Random.uniformInt(0,2);
							switch (random) {
								case 0: dir4 = Direction4.N; break;
								case 1: dir4 = Direction4.E; break;
								case 2: dir4 = Direction4.S; break;
							}
						}
						
						if (crossType == 3) {
							int random = Random.uniformInt(0,2);
							switch (random) {
								case 0: dir4 = Direction4.N; break;
								case 1: dir4 = Direction4.E; break;
								case 2: dir4 = Direction4.W; break;
							}
						}
						
						if (crossType == 4) {
							int random = Random.uniformInt(0,2);
							switch (random) {
								case 0: dir4 = Direction4.N; break;
								case 1: dir4 = Direction4.S; break;
								case 2: dir4 = Direction4.W; break;
							}
						}
						
						if (crossType == 5) {
							int random = Random.uniformInt(0,2);
							switch (random) {
								case 0: dir4 = Direction4.E; break;
								case 1: dir4 = Direction4.S; break;
								case 2: dir4 = Direction4.W; break;
							}
						}						
						
						if (dir4 == this.getComingFrom()) {
							dir4 = getCrossingDirectionRandom();
						}
						
						return dir4;				
						]]>
					</Body>
				</Function>
				<Function name="getStreetDirection" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						Direction4 dir4 = Direction4.N;
						int nextCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + (int)this.getOffsetX(), yCurrent + (int)this.getOffsetY()).getCellType();
						int northCellType = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent + 1).getCellType();
						int eastCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + 1, yCurrent + 0).getCellType();
						int southCellType = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent - 1).getCellType();
						int westCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent - 1, yCurrent + 0).getCellType();
						
						if (nextCellType == 0) {
							switch (this.getDirection()) {
								case N: if (eastCellType == 1) { dir4 = Direction4.E; break; }
										if (westCellType == 1) { dir4 = Direction4.W; break; }
										dir4 = this.getComingFrom();
										break;
								case E: if (northCellType == 1) { dir4 = Direction4.N; break; }
										if (southCellType == 1) { dir4 = Direction4.S; break; }
										dir4 = this.getComingFrom();
										break;
								case S: if (eastCellType == 1) { dir4 = Direction4.E; break; }
										if (westCellType == 1) { dir4 = Direction4.W; break; }
										dir4 = this.getComingFrom();
										break;
								case W: if (northCellType == 1) { dir4 = Direction4.N; break; }
										if (southCellType == 1) { dir4 = Direction4.S; break; }
										dir4 = this.getComingFrom();
										break;
							}
						} else {
							dir4 = this.getDirection();
						}
						
						return dir4;
						]]>
					</Body>
				</Function>
				<Function name="setComingFrom" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						Direction4 dir4 = Direction4.N;
						if (this.getDirection() == Direction4.N) { dir4 = Direction4.S; }
						if (this.getDirection() == Direction4.E) { dir4 = Direction4.W; }
						if (this.getDirection() == Direction4.S) { dir4 = Direction4.N; }
						if (this.getDirection() == Direction4.W) { dir4 = Direction4.E; }
						
						return dir4;
						]]>
					</Body>
				</Function>
				<Function name="getOffsetX" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int offsetX = 0;
						switch (this.getDirection()) {
							case N: offsetX = 0; break;
							case E: offsetX = 1; break;
							case S: offsetX = 0; break;
							case W: offsetX = -1; break;
							default: offsetX = 0;
						}
						
						if (offsetX < 0) {
							offsetX = (int)Math.ceil(offsetX * this.getProgressInCell());
						}
						
						if (offsetX > 0) {
							offsetX = (int)Math.floor(offsetX * this.getProgressInCell());
						}
						
						return offsetX;
		          		]]>
					</Body>
				</Function>
				<Function name="getOffsetY" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int offsetY = 0;
						switch (this.getDirection()) {
							case N: offsetY = 1; break;
							case E: offsetY = 0; break;
							case S: offsetY = -1; break;
							case W: offsetY = 0; break;
							default: offsetY = 0;
						}
						
						if (offsetY < 0) {
							offsetY = (int)Math.ceil(offsetY * this.getProgressInCell());
						}
						
						if (offsetY > 0) {
							offsetY = (int)Math.floor(offsetY * this.getProgressInCell());
						}
						
						return offsetY;
						]]>
					</Body>
				</Function>				
				<Function name="getDirectionWithDestination" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int cellType = (int)Simulator.spaceModel.getGridCell((int)this.getX(), (int)this.getY()).getCellType();
						Direction4 dir4 = Direction4.N;
						
						if (cellType == 2) {
							dir4 = this.getCrossingDirectionWithDestination();
						} else {
							dir4 = this.getStreetDirectionWithDestination();
						}
						
						return dir4;
						]]>
					</Body>
				</Function>
				<Function name="getCrossingDirectionWithDestination" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						int crossType = (int)Simulator.spaceModel.getGridCell(xCurrent, yCurrent).getCrossingType();
						Direction4 dir4 = Direction4.N;
						int distanceNorth = (int)this.getDistanceToDestination(xCurrent + 0, yCurrent + 1);
						int distanceEast  = (int)this.getDistanceToDestination(xCurrent + 1, yCurrent + 0);
						int distanceSouth = (int)this.getDistanceToDestination(xCurrent + 0, yCurrent - 1);
						int distanceWest  = (int)this.getDistanceToDestination(xCurrent - 1, yCurrent + 0);
						
						if (crossType == 1) {							
							if (distanceNorth <= distanceEast && distanceNorth <= distanceSouth && distanceNorth <= distanceWest) {
								dir4 = Direction4.N;
							}
							
							if (distanceEast <= distanceNorth && distanceEast <= distanceSouth && distanceEast <= distanceWest) {
								dir4 = Direction4.E;
							}
							
							if (distanceSouth <= distanceNorth && distanceSouth <= distanceEast && distanceSouth <= distanceWest) {
								dir4 = Direction4.S;
							}
							
							if (distanceWest <= distanceNorth && distanceWest <= distanceEast && distanceWest <= distanceSouth) {
								dir4 = Direction4.W;
							}
						}
						
						if (crossType == 2) {							
							if (distanceNorth <= distanceEast && distanceNorth <= distanceSouth) {
								dir4 = Direction4.N;
							}
							
							if (distanceEast <= distanceNorth && distanceEast <= distanceSouth) {
								dir4 = Direction4.E;
							}
							
							if (distanceSouth <= distanceNorth && distanceSouth <= distanceEast) {
								dir4 = Direction4.S;
							}
						}
						
						if (crossType == 3) {							
							if (distanceNorth <= distanceEast && distanceNorth <= distanceWest) {
								dir4 = Direction4.N;
							}
							
							if (distanceEast <= distanceNorth && distanceEast <= distanceWest) {
								dir4 = Direction4.E;
							}
							
							if (distanceWest <= distanceNorth && distanceWest <= distanceEast) {
								dir4 = Direction4.W;
							}
						}
						
						if (crossType == 4) {
							if (distanceNorth <= distanceSouth && distanceNorth <= distanceWest) {
								dir4 = Direction4.N;
							}
							
							if (distanceSouth <= distanceNorth && distanceSouth <= distanceWest) {
								dir4 = Direction4.S;
							}
							
							if (distanceWest <= distanceNorth && distanceWest <= distanceSouth) {
								dir4 = Direction4.W;
							}
						}
						
						if (crossType == 5) {
							if (distanceEast <= distanceSouth && distanceEast <= distanceWest) {
								dir4 = Direction4.E;
							}
							
							if (distanceSouth <= distanceEast && distanceSouth <= distanceWest) {
								dir4 = Direction4.S;
							}
							
							if (distanceWest <= distanceEast && distanceWest <= distanceSouth) {
								dir4 = Direction4.W;
							}
						}				
						
						return dir4;
						]]>
					</Body>
				</Function>
				<Function name="getStreetDirectionWithDestination" resultType="Direction4">
					<Body language="Java">
						<![CDATA[
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						Direction4 dir4 = Direction4.N;
						Direction4 dir4_2 = Direction4.N;
						Direction4 dir4_3 = Direction4.N;
						int distanceNorth = (int)this.getDistanceToDestination(xCurrent + 0, yCurrent + 1);
						int distanceEast  = (int)this.getDistanceToDestination(xCurrent + 1, yCurrent + 0);
						int distanceSouth = (int)this.getDistanceToDestination(xCurrent + 0, yCurrent - 1);
						int distanceWest  = (int)this.getDistanceToDestination(xCurrent - 1, yCurrent + 0);
						
						dir4_3 = this.getStreetDirection();
						dir4_2 = this.setComingFrom();
						
						switch (dir4_3) {
							case N:	
								switch (dir4_2) {
									case N:	dir4 = Direction4.N;
											break;
									case E:	if (distanceNorth <= distanceEast) { dir4 = Direction4.N; } else { dir4 = Direction4.E; }
											break;
									case W:	if (distanceNorth <= distanceWest) { dir4 = Direction4.N; } else { dir4 = Direction4.W; }
											break;
									case S:	if (distanceNorth <= distanceSouth) { dir4 = Direction4.N; } else { dir4 = Direction4.S; }
											break;
								}
								break;
							case E:
								switch (dir4_2) {
									case N:	if (distanceEast <= distanceNorth) { dir4 = Direction4.E; } else { dir4 = Direction4.N; }
											break;
									case E:	dir4 = Direction4.E;
											break;
									case W:	if (distanceEast <= distanceWest) { dir4 = Direction4.E; } else { dir4 = Direction4.W; }
											break;
									case S:	if (distanceEast <= distanceSouth) { dir4 = Direction4.E; } else { dir4 = Direction4.S; }
											break;
								}
								break;
							case W:
								switch (dir4_2) {
									case N:	if (distanceWest <= distanceNorth) { dir4 = Direction4.W; } else { dir4 = Direction4.N; }
											break;
									case E:	if (distanceWest <= distanceEast) { dir4 = Direction4.W; } else { dir4 = Direction4.E; }
											break;
									case W:	dir4 = Direction4.W;
											break;
									case S:	if (distanceWest <= distanceSouth) { dir4 = Direction4.W; } else { dir4 = Direction4.S; }
											break;
								}
								break;
							case S:
								switch (dir4_2) {
									case N:	if (distanceSouth <= distanceNorth) { dir4 = Direction4.S; } else { dir4 = Direction4.N; }
											break;
									case E:	if (distanceSouth <= distanceEast) { dir4 = Direction4.S; } else { dir4 = Direction4.E; }
											break;
									case W:	if (distanceSouth <= distanceWest) { dir4 = Direction4.S; } else { dir4 = Direction4.W; }
											break;
									case S:	dir4 = Direction4.S;
											break;
								}
								break;
						}
						
						return dir4;						
						]]>
						</Body>
				</Function>	
				<Function name="getDistanceToDestination" resultType="Float">
					<Parameter name="xPos" type="Integer"/>
					<Parameter name="yPos" type="Integer"/>
					<Body language="Java">
						<![CDATA[
						double distance = 0;	
						int destX = (int)this.getDestinationX();
						int destY = (int)this.getDestinationY();
						
						distance = (double)(destX - xPos)*(double)(destX - xPos) + (double)(destY - yPos)*(double)(destY - yPos);
						distance = Math.sqrt(distance);
						
						return distance;
						]]>						
					</Body>
				</Function>
				<Function name="getDistanceToXY" resultType="Float">
					<Parameter name="x" type="Integer"/>
					<Parameter name="y" type="Integer"/>
					<Body language="Java">
						<![CDATA[
						double distance = 0;	
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						
						distance = (double)(x - xCurrent)*(double)(x - xCurrent) + (double)(y - yCurrent)*(double)(y - yCurrent);
						distance = Math.sqrt(distance);
						
						return distance;
						]]>						
					</Body>
				</Function>
				<Function name="atDestination" resultType="Boolean">
					<Body language="Java">
						<![CDATA[
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						
						if (xCurrent == (int)this.getDestinationX() && yCurrent == (int)this.getDestinationY()) {
							return true;
						}
						
						return false;
						]]>
					</Body>
				</Function>
				<Function name="setProgressInCell" resultType="Float">
					<Body language="Java">
						<![CDATA[
							float progress = 0;
							
							progress = (float)this.getProgressInCell() - (float)Math.floor(this.getProgressInCell());
							progress = (float)progress + (float)this.getSpeed();
							
							return progress;
						]]>
					</Body>
				</Function>								
				<Function name="actionToDirection" resultType="Direction4">
					<Parameter name="action" type="Integer"/>
					<Body language="Java">
						<![CDATA[
						Direction4 dir4 = Direction4.N;
						
						switch ((int)action) {
							case 1: dir4 = Direction4.N;
									break;
							case 2: dir4 = Direction4.E;
									break;
							case 3: dir4 = Direction4.S;
									break;
							case 4: dir4 = Direction4.W;
									break;
						}
						
						return dir4;
						]]>
					</Body>
				</Function>
			</PhysicalAgentType>
			
			<!-- Thief -->
			<PhysicalAgentType name="Thief" superType="Car">
				<EnumerationProperty name="currentState" type="ThiefState"/>
				<EnumerationProperty name="learningMode" type="LearningModes"/>
				<EnumerationProperty name="actionChoice" type="ActionChoices"/>
				<Attribute type="Integer" name="observeRange"/>
				<Attribute type="Integer" name="robTime"/>
				<Attribute type="Integer" name="currentRobTime"/>
				<Attribute type="Float" name="lastDistanceToPolice"/>
				<Attribute type="Integer" name="lastPoliceX"/>
				<Attribute type="Integer" name="lastPoliceY"/>
				<Attribute type="Integer" name="thiefWin"/>
				<Attribute type="Integer" name="thiefLose"/>
				<ComplexDataProperty name="ProbMatLA" type="LA_ProbabilityMatrix_16_8_4"/>
				<ComplexDataProperty name="ProbMatQL" type="QL_ProbabilityMatrix_16_8_4"/>
				
				<Function name="perceptPolice" resultType="Boolean">
					<Body language="Java">
						<![CDATA[
							int carID = 0;
							int i = 0;
							int j = 0;
							int gridX = 0;
							int gridY = 0;
							
							for (i = (int)this.getObserveRange() * -1; i <= (int)this.getObserveRange(); i++) {								
								for (j = (int)this.getObserveRange() * -1; j <= (int)this.getObserveRange(); j++) {
									
									gridX = (int)this.getX() + i;
									gridY = (int)this.getY() + j;
									
									if (gridX < 1  ) { gridX = 1;  }
									if (gridX > 29 ) { gridX = 29; }
									if (gridY < 1  ) { gridY = 1;  }
									if (gridY > 29 ) { gridY = 29; }
									
									carID = (int)Simulator.spaceModel.getGridCell(gridX, gridY).getCarID();
									
									if (carID > 1 && carID < 98) {
										return true;
									}
								}
							}					
							
							return false;
						]]>
					</Body>
				</Function>
				<Function name="getNearestPoliceXY" resultType="Integer">
					<Parameter name="XY" type="String"/>
					<Body language="Java">
						<![CDATA[
							int carID = 0;
							int i = 0;
							int j = 0;
							int gridX = 0;
							int gridY = 0;
							double distance = -1;
							int nearestPoliceX = 0;
							int nearestPoliceY = 0;
							int result = 0;

							for (i = (int)this.getObserveRange() * -1; i < (int)this.getObserveRange(); i++) {								
								for (j = (int)this.getObserveRange() * -1; j < (int)this.getObserveRange(); j++) {
									
									gridX = (int)this.getX() + i;
									gridY = (int)this.getY() + j;
									
									if (gridX < 1  ) { gridX = 1;  }
									if (gridX > 29 ) { gridX = 29; }
									if (gridY < 1  ) { gridY = 1;  }
									if (gridY > 29 ) { gridY = 29; }
									
									carID = (int)Simulator.spaceModel.getGridCell(gridX, gridY).getCarID();	
									
									if (carID > 1 && carID < 98) {
										if (distance > (double)this.getDistanceToXY((int)this.getX() + i,(int)this.getY() + j) || distance == -1) {
											distance = (double)this.getDistanceToXY((int)this.getX() + i,(int)this.getY() + j);
											nearestPoliceX = (int)this.getX() + i;
											nearestPoliceY = (int)this.getY() + j;
										}
									}
								}
							}					
							
							if (XY == "X") {
								result = nearestPoliceX;
							}
							if (XY == "Y") {
								result = nearestPoliceY;
							}
														
							return result; 
						]]>
					</Body>
				</Function>
				<Function name="hasRobbed" resultType="Boolean">
					<Body language="Java">
						<![CDATA[
						if ((int)this.getRobTime() == (int)this.getCurrentRobTime()) {
							return true;
						}
						
						return false;						
						]]>
					</Body>
				</Function>
				<Function name="resolveSubState1" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						int northCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent + 1).getCellType();
						int eastCellType   = (int)Simulator.spaceModel.getGridCell(xCurrent + 1, yCurrent + 0).getCellType();
						int southCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent - 1).getCellType();
						int westCellType   = (int)Simulator.spaceModel.getGridCell(xCurrent - 1, yCurrent + 0).getCellType();
						int northCellCarID = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent + 1).getCarID();
						int eastCellCarID  = (int)Simulator.spaceModel.getGridCell(xCurrent + 1, yCurrent + 0).getCarID();
						int southCellCarID = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent - 1).getCarID();
						int westCellCarID  = (int)Simulator.spaceModel.getGridCell(xCurrent - 1, yCurrent + 0).getCarID();
						
						if (northCellType != 0 && eastCellType != 0 && southCellType != 0 && westCellType != 0) {
							result = 1;

							if (northCellCarID != 0 && eastCellCarID != 0 && southCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType != 0 && westCellType == 0) {
							result = 2;
							
							if (northCellCarID != 0 && eastCellCarID != 0 && southCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType == 0 && westCellType != 0) {
							result = 3;
							
							if (northCellCarID != 0 && eastCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType != 0 && westCellType != 0) {
							result = 4;
							
							if (northCellCarID != 0 && southCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType != 0 && westCellType != 0) {
							result = 5;
							
							if (eastCellCarID != 0 && southCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType == 0 && westCellType == 0) {
							result = 6;
							
							if (northCellCarID != 0 && eastCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType != 0 && westCellType == 0) {
							result = 7;
							
							if (northCellCarID != 0 && southCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType == 0 && westCellType != 0) {
							result = 8;
							
							if (northCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType != 0 && westCellType == 0) {
							result = 9;
							
							if (eastCellCarID != 0 && southCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType == 0 && westCellType != 0) {
							result = 10;
							
							if (eastCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType != 0 && westCellType != 0) {
							result = 11;
							
							if (southCellCarID != 0 && westCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType == 0 && westCellType == 0) {
							result = 12;
							
							if (northCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType == 0 && westCellType == 0) {
							result = 13;
							
							if (eastCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType != 0 && westCellType == 0) {
							result = 14;
						
							if (southCellCarID != 0) {  
								result = 16;
							}
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType == 0 && westCellType != 0) {
							result = 15;
							
							if (westCellCarID != 0) {  
								result = 16;
							}
						}
						
						return (int)result;
						]]>
					</Body>
				</Function>
				<Function name="resolveSubState2" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 1;
						int posX = (int)this.getX();
						int posY = (int)this.getY();
						int policeX = (int)this.getNearestPoliceXY("X");
						int policeY = (int)this.getNearestPoliceXY("Y");
						int relPosX = posX - policeX;
						int relPosY = posY - policeY;
						
						if (relPosX == 0 && relPosY < 0) {
							result = 1;
						}
						if (relPosX < 0 && relPosY < 0) {
							result = 2;
						}
						if (relPosX < 0 && relPosY == 0) {
							result = 3;
						}
						if (relPosX < 0 && relPosY > 0) {
							result = 4;
						}
						if (relPosX == 0 && relPosY > 0) {
							result = 5;
						}
						if (relPosX > 0 && relPosY > 0) {
							result = 6;
						}
						if (relPosX > 0 && relPosY == 0) {
							result = 7;
						}
						if (relPosX > 0 && relPosY < 0) {
							result = 8;
						}
						
						return result;
						]]>
					</Body>
				</Function>
				<Function name="resolveAction" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						
						if (this.getLearningMode() == LearningModes.LA) {
							if (this.getActionChoice() == ActionChoices.RANDOM) {
								result = (int)this.getProbMatLA().randomIndex(this.resolveSubState1(), this.resolveSubState2());
							}
							if (this.getActionChoice() == ActionChoices.MAX) {
								result = (int)this.getProbMatLA().maxIndex(this.resolveSubState1(), this.resolveSubState2());
							}							
						}
						if (this.getLearningMode() == LearningModes.QL) {
							if (this.getActionChoice() == ActionChoices.RANDOM) {
								result = (int)this.getProbMatQL().randomIndex(this.resolveSubState1(), this.resolveSubState2());
							}
							if (this.getActionChoice() == ActionChoices.MAX) {
								result = (int)this.getProbMatQL().maxIndex(this.resolveSubState1(), this.resolveSubState2());
							}
						}
						
						return result;
						]]>
					</Body>
				</Function>
				<Function name="resolveReward" resultType="Float">
					<Body language="Java">
						<![CDATA[
						double result = 0;
						result = (double)this.getDistanceToXY((int)this.getNearestPoliceXY("X"), (int)this.getNearestPoliceXY("Y")) - (double)this.getLastDistanceToPolice();					
						return result;						
						]]>
					</Body>
				</Function>
				
				<ReactionRule name="FromBankToBank" agentVariable="thief">
					<documentation>
						<dc:description>Stay in state BANK and move to destination.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.BANK && !thief.perceptPolice() && !thief.atDestination() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.getDirectionWithDestination() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromBankToRob" agentVariable="thief">
					<documentation>
						<dc:description>By arriving bank the thief changes state to ROBBING and stops.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.BANK && !thief.perceptPolice() && thief.atDestination() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.ROBBING ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.0 ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0.0 ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromRobToRob" agentVariable="thief">
					<documentation>
						<dc:description>Checking if robbery is done and increasing progress on it.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.ROBBING && !thief.hasRobbed() && !thief.perceptPolice() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentRobTime"><ValueExpr language="Java"><![CDATA[ thief.getCurrentRobTime() + 1 ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromRobToHideout" agentVariable="thief">
					<documentation>
						<dc:description>Robbery completed, change state to HIDEOUT and move to destination.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.ROBBING && thief.hasRobbed() && !thief.perceptPolice() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.HIDEOUT ]]></ValueExpr></Slot>
							<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 26 ]]></ValueExpr></Slot>
							<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ thief.getNormalSpeed() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>	
				<ReactionRule name="FromHideoutToHideout" agentVariable="thief">
					<documentation>
						<dc:description>Stay in state HIDEOUT and move to destination.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.HIDEOUT && !thief.perceptPolice() && !thief.atDestination() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.getDirectionWithDestination() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromChaseToBank" agentVariable="thief">
					<documentation>
						<dc:description>Return from state CHASE to BANK, if no police percepted and robbery not completed.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.CHASE && !thief.perceptPolice() && !thief.hasRobbed() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.BANK ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ thief.getNormalSpeed() ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.getDirectionWithDestination() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromChaseToHideout" agentVariable="thief">
					<documentation>
						<dc:description>Return from state CHASE to HIDEOUT, if no police percepted and robbery completed.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() == ThiefState.CHASE && !thief.perceptPolice() && thief.hasRobbed() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.HIDEOUT ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ thief.getNormalSpeed() ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.getDirectionWithDestination() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromXToChase" agentVariable="thief">
					<documentation>
						<dc:description>Initial steps to change to state CHASE because of percepted police.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getCurrentState() != ThiefState.CHASE && thief.perceptPolice() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.CHASE ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ thief.getChaseSpeed() ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ thief.getDistanceToXY(thief.getNearestPoliceXY("X"), thief.getNearestPoliceXY("Y")) ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.actionToDirection((int)thief.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>				
				<ReactionRule name="UpdateLA" agentVariable="thief">
					<documentation>
						<dc:description>Success rule for the LA algorihm.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getLearningMode() == LearningModes.LA && thief.perceptPolice() && thief.getCurrentState() == ThiefState.CHASE ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<UpdateComplexDataPropertyValue complexDataProperty="ProbMatLA" procedure="update">
								<Argument>
									<ValueExpr language="Java"><![CDATA[ thief.resolveReward() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ 2 ]]></ValueExpr>
								</Argument>								
							</UpdateComplexDataPropertyValue>
							<Slot property="lastPoliceX"><ValueExpr language="Java"><![CDATA[thief.getNearestPoliceXY("X") ]]></ValueExpr></Slot>
							<Slot property="lastPoliceY"><ValueExpr language="Java"><![CDATA[thief.getNearestPoliceXY("Y") ]]></ValueExpr></Slot>
							<Slot property="reward"><ValueExpr language="Java"><![CDATA[ thief.resolveReward() ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ thief.getDistanceToXY(thief.getNearestPoliceXY("X"), thief.getNearestPoliceXY("Y")) ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.actionToDirection((int)thief.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
							<Slot property="value1"><ValueExpr language="Java"><![CDATA[ thief.getProbMatLA().getValue(1, 1, 1) ]]></ValueExpr></Slot>
							<Slot property="value2"><ValueExpr language="Java"><![CDATA[ thief.getProbMatLA().getValue(1, 1, 2) ]]></ValueExpr></Slot>
							<Slot property="value3"><ValueExpr language="Java"><![CDATA[ thief.getProbMatLA().getValue(1, 1, 3) ]]></ValueExpr></Slot>
							<Slot property="value4"><ValueExpr language="Java"><![CDATA[ thief.getProbMatLA().getValue(1, 1, 4) ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="UpdateQL" agentVariable="thief">
					<documentation>
						<dc:description>Update rule for the QL algorihm.</dc:description>
					</documentation>
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ thief.getLearningMode() == LearningModes.QL && thief.perceptPolice() && thief.getCurrentState() == ThiefState.CHASE ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<UpdateComplexDataPropertyValue complexDataProperty="ProbMatQL" procedure="update" >
								<Argument>
									<ValueExpr language="Java"><![CDATA[ thief.resolveSubState1() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ thief.resolveSubState2() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ thief.resolveReward() ]]></ValueExpr>
								</Argument>
							</UpdateComplexDataPropertyValue>
							<Slot property="lastPoliceX"><ValueExpr language="Java"><![CDATA[thief.getNearestPoliceXY("X") ]]></ValueExpr></Slot>
							<Slot property="lastPoliceY"><ValueExpr language="Java"><![CDATA[thief.getNearestPoliceXY("Y") ]]></ValueExpr></Slot>
							<Slot property="reward"><ValueExpr language="Java"><![CDATA[ thief.resolveReward() ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ thief.getDistanceToXY(thief.getNearestPoliceXY("X"), thief.getNearestPoliceXY("Y")) ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ thief.actionToDirection(thief.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ thief.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ thief.setProgressInCell() ]]></ValueExpr></Slot>
							<Slot property="value1"><ValueExpr language="Java"><![CDATA[ thief.getProbMatQL().getValue(1, 1, 1) ]]></ValueExpr></Slot>
							<Slot property="value2"><ValueExpr language="Java"><![CDATA[ thief.getProbMatQL().getValue(1, 1, 2) ]]></ValueExpr></Slot>
							<Slot property="value3"><ValueExpr language="Java"><![CDATA[ thief.getProbMatQL().getValue(1, 1, 3) ]]></ValueExpr></Slot>
							<Slot property="value4"><ValueExpr language="Java"><![CDATA[ thief.getProbMatQL().getValue(1, 1, 4) ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
			</PhysicalAgentType>
			
			<!-- Police -->
			<PhysicalAgentType name="Police" superType="Car">
				<EnumerationProperty name="currentState" type="PoliceState"/>
				<Attribute type="Integer" name="observeRange"/>
				<Attribute type="Integer" name="thiefX"/>
				<Attribute type="Integer" name="thiefY"/>
				
				<Function name="perceptThief" resultType="Boolean">
					<Body language="Java">
						<![CDATA[
							int carID = 0;
							int i = 0;
							int j = 0;
							int gridX = 0;
							int gridY = 0;
							
							for (i = (int)this.getObserveRange() * -1; i <= (int)this.getObserveRange(); i++) {								
								for (j = (int)this.getObserveRange() * -1; j <= (int)this.getObserveRange(); j++) {
									
									gridX = (int)this.getX() + i;
									gridY = (int)this.getY() + j;
									
									if (gridX < 1  ) { gridX = 1;  }
									if (gridX > 29 ) { gridX = 29; }
									if (gridY < 1  ) { gridY = 1;  }
									if (gridY > 29 ) { gridY = 29; }
									
									carID = (int)Simulator.spaceModel.getGridCell(gridX, gridY).getCarID();
									
									if (carID == 1) {
										return true;
									}
								}
							}					
							
							return false;
						]]>
					</Body>
				</Function>
				<Function name="getPerceptedThief" resultType="Integer">
					<Parameter name="XY" type="String"/>
					<Body language="Java">
						<![CDATA[
							int carID = 0;
							int i = 0;
							int j = 0;
							int gridX = 0;
							int gridY = 0;
							int thiefX = 0;
							int thiefY = 0;
							
							for (i = (int)this.getObserveRange() * -1; i <= (int)this.getObserveRange(); i++) {								
								for (j = (int)this.getObserveRange() * -1; j <= (int)this.getObserveRange(); j++) {
									
									gridX = (int)this.getX() + i;
									gridY = (int)this.getY() + j;
									
									if (gridX < 1  ) { gridX = 1;  }
									if (gridX > 29 ) { gridX = 29; }
									if (gridY < 1  ) { gridY = 1;  }
									if (gridY > 29 ) { gridY = 29; }
									
									carID = (int)Simulator.spaceModel.getGridCell(gridX, gridY).getCarID();
									
									if (carID == 1) {
										thiefX = (int)this.getX() + i;
										thiefY = (int)this.getY() + j;
									}
								}
							}					
							
							if (XY == "X") { return thiefX; }
							if (XY == "Y") { return thiefY; }
							
							return 0;
						]]>
					</Body>
				</Function>

				<ReactionRule name="FromPatrolToPatrol" agentVariable="police">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ police.getCurrentState() == PoliceState.PATROL ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ police.getDirectionRandom() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ police.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ police.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromPatrolToChase" agentVariable="police">
					<WHEN eventType="InMessageEvent" messageType="TellTarget" messageVariable="m"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.CHASE ]]></ValueExpr></Slot>
							<Slot property="DestinationX"><ValueExpr language="Java"><![CDATA[ m.getThiefX() ]]></ValueExpr></Slot>
							<Slot property="DestinationY"><ValueExpr language="Java"><![CDATA[ m.getThiefY() ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ police.getChaseSpeed() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<ReactionRule name="FromChaseToChase" agentVariable="police">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ police.getCurrentState() == PoliceState.CHASE ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ police.getDirectionWithDestination() ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ police.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ police.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromChaseToBlock" agentVariable="police">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ police.getCurrentState() == PoliceState.CHASE && police.atDestination() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.BLOCK ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.0 ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0.0 ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromBlockToChase" agentVariable="police">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ police.getCurrentState() == PoliceState.BLOCK && !police.atDestination() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.CHASE ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ police.getChaseSpeed() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="FromXToPatrol" agentVariable="police">
					<WHEN eventType="InMessageEvent" messageType="AbortChase" messageVariable="m"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ police.getNormalSpeed() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<ReactionRule name="TellTargetToStation" agentVariable="police">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ police.perceptThief() ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="TellStation" receiverIdRefs="2">
								<Slot property="thiefX"><ValueExpr language="Java"><![CDATA[ police.getPerceptedThief("X") ]]></ValueExpr></Slot>
								<Slot property="thiefY"><ValueExpr language="Java"><![CDATA[ police.getPerceptedThief("Y") ]]></ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</PhysicalAgentType>
			
			<!-- Police Station -->
			<AgentType name="PoliceStation">
				<EnumerationProperty name="currentState" type="PoliceState"/>
				<Attribute type="Integer" name="abortDelay"/>
				
				<Function name="getBlockPos" resultType="Integer">
					<Parameter name="thiefX" type="Integer"/>
					<Parameter name="thiefY" type="Integer"/>
					<Parameter name="XY" type="String"/>
					<Parameter name="blockPos" type="Integer"/>
					<Body language="Java">
						<![CDATA[
						int result = 0;
						int northCellType = (int)Simulator.spaceModel.getGridCell((int)thiefX + 0, (int)thiefY + 1).getCellType();
						int eastCellType  = (int)Simulator.spaceModel.getGridCell((int)thiefX + 1, (int)thiefY + 0).getCellType();
						int southCellType = (int)Simulator.spaceModel.getGridCell((int)thiefX + 0, (int)thiefY - 1).getCellType();
						int westCellType  = (int)Simulator.spaceModel.getGridCell((int)thiefX - 1, (int)thiefY + 0).getCellType();
						
						switch ((int)blockPos) {
								case 1: 
									if (northCellType != 0) {
										thiefY = thiefY + 1;
										break;
									} else {
										blockPos++;
									}
								case 2: 
									if (eastCellType != 0) {
										thiefX = thiefX + 1;
										break;
									} else {
										blockPos++;
									}
								case 3: 
									if (southCellType != 0) {
										thiefY = thiefY - 1;
										break;
									} else {
										blockPos++;
									}
								case 4: 
									if (westCellType != 0) {
										thiefX = thiefX - 1;
										break;
									} else {
										blockPos++;
									}
							}
						
						if (XY == "X") { result = (int)thiefX; }
						if (XY == "Y") { result = (int)thiefY; }
						
						return result;
						]]>
					</Body>
				</Function>
				
				<CommunicationRule name="TellTargets" agentVariable="policeStation">
					<WHEN eventType="InMessageEvent" messageType="TellStation" messageVariable="m"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.CHASE ]]></ValueExpr></Slot>
							<Slot property="abortDelay"><ValueExpr language="Java"><![CDATA[ 2 ]]></ValueExpr></Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="TellTarget" receiverIdRefs="3">
								<Slot property="thiefX"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "X", 1) ]]></ValueExpr></Slot>
								<Slot property="thiefY"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "Y", 1) ]]></ValueExpr></Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="TellTarget" receiverIdRefs="4">
								<Slot property="thiefX"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "X", 2) ]]></ValueExpr></Slot>
								<Slot property="thiefY"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "Y", 2) ]]></ValueExpr></Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="TellTarget" receiverIdRefs="5">
								<Slot property="thiefX"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "X", 3) ]]></ValueExpr></Slot>
								<Slot property="thiefY"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "Y", 3) ]]></ValueExpr></Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="TellTarget" receiverIdRefs="6">
								<Slot property="thiefX"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "X", 4) ]]></ValueExpr></Slot>
								<Slot property="thiefY"><ValueExpr language="Java"><![CDATA[ policeStation.getBlockPos(m.getThiefX(), m.getThiefY(), "Y", 4) ]]></ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</CommunicationRule>
				<CommunicationRule name="AbortChaseDelay" agentVariable="policeStation">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ policeStation.getCurrentState() == PoliceState.CHASE && policeStation.getAbortDelay() != 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="abortDelay"><ValueExpr language="Java"><![CDATA[ policeStation.getAbortDelay() - 1 ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</CommunicationRule>
				<CommunicationRule name="AbortChaseToPatrol" agentVariable="policeStation">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ policeStation.getCurrentState() == PoliceState.CHASE && policeStation.getAbortDelay() == 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="AbortChase" receiverIdRefs="3" />
							<OutMessageEventExpr messageType="AbortChase" receiverIdRefs="4" />
							<OutMessageEventExpr messageType="AbortChase" receiverIdRefs="5" />
							<OutMessageEventExpr messageType="AbortChase" receiverIdRefs="6" />
						</SCHEDULE-EVT>
					</THEN>
				</CommunicationRule>
			</AgentType>
			
			<!-- Traffic -->
			<PhysicalAgentType name="Traffic" superType="Car">
				<EnumerationProperty name="currentState" type="TrafficState"/>
				<EnumerationProperty name="learningMode" type="LearningModes"/>
				<EnumerationProperty name="actionChoice" type="ActionChoices"/>
				<Attribute type="Float" name="distanceToTarget"/>
				<Attribute type="Float" name="startingDistance"/>
				<Attribute type="Integer" name="timeSteps"/>
				<Attribute type="Float" name="stepsPerDistance"/>
				<ComplexDataProperty name="ProbMatLA" type="LA_ProbabilityMatrix_16_8_4"/>
				<ComplexDataProperty name="ProbMatQL" type="QL_ProbabilityMatrix_16_8_4"/>
				
				<Function name="resolveSubState1" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						int xCurrent = (int)this.getX();
						int yCurrent = (int)this.getY();
						int northCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent + 1).getCellType();
						int eastCellType   = (int)Simulator.spaceModel.getGridCell(xCurrent + 1, yCurrent + 0).getCellType();
						int southCellType  = (int)Simulator.spaceModel.getGridCell(xCurrent + 0, yCurrent - 1).getCellType();
						int westCellType   = (int)Simulator.spaceModel.getGridCell(xCurrent - 1, yCurrent + 0).getCellType();
						
						if (northCellType != 0 && eastCellType != 0 && southCellType != 0 && westCellType != 0) {
							result = 1;
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType != 0 && westCellType == 0) {
							result = 2;
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType == 0 && westCellType != 0) {
							result = 3;
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType != 0 && westCellType != 0) {
							result = 4;
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType != 0 && westCellType != 0) {
							result = 5;
						}
						
						if (northCellType != 0 && eastCellType != 0 && southCellType == 0 && westCellType == 0) {
							result = 6;
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType != 0 && westCellType == 0) {
							result = 7;
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType == 0 && westCellType != 0) {
							result = 8;
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType != 0 && westCellType == 0) {
							result = 9;
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType == 0 && westCellType != 0) {
							result = 10;
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType != 0 && westCellType != 0) {  
							result = 11;
						}
						
						if (northCellType != 0 && eastCellType == 0 && southCellType == 0 && westCellType == 0) {  
							result = 12;
						}
						
						if (northCellType == 0 && eastCellType != 0 && southCellType == 0 && westCellType == 0) {
							result = 13;
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType != 0 && westCellType == 0) {  
							result = 14;
						}
						
						if (northCellType == 0 && eastCellType == 0 && southCellType == 0 && westCellType != 0) {  
							result = 15;
						}
						
						return (int)result;
						]]>
					</Body>
				</Function>
				<Function name="resolveSubState2" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 1;
						int posX = (int)this.getX();
						int posY = (int)this.getY();
						int destX = (int)this.getDestinationX();
						int destY = (int)this.getDestinationY();
						int relPosX = posX - destX;
						int relPosY = posY - destY;
						
						if (relPosX == 0 && relPosY < 0) {
							result = 1;
						}
						if (relPosX < 0 && relPosY < 0) {
							result = 2;
						}
						if (relPosX < 0 && relPosY == 0) {
							result = 3;
						}
						if (relPosX < 0 && relPosY > 0) {
							result = 4;
						}
						if (relPosX == 0 && relPosY > 0) {
							result = 5;
						}
						if (relPosX > 0 && relPosY > 0) {
							result = 6;
						}
						if (relPosX > 0 && relPosY == 0) {
							result = 7;
						}
						if (relPosX > 0 && relPosY < 0) {
							result = 8;
						}
						
						return result;
						]]>
					</Body>
				</Function>
				<Function name="resolveAction" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						
						if (this.getLearningMode() == LearningModes.LA) {
							if (this.getActionChoice() == ActionChoices.RANDOM) {
								result = (int)this.getProbMatLA().randomIndex(this.resolveSubState1(), this.resolveSubState2());
							}
							if (this.getActionChoice() == ActionChoices.MAX) {
								result = (int)this.getProbMatLA().maxIndex(this.resolveSubState1(), this.resolveSubState2());
							}							
						}
						if (this.getLearningMode() == LearningModes.QL) {
							if (this.getActionChoice() == ActionChoices.RANDOM) {
								result = (int)this.getProbMatQL().randomIndex(this.resolveSubState1(), this.resolveSubState2());
							}
							if (this.getActionChoice() == ActionChoices.MAX) {
								result = (int)this.getProbMatQL().maxIndex(this.resolveSubState1(), this.resolveSubState2());
							}
						}
						
						return result;
						]]>
					</Body>
				</Function>
				<Function name="resolveReward" resultType="Float">
					<Body language="Java">
						<![CDATA[
						double result = 0;
						result = (double)this.getDistanceToTarget() - (double)this.getDistanceToDestination((int)this.getX(), (int)this.getY());
						return result;
						]]>
					</Body>
				</Function>
				<Function name="getStartX" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						int random = (int)(Math.random() * 8) + 1;
						
						result = random * 3;
						
						if(result == 15) {
							result = 9;
						}
						
						return result;
						]]>
					</Body>
				</Function>
				<Function name="getStartY" resultType="Integer">
					<Body language="Java">
						<![CDATA[
						int result = 0;
						int random = (int)(Math.random() * 8) + 1;
						
						result = random * 3;
						
						return result;
						]]>
					</Body>
				</Function>
				
				<ReactionRule name="StartRule" agentVariable="traffic">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ traffic.getCurrentState() == TrafficState.START ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ TrafficState.DESTINATION ]]></ValueExpr></Slot>
							<Slot property="distanceToTarget"><ValueExpr language="Java"><![CDATA[ traffic.getDistanceToDestination((int)traffic.getX(), (int)traffic.getY()) ]]></ValueExpr></Slot>
							<Slot property="startingDistance"><ValueExpr language="Java"><![CDATA[ traffic.getDistanceToDestination((int)traffic.getX(), (int)traffic.getY()) ]]></ValueExpr></Slot>
							<Slot property="timeSteps"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ traffic.actionToDirection(traffic.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ traffic.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ traffic.setProgressInCell() ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="UpdateQL" agentVariable="traffic">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ traffic.getLearningMode() == LearningModes.QL && traffic.getCurrentState() == TrafficState.DESTINATION ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<UpdateComplexDataPropertyValue complexDataProperty="ProbMatQL" procedure="update" >
								<Argument>
									<ValueExpr language="Java"><![CDATA[ traffic.resolveSubState1() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ traffic.resolveSubState2() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ traffic.resolveReward() ]]></ValueExpr>
								</Argument>
							</UpdateComplexDataPropertyValue>
							<Slot property="distanceToTarget"><ValueExpr language="Java"><![CDATA[ traffic.getDistanceToDestination((int)traffic.getX(), (int)traffic.getY()) ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ traffic.actionToDirection(traffic.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ traffic.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ traffic.setProgressInCell() ]]></ValueExpr></Slot>
							<Slot property="timeSteps"><ValueExpr language="Java"><![CDATA[ traffic.getTimeSteps() + 1 ]]></ValueExpr></Slot>
							<Slot property="value1"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatQL().getValue(1, 1, 1) ]]></ValueExpr></Slot>
							<Slot property="value2"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatQL().getValue(1, 1, 2) ]]></ValueExpr></Slot>
							<Slot property="value3"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatQL().getValue(1, 1, 3) ]]></ValueExpr></Slot>
							<Slot property="value4"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatQL().getValue(1, 1, 4) ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="UpdateLA" agentVariable="traffic">
					<WHEN eventType="PrepareToAct"/>
					<IF language="Java"><![CDATA[ traffic.getLearningMode() == LearningModes.LA && traffic.getCurrentState() == TrafficState.DESTINATION ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<UpdateComplexDataPropertyValue complexDataProperty="ProbMatLA" procedure="update">
								<Argument>
									<ValueExpr language="Java"><![CDATA[ traffic.resolveReward() ]]></ValueExpr>
								</Argument>
								<Argument>
									<ValueExpr language="Java"><![CDATA[ 2 ]]></ValueExpr>
								</Argument>	
							</UpdateComplexDataPropertyValue>
							<Slot property="reward"><ValueExpr language="Java"><![CDATA[ traffic.resolveReward() ]]></ValueExpr></Slot>
							<Slot property="distanceToTarget"><ValueExpr language="Java"><![CDATA[ traffic.getDistanceToDestination((int)traffic.getX(), (int)traffic.getY()) ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ traffic.actionToDirection(traffic.resolveAction()) ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ traffic.setComingFrom() ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ traffic.setProgressInCell() ]]></ValueExpr></Slot>
							<Slot property="timeSteps"><ValueExpr language="Java"><![CDATA[ traffic.getTimeSteps() + 1 ]]></ValueExpr></Slot>
							<Slot property="value1"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatLA().getValue(1, 1, 1) ]]></ValueExpr></Slot>
							<Slot property="value2"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatLA().getValue(1, 1, 2) ]]></ValueExpr></Slot>
							<Slot property="value3"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatLA().getValue(1, 1, 3) ]]></ValueExpr></Slot>
							<Slot property="value4"><ValueExpr language="Java"><![CDATA[ traffic.getProbMatLA().getValue(1, 1, 4) ]]></ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
			</PhysicalAgentType>
			
			<!-- Bank -->
			<PhysicalObjectType name="Bank"  />
			
			<!-- Hideout -->
			<PhysicalObjectType name="Hideout" />
		</EntityTypes>

		<EnvironmentRules>
			<EnvironmentRule name="CarNextSimulationStepRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="car" objectType="Car"/>
				<DO>
					<SCHEDULE-EVT>
						<PerceptionEventExpr eventType="PrepareToAct">
							<PerceiverIdRef language="Java"><![CDATA[ car.getId() ]]></PerceiverIdRef>
						</PerceptionEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			<EnvironmentRule name="SationNextSimulationStepRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="station" objectType="PoliceStation"/>
				<DO>
					<SCHEDULE-EVT>
						<PerceptionEventExpr eventType="PrepareToAct">
							<PerceiverIdRef language="Java"><![CDATA[ station.getId() ]]></PerceiverIdRef>
						</PerceptionEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			<EnvironmentRule name="MoveRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="car" objectType="Car" />
				<IF language="Java"><![CDATA[
					(int)Simulator.spaceModel.getGridCell((int)car.getX() + (int)car.getOffsetX(), (int)car.getY() + (int)car.getOffsetY()).getCellType() != 0 && 
					(
						((int)car.getId() == 1 && (int)Simulator.spaceModel.getGridCell((int)car.getX() + (int)car.getOffsetX(), (int)car.getY() + (int)car.getOffsetY()).getCarID() == 0) ||
						((int)car.getId() != 1 && (int)Simulator.spaceModel.getGridCell((int)car.getX() + (int)car.getOffsetX(), (int)car.getY() + (int)car.getOffsetY()).getCarID() != 1)
					)
					]]>
				</IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)car.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)car.getY() ]]></YCoordinate>
							<Slot property="carID" value="0"/>
						</UpdateGridCell>
						<UpdateObject objectVariable="car">
							<Slot property="x"><ValueExpr language="Java"><![CDATA[ (int)car.getX() + car.getOffsetX() ]]></ValueExpr></Slot>
							<Slot property="y"><ValueExpr language="Java"><![CDATA[ (int)car.getY() + car.getOffsetY() ]]></ValueExpr></Slot>
						</UpdateObject>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)car.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)car.getY() ]]></YCoordinate>
							<Slot property="carID"><ValueExpr language="Java"><![CDATA[ car.getId() ]]></ValueExpr></Slot>
						</UpdateGridCell>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			<EnvironmentRule name="TrafficWinRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="traffic" objectType="Traffic" />
				<IF language="Java"><![CDATA[ traffic.getCurrentState() == TrafficState.DESTINATION && traffic.atDestination() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)traffic.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)traffic.getY() ]]></YCoordinate>
							<Slot property="carID" value="0"/>
						</UpdateGridCell>
						<UpdateObject objectVariable="traffic">
							<Slot property="x"><ValueExpr language="Java"><![CDATA[ traffic.getStartX() ]]></ValueExpr></Slot>
							<Slot property="y"><ValueExpr language="Java"><![CDATA[ traffic.getStartY() ]]></ValueExpr></Slot>
							<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
							<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ TrafficState.START ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="stepsPerDistance"><ValueExpr language="Java"><![CDATA[ (float)((float)traffic.getTimeSteps() / (float)traffic.getStartingDistance()) ]]></ValueExpr></Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			<EnvironmentRule name="ThiefWinRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="thief" objectType="Thief" />
				<IF language="Java"><![CDATA[ thief.getId() == 1 && thief.getCurrentState() == ThiefState.HIDEOUT && thief.atDestination() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)thief.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)thief.getY() ]]></YCoordinate>
							<Slot property="carID" value="0"/>
						</UpdateGridCell>
						<UpdateObject objectVariable="thief">
							<Slot property="x"><ValueExpr language="Java"><![CDATA[ 12 ]]></ValueExpr></Slot>
							<Slot property="y"><ValueExpr language="Java"><![CDATA[ 21 ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.BANK ]]></ValueExpr></Slot>
							<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 14 ]]></ValueExpr></Slot>
							<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
							<Slot property="currentRobTime"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="thiefWin"><ValueExpr language="Java"><![CDATA[ thief.getThiefWin() + 1 ]]></ValueExpr></Slot>
						</UpdateObject>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)thief.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)thief.getY() ]]></YCoordinate>
							<Slot property="carID"><ValueExpr language="Java"><![CDATA[ thief.getId() ]]></ValueExpr></Slot>
						</UpdateGridCell>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			<EnvironmentRule name="ThiefLoseRule">
				<ON-EACH-SIMULATION-STEP/>
				<FOR objectVariable="thief" objectType="Thief" />
				<IF language="Java"><![CDATA[ thief.resolveSubState1() == 16 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)thief.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)thief.getY() ]]></YCoordinate>
							<Slot property="carID" value="0"/>
						</UpdateGridCell>
						<UpdateObject objectVariable="thief">
							<Slot property="x"><ValueExpr language="Java"><![CDATA[ 12 ]]></ValueExpr></Slot>
							<Slot property="y"><ValueExpr language="Java"><![CDATA[ 21 ]]></ValueExpr></Slot>
							<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
							<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
							<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.BANK ]]></ValueExpr></Slot>
							<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 14 ]]></ValueExpr></Slot>
							<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
							<Slot property="currentRobTime"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
							<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="lastDistanceToPolice"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
							<Slot property="thiefLose"><ValueExpr language="Java"><![CDATA[ thief.getThiefLose() + 1 ]]></ValueExpr></Slot>
						</UpdateObject>
						<UpdateGridCell>
							<XCoordinate language="Java"><![CDATA[ (int)thief.getX() ]]></XCoordinate>
							<YCoordinate language="Java"><![CDATA[ (int)thief.getY() ]]></YCoordinate>
							<Slot property="carID"><ValueExpr language="Java"><![CDATA[ thief.getId() ]]></ValueExpr></Slot>
						</UpdateGridCell>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
		</EnvironmentRules>
		
	</SimulationModel>
	
	<InitialState>
		<PhysicalAgent type="Thief" id="1" x="12" y="21">
			<Slot property="learningMode"><ValueExpr language="Java"><![CDATA[ LearningModes.LA ]]></ValueExpr></Slot>
			<Slot property="actionChoice"><ValueExpr language="Java"><![CDATA[ ActionChoices.RANDOM ]]></ValueExpr></Slot>
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ ThiefState.BANK ]]></ValueExpr></Slot>
			<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 14 ]]></ValueExpr></Slot>
			<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
			<Slot property="observeRange"><ValueExpr language="Java"><![CDATA[ 4 ]]></ValueExpr></Slot>
			<Slot property="currentRobTime"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
			<Slot property="robTime"><ValueExpr language="Java"><![CDATA[ 50 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="normalSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="chaseSpeed"><ValueExpr language="Java"><![CDATA[ 1.0 ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
		</PhysicalAgent>
		<Agent type="PoliceStation" id="2">
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
		</Agent>
		<PhysicalAgent type="Police" id="3" x="6" y="24">
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
			<Slot property="observeRange"><ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="normalSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="chaseSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
		</PhysicalAgent>
		<PhysicalAgent type="Police" id="4" x="24" y="24">
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.E ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.W ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
			<Slot property="observeRange"><ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="normalSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="chaseSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
		</PhysicalAgent>		
		<PhysicalAgent type="Police" id="5" x="12" y="6">
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.W ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.E ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
			<Slot property="observeRange"><ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="normalSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="chaseSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
		</PhysicalAgent>		
		<PhysicalAgent type="Police" id="6" x="24" y="6">
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ PoliceState.PATROL ]]></ValueExpr></Slot>
			<Slot property="observeRange"><ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="normalSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="chaseSpeed"><ValueExpr language="Java"><![CDATA[ 0.5 ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
		</PhysicalAgent>
		<!--
		<PhysicalAgent type="Traffic" id="98" x="6" y="24">
			<Slot property="learningMode"><ValueExpr language="Java"><![CDATA[ LearningModes.LA ]]></ValueExpr></Slot>
			<Slot property="actionChoice"><ValueExpr language="Java"><![CDATA[ ActionChoices.RANDOM ]]></ValueExpr></Slot>
			<Slot property="direction"><ValueExpr language="Java"><![CDATA[ Direction4.S ]]></ValueExpr></Slot>
			<Slot property="comingFrom"><ValueExpr language="Java"><![CDATA[ Direction4.N ]]></ValueExpr></Slot>
			<Slot property="currentState"><ValueExpr language="Java"><![CDATA[ TrafficState.START ]]></ValueExpr></Slot>
			<Slot property="progressInCell"><ValueExpr language="Java"><![CDATA[ 0 ]]></ValueExpr></Slot>
			<Slot property="speed"><ValueExpr language="Java"><![CDATA[ 1.0 ]]></ValueExpr></Slot>
			<Slot property="destinationX"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
			<Slot property="destinationY"><ValueExpr language="Java"><![CDATA[ 15 ]]></ValueExpr></Slot>
		</PhysicalAgent>
		-->
		<PhysicalObject type="Bank" id="99" x="14" y="14"/>
		<PhysicalObject type="Hideout" id="100" x="26" y="4"/>
		
		<GridCells>
			<GridCellSet startX="1" endX="29" startY="1" endY="29">
				<Slot property="cellType" value="0" />
				<Slot property="carID" value="0" />
			</GridCellSet>
			
			<GridCellSet startX="3" endX="27" startY="3" endY="3">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="6" endY="6">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="9" endY="9">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="12" endY="12">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="15" endY="15">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="18" endY="18">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="21" endY="21">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="24" endY="24">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="27" startY="27" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="3" endX="3" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="6" endX="6" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="9" endX="9" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="12" endX="12" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="15" endX="15" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="18" endX="18" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="21" endX="21" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="24" endX="24" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			<GridCellSet startX="27" endX="27" startY="3" endY="27">
				<Slot property="cellType" value="1" />
			</GridCellSet>
			
			<GridCell x="6" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="9" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="12" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="15" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="18" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="21" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			<GridCell x="24" y="3">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="3" />
			</GridCell>
			
			<GridCell x="3" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="6">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="9">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="12">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="15">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="18">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="21">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="3" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="2" />
			</GridCell>
			<GridCell x="6" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="9" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="12" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="15" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="18" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="21" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="24" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="1" />
			</GridCell>
			<GridCell x="27" y="24">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="4" />
			</GridCell>
			
			<GridCell x="6" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="9" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="12" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="15" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="18" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="21" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>
			<GridCell x="24" y="27">
				<Slot property="cellType" value="2" />
				<Slot property="crossingType" value="5" />
			</GridCell>			
		</GridCells>
	</InitialState>
	
	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="thief_win" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Thief Win</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">amount of escapes of the thief</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="thief_lose" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Thief Lose</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">amount of captures of the thief</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="starting_distance" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Starting Distance</Text>
				</Label>
				<Hint>
					<Text xml:lang="en"></Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="steps_per_distance" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">TimeSteps per Distance</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">average timesteps needed per one distance</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="reward" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Reward</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">e</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="distance_to_target" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Distance to Target</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">e</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="distance_to_police" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Distance to Police</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">e</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="last_police_x" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Police X</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">e</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="last_police_y" comparisonGroup="test" showChart="true">
				<Label>
					<Text xml:lang="en">Police Y</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">e</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="value_1" comparisonGroup="values" showChart="true">
				<Label>
					<Text xml:lang="en">Action 1</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Action 1</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="value_2" comparisonGroup="values" showChart="true">
				<Label>
					<Text xml:lang="en">Action 2</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Action 2</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="value_3" comparisonGroup="values" showChart="true">
				<Label>
					<Text xml:lang="en">Action 3</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Action 3</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="value_4" comparisonGroup="values" showChart="true">
				<Label>
					<Text xml:lang="en">Action 4</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Action 4</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>
		
		<AnimationUI>
			<Views>
				<SpaceView canvasColor="lightgrey">
					<TwoDimensionalGridSpaceView2D backgroundColor="white" >
						<GridCellPropertyVisualizationMap cellViewProperty="fill" property="cellType" mapType="caseWise" v0="black" a0="1" v1="white" a1="2" v2="200 200 200"/>
					</TwoDimensionalGridSpaceView2D>
				</SpaceView>
				<PhysicalObjectView physicalObjectType="Thief">
					<PhysicalShape2D>
						<Circle fill="red"></Circle>
					</PhysicalShape2D>
				</PhysicalObjectView>
				<PhysicalObjectView physicalObjectType="Police">
					<PhysicalShape2D>
						<Square fill="blue"></Square>
					</PhysicalShape2D>
				</PhysicalObjectView>
				<PhysicalObjectView physicalObjectType="Traffic">
					<PhysicalShape2D>
						<Square fill="black"></Square>
					</PhysicalShape2D>
				</PhysicalObjectView>
				<PhysicalObjectView physicalObjectType="Bank">
					<PhysicalShape2D>
						<Square fill="green"></Square>
					</PhysicalShape2D>
				</PhysicalObjectView>
				<PhysicalObjectView physicalObjectType="Hideout">
					<PhysicalShape2D>
						<Square fill="yellow"></Square>
					</PhysicalShape2D>
				</PhysicalObjectView>
			</Views>
		</AnimationUI>
	</UserInterface>
	
</SimulationScenario>