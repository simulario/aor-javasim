<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
	xmlns:ers="http://aor-simulation.org"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:h="http://www.w3.org/1999/xhtml"
	targetNamespace="http://aor-simulation.org"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified">
	<xs:include schemaLocation="UMLetc.xsd"/>
	<xs:include schemaLocation="UserInterface.xsd"/>
	<!-- =================================================================== -->
	<xs:element name="Views" type="ers:Views.type"/>
	<!-- =================================================================== -->
	<xs:complexType name="Views.type">
		<xs:sequence>
			<xs:element ref="ers:SpaceView"  minOccurs="0"/>
			<xs:element ref="ers:View" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="ers:EventAppearance" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="introSoundFile" type="xs:anyURI" use="optional">
			<xs:annotation>
				<xs:documentation>
					The source file can be mp3 or midi. It is identified by its extension (.mp3 or .mid). The file is searched first in the 
					project directory under "media/sounds". If the file is not found then it is searched in the media/sounds global directory. 
					If still not found, then no sound is played. Note that the path is relativ to "media/sounds" (of the project or the global one).
					So a value @introSoundFile="/mySounds/background.mid" will be searched in "media/sounds/mySounds/background.mid" (global or the project one)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:element name="SpaceView" type="ers:SpaceView.type">
	<!-- =================================================================== -->
		<xs:annotation><xs:documentation><h:p>A space view allows to define in which way the space model will be visualized. If no space view is defined, the default visualization applies. By default, the entire display area will be used. The space parameters <h:code>xMax</h:code> and <h:code>yMax</h:code> (representing spatial distance units such as mm or m) are mapped to the space view parameters displayWidth and displayHeight (representing screen pixels). For physical objects in a non-discrete space, the resulting scale factors scaleX = displayWidth/<h:code>xMax</h:code> and scaleY = displayHeight/<h:code>yMax</h:code> are applied to the position coordinates <h:code>x</h:code> and <h:code>y</h:code> (of the object's center), as well as to the physical extension parameters <h:code>width</h:code> and <h:code>height</h:code>. If a visualization map is defined for one of the properties <h:code>width</h:code> and <h:code>height</h:code>, it overrides this default visualization of physical objects.</h:p>
		<h:p>In the case of a discrete space, physical objects are positioned by placing their center onto the center of the cell corresponding to the object's coordinates. So, when the size of a physical object is 1 (spatialDistanceUnit], or any odd number 2k+1, its view shape fills the entire cell, or 2k+1 cells with the first cell being at position x-k. If its size is an even number 2k, then it fills 2k cells starting at posiion x-(k-1).</h:p> 
		<h:p>For more information about the concepts of color and opacity, and the related attributes <h:code>stroke</h:code>, <h:code>fill</h:code>, <h:code>opacity</h:code> and <h:code>fill-opacity</h:code>, see also the <h:a href="http://www.w3.org/TR/SVGTiny12/painting.html#ColorProperty">SVG specification</h:a>. </h:p></xs:documentation></xs:annotation>
	</xs:element>
	<xs:complexType name="SpaceView.type">
		<xs:choice>
			<xs:element name="OneDimensional" type="ers:OneDimensional.type" minOccurs="0">
				<xs:annotation><xs:documentation>A 1D space can be visualized in 3 ways: as a horizontal, vertical or circular line, using a birds-eye view. </xs:documentation></xs:annotation>
			</xs:element>
			<xs:element name="OnePlus1" type="ers:OneDimensional.type" minOccurs="0">
				<xs:annotation><xs:documentation>This is a space view for the double 1D space ("1+1") allowing the same modes as the OneDimensional space view (horizontal, vertical or circular).</xs:documentation></xs:annotation>
			</xs:element>
			<xs:element name="OnePlus1Plus1" type="ers:OneDimensional.type" minOccurs="0"/>
			<xs:element name="OnePlus1Plus1Plus1" type="ers:OneDimensional.type" minOccurs="0"/>
			<xs:element name="Grid" type="ers:GridView.type" minOccurs="0">
				<xs:annotation><xs:documentation>A grid space view allows to define visualization maps for visualizing grid cell properties (by mapping them to one of the cell view properties <h:code>fill</h:code> and <h:code>fill-opacity</h:code>). </xs:documentation></xs:annotation>
			</xs:element>
			<xs:element name="Skybox" type="ers:Skybox.type" minOccurs="0"/>
		</xs:choice>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="OneDimensional.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="mode" type="ers:OneDimensionalMode.type" use="required"/>
		<xs:attribute name="width" type="xs:nonNegativeInteger" use="optional">
			<xs:annotation><xs:documentation><h:strong>Deprecated:</h:strong> (as of 0.8.2 replaced by <h:code>strokeWidth</h:code>) Defines the width of the line. </xs:documentation></xs:annotation>
		</xs:attribute>
		<xs:attribute name="strokeWidth" type="xs:nonNegativeInteger" use="optional">
			<xs:annotation><xs:documentation><h:strong>New:</h:strong> (as of 0.8.2 this attribute replaces <h:code>width</h:code>) Defines the width of the line. </xs:documentation></xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill" type="xs:string" use="optional">
			<xs:annotation><xs:documentation>Defines the fill color. </xs:documentation></xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="OneDimensionalMode.type">
		<xs:restriction base="xs:NCName">
			<xs:enumeration value="horizontal"/>
			<xs:enumeration value="vertical"/>
			<xs:enumeration value="circular"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="GridView.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:sequence>
			<xs:element name="VisualizationMap" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation><xs:documentation>Either a casewise constant function or a polynomial function with y = a3x<h:sup>3</h:sup> + a2x<h:sup>2</h:sup> + a1x + a0, where x is the physical object property and y is the shape property. The casewise constant function is defined by y = v0 if  x &lt; a0, y = v1 if  a0 &lt;= x &lt; a1, etc.</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:attribute name="cellViewProperty" type="ers:CellViewProperty.type" use="required"/>
					<xs:attribute name="cellProperty" type="ers:CanonicalName" use="required"/>
					<xs:attributeGroup ref="ers:Map.attrgrp"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="fill1" type="xs:string" use="optional">
			<xs:annotation><xs:documentation xml:lang="en">The cells of a grid can be colored like a chess board (with colors <h:code>fill1</h:code> and <h:code>fill2</h:code>).</xs:documentation></xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill2" type="xs:string" use="optional"/>
		<xs:attribute name="fill-opacity" type="xs:float" use="optional"/>
		<xs:attribute name="background-image" type="xs:anyURI" use="optional">
			<xs:annotation><xs:documentation xml:lang="en">Allows to load an image as the background of the entire grid.</xs:documentation></xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="CellViewProperty.type">
		<xs:restriction base="xs:NCName">
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="fill-opacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:complexType name="Skybox.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:attribute name="top" type="xs:anyURI" use="optional"/>
		<xs:attribute name="bottom" type="xs:anyURI" use="optional"/>
		<xs:attribute name="left" type="xs:anyURI" use="optional"/>
		<xs:attribute name="right" type="xs:anyURI" use="optional"/>
		<xs:attribute name="front" type="xs:anyURI" use="optional"/>
		<xs:attribute name="back" type="xs:anyURI" use="optional"/>
		<xs:attribute name="cubicTexture" type="xs:anyURI" use="optional"/>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:attributeGroup name="Map.attrgrp">
	<!-- =================================================================== -->
		<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
		<xs:attribute name="caseWise" type="xs:boolean" use="optional"/>
		<xs:attribute name="mapType" use="optional">
			<xs:annotation>
				<xs:documentation>
					Defines the type of the mapping that will be performed.
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NCName">
					<xs:enumeration value="polynomial">
						<xs:annotation><xs:documentation>A polynomial map with y = a<h:sub>3</h:sub>x<h:sup>3</h:sup> + a<h:sub>2</h:sub>x<h:sup>2</h:sup> + a<h:sub>1</h:sub>x + a<h:sub>0</h:sub>, where x is the physical object property and y is the shape property.</xs:documentation></xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="caseWise">
						<xs:annotation><xs:documentation>A casewise constant function with y = v<h:sub>0</h:sub> if  x &lt; a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if  a<h:sub>0</h:sub> &lt;= x &lt; a<h:sub>1</h:sub>, etc.</xs:documentation></xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="equalityCaseWise">
						<xs:annotation><xs:documentation>A function defined by equality cases as y = v<h:sub>0</h:sub> if  x = a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if x = a<h:sub>1</h:sub>, etc.</xs:documentation></xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="enumerationMap">
						<xs:annotation><xs:documentation>A function on an enumeration property defined by equality cases as y = v<h:sub>0</h:sub> if  x = enumLit(1), y = v<h:sub>1</h:sub> if x = enumLit(2), etc.</xs:documentation></xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="a0" type="xs:string" use="optional"/>
		<xs:attribute name="a1" type="xs:string" use="optional"/>
		<xs:attribute name="a2" type="xs:string" use="optional"/>
		<xs:attribute name="a3" type="xs:string" use="optional"/>
		<xs:attribute name="v0" type="xs:string" use="optional"/>
		<xs:attribute name="v1" type="xs:string" use="optional"/>
		<xs:attribute name="v2" type="xs:string" use="optional"/>
		<xs:attribute name="v3" type="xs:string" use="optional"/>
		<xs:attribute name="v4" type="xs:string" use="optional"/>
	</xs:attributeGroup>
	<!-- =================================================================== -->
	<xs:element name="View" type="ers:View.type"/>
	<!-- =================================================================== -->
	<xs:complexType name="View.type">
		<xs:sequence>
			<xs:element name="DisplayInfo" minOccurs="0">
				<xs:annotation><xs:documentation>Allows to display either the value of an object property or a fixed piece of text content near the object.</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Content" type="ers:OpaqueExpression" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="property" type="ers:CanonicalName" use="optional"/>
					<xs:attribute name="content" type="xs:string" use="optional"/>
				</xs:complexType>
			</xs:element>
			<xs:element ref="ers:ShapeSlot" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="VisualizationMap" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation><xs:documentation><h:strong>Depreciated</h:strong> Either a casewise constant function or a polynomial function with y = a<h:sub>3</h:sub>x<h:sup>3</h:sup> + a<h:sub>2</h:sub>x<h:sup>2</h:sup> + a<h:sub>1</h:sub>x + a<h:sub>0</h:sub>, where x is the physical object property and y is the shape property. The casewise constant function is defined by y = v<h:sub>0</h:sub> if  x &lt; a<h:sub>0</h:sub>, y = v<h:sub>1</h:sub> if  a<h:sub>0</h:sub> &lt;= x &lt; a<h:sub>1</h:sub>, etc.</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
					<xs:attributeGroup ref="ers:Map.attrgrp"/>
				</xs:complexType>
			</xs:element>
			<xs:element ref="ers:Shape2D" minOccurs="0"/>
			<xs:element ref="ers:ShapePropertyMap" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="Shape2dMap" minOccurs="0">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Case" maxOccurs="unbounded">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="ers:ShapeSlot" minOccurs="0" maxOccurs="unbounded"/>
									<xs:element ref="ers:ShapePropertyMap" minOccurs="0" maxOccurs="unbounded"/>
								</xs:sequence>
								<xs:attribute name="value" type="xs:string" use="required"/>
								<xs:attribute name="shape2D" type="ers:Shape2D" use="required"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="property" type="ers:CanonicalName" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element ref="ers:Label" minOccurs="0"/>
			<xs:element ref="ers:FlyOver" minOccurs="0"/>
			<xs:element ref="ers:View" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="objectType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="objectIdRef" type="xs:long" use="optional"/>
		<xs:attribute name="objectStartID" type="xs:long" use="optional"/>
		<xs:attribute name="objectEndID" type="xs:long" use="optional"/>
		<xs:attribute name="physicalObjectType" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="physicalObjectIdRef" type="xs:long" use="optional"/>
		<xs:attribute name="physicalObjectStartID" type="xs:long" use="optional"/>
		<xs:attribute name="physicalObjectEndID" type="xs:long" use="optional"/>
		<xs:attribute name="displayID" type="xs:boolean" use="optional"/>
		<xs:attribute name="displayName" type="xs:boolean" use="optional"/>
		<xs:attribute name="shape2D" type="ers:Shape2D" use="optional"/>
		<xs:attribute name="shape3D" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="sphere"/>
					<xs:enumeration value="cube"/>
					<xs:enumeration value="cuboid"/>
					<xs:enumeration value="regular_triangular_prism"/>
					<xs:enumeration value="pyramid"/>
					<xs:enumeration value="tetrahedra"/>
					<xs:enumeration value="cylinder"/>
					<xs:enumeration value="cone"/>
					<xs:enumeration value="mesh"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="offsetX" type="ers:Offset" use="optional"/>
		<xs:attribute name="offsetY" type="ers:Offset" use="optional"/>
		<!--
		<xs:attribute name="scale" type="ers:CanonicalName" use="optional"/>
		<xs:attribute name="scaleValue" type="xs:NCName" use="optional"/>
		-->
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="Shape2D">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="image"/>
			<xs:enumeration value="square"/>
			<xs:enumeration value="rectangle"/>
			<xs:enumeration value="triangle"/>
			<xs:enumeration value="circle"/>
			<xs:enumeration value="ellipse"/>
			<xs:enumeration value="polygon"/>
			<xs:enumeration value="polyline"/>
			<xs:enumeration value="path"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="ShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="z"/>
			<xs:enumeration value="width"/>
			<xs:enumeration value="height"/>
			<xs:enumeration value="depth"/>
			<xs:enumeration value="r"/>
			<xs:enumeration value="rx"/>
			<xs:enumeration value="ry"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="stroke-width"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fill-opacity"/>
			<xs:enumeration value="url"/>
			<xs:enumeration value="textureFile"/>
			<xs:enumeration value="surface-color"/>
			<xs:enumeration value="text"/>
			<xs:enumeration value="points"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- =================================================================== -->
	<xs:element name="Shape2D">
	<!-- =================================================================== -->
		<xs:complexType>
			<xs:choice>
				<xs:element name="Square">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:SquareShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="width" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Rectangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="width" type="xs:positiveInteger" use="optional"/>
						<xs:attribute name="height" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Triangle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:RectangleShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="width" type="xs:positiveInteger" use="optional"/>
						<xs:attribute name="height" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Circle">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:CircleShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="r" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Ellipse">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:EllipseShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="rx" type="xs:positiveInteger" use="optional"/>
						<xs:attribute name="ry" type="xs:positiveInteger" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Polygon">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ShapePropertyMap" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="shapeProperty" type="ers:PolygonShapeProperty.type" use="required"/>
									<xs:attributeGroup ref="ers:Map.attrgrp"/>
								</xs:complexType>
							</xs:element>							
						</xs:sequence>
						<xs:attribute name="points" type="xs:string" use="optional"/>
						<xs:attributeGroup ref="ers:sharedShapeProperties.attrgrp"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="sharedShapeProperties.attrgrp">
		<xs:attribute name="x" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="y" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="fill" type="ers:ShapeColor.type" use="optional"/>
		<xs:attribute name="fillRGB" type="ers:RGB.type" use="optional"/>
		<xs:attribute name="stroke" type="ers:ShapeColor.type" use="optional"/>
		<xs:attribute name="strokeRGB" type="ers:RGB.type" use="optional"/>
		<xs:attribute name="strokeWidth" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="opacity" type="ers:Probability" use="optional"/>
		<xs:attribute name="fillOpacity" type="ers:Probability" use="optional"/>
	</xs:attributeGroup>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="ShapeColor.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="white"/>
			<xs:enumeration value="black"/>
			<xs:enumeration value="lightgrey"/>
			<xs:enumeration value="grey"/>
			<xs:enumeration value="darkgrey"/>
			<xs:enumeration value="lightred"/>
			<xs:enumeration value="red"/>
			<xs:enumeration value="darkred"/>
			<xs:enumeration value="lightgreen"/>
			<xs:enumeration value="green"/>
			<xs:enumeration value="darkgreen"/>
			<xs:enumeration value="lightblue"/>
			<xs:enumeration value="blue"/>
			<xs:enumeration value="darkblue"/>
			<xs:enumeration value="yellow"/>
			<xs:enumeration value="brown"/>
			<xs:enumeration value="pink"/>
			<xs:enumeration value="aqua"/>
			<xs:enumeration value="purple"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ListOfBytes">
		<xs:list itemType="xs:unsignedByte"/>
	</xs:simpleType>
	<xs:simpleType name="RGB.type">
		<xs:restriction base="ers:ListOfBytes">
			<xs:length value="3"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="SquareShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="width"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="RectangleShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="width"/>
			<xs:enumeration value="height"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="CircleShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="r"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="EllipseShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="rx"/>
			<xs:enumeration value="ry"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="PolygonShapeProperty.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="points"/>
			<!-- shared shape properties -->
			<xs:enumeration value="x"/>
			<xs:enumeration value="y"/>
			<xs:enumeration value="fill"/>
			<xs:enumeration value="fillR"/>
			<xs:enumeration value="fillG"/>
			<xs:enumeration value="fillB"/>
			<xs:enumeration value="stroke"/>
			<xs:enumeration value="strokeR"/>
			<xs:enumeration value="strokeG"/>
			<xs:enumeration value="strokeB"/>
			<xs:enumeration value="strokeWidth"/>
			<xs:enumeration value="opacity"/>
			<xs:enumeration value="fillOpacity"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="ShapeSlot">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:complexType>
			<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:element name="ShapePropertyMap">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:annotation><xs:documentation>Either a polynomial or a casewise constant function, or a function defined by equality cases (either of integers resp. strings, or of enumeration literals).</xs:documentation></xs:annotation>
		<xs:complexType>
			<xs:attribute name="shapeProperty" type="ers:ShapeProperty.type" use="required"/>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<xs:element name="Scales" type="ers:Scales.type"/>
	<!-- =================================================================== -->
	<xs:complexType name="Scales.type">
		<xs:sequence>
			<xs:element name="Scale" type="ers:Enumeration.type" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!-- =================================================================== -->
	<xs:element name="EventAppearance" type="ers:EventAppearance.type">
	<!-- =================================================================== -->
		<xs:annotation><xs:documentation>Associates all events of a certain type with some form of sound: either a MIDI note sequence or an MP3 sound file. Event properties may be sonified with the help of a SonificationMap.</xs:documentation></xs:annotation>
	</xs:element>
	<xs:complexType name="EventAppearance.type">
		<xs:sequence>
			<xs:element name="MidiSound" minOccurs="0" maxOccurs="16">
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="ers:SonificationMap" minOccurs="0" maxOccurs="3"/>
					</xs:sequence>
					<xs:attribute name="instrumentName" type="ers:Instrument.type" use="optional"/>
					<xs:attribute name="instrumentNo" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:integer">
								<xs:minInclusive value="0"/>
								<xs:maxInclusive value="127"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="noteSequence" type="ers:NoteSequence.type" use="optional">
						<xs:annotation>
							<xs:documentation>
								A note sequence is a list of note/duration/volume triples where the note is an integer between 0 
								(corresponding to a low C) and 127 (in half-tones) and the duration (in ms) and 
								volume (in range 0 = mute to 127 = MAX_VOLUME) are positive integers. 
								An example is "12/300/80 14/200/90"
							</xs:documentation></xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="eventType" type="ers:CanonicalName" use="required"/>
		<!-- TO BE MOVED to AORSL -->
		<xs:attribute name="messageType" type="ers:CanonicalName" use="optional"/>
		<!--  -->
		<xs:attribute name="duration" type="xs:positiveInteger" use="optional">
			<xs:annotation>
				<xs:documentation>
					The duration of the sound. If the sound source is a file and if no duration if specified, then the entire file is played. 
					If deal with a sound file and a duration is specified with a value lower than the sound file duration then only the "duration" 
					time is played from that file.
					If the source is a note sequence and no duration is specified, then the duration is computed as the sum of all note durations.
					If the source is a note sequence and a duration is defined then the duration of each note from sequence is multipled with a 
					factor that ensures that the total notes duration equals with the value of the @duration attribute.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="soundFile" type="xs:anyURI" use="optional">
			<xs:annotation>
				<xs:documentation>
					The source file can be mp3 or midi. It is identified by its extension (.mp3 or .mid). The file is searched first in the 
					project directory under "media/sounds". If the file is not found then it is searched in the media/sounds global directory. 
					If still not found, then no sound is played. Note that the path is relativ to "media/sounds" (of the project or the global one).
					So a value @introSoundFile="/mySounds/background.mid" will be searched in "media/sounds/mySounds/background.mid" (global or the project one)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<xs:simpleType name="Instrument.type">
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<xs:restriction base="xs:string">
			<xs:enumeration value="PIANO_AcousticGrand"/>
			<xs:enumeration value="PIANO_BrightAcoustic"/>
			<xs:enumeration value="PIANO_ElectricGrand"/>
			<xs:enumeration value="PIANO_HonkyTonk"/>
			<xs:enumeration value="PIANO_EPiano1"/>
			<xs:enumeration value="PIANO_EPiano2"/>
			<xs:enumeration value="PIANO_Harpsichord"/>
			<xs:enumeration value="PIANO_Clav"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Celesta"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Glockenspiel"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_MusicBox"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Vibraphone"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Marimba"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Xylophone"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_TubularBells"/>
			<xs:enumeration value="CHROMATIC_PERCUSSION_Dulcimer"/>
			<xs:enumeration value="ORGAN_DrawbarOrgan"/>
			<xs:enumeration value="ORGAN_PercussiveOrgan"/>
			<xs:enumeration value="ORGAN_RockOrgan"/>
			<xs:enumeration value="ORGAN_ChurchOrgan"/>
			<xs:enumeration value="ORGAN_ReedOrgan"/>
			<xs:enumeration value="ORGAN_Accoridan"/>
			<xs:enumeration value="ORGAN_Harmonica"/>
			<xs:enumeration value="ORGAN_TangoAccordian"/>
			<xs:enumeration value="GUITAR_AcousticGuitar_nylon"/>
			<xs:enumeration value="GUITAR_AcousticGuitar_steel"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_jazz"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_clean"/>
			<xs:enumeration value="GUITAR_ElectricGuitar_muted"/>
			<xs:enumeration value="GUITAR_OverdrivenGuitar"/>
			<xs:enumeration value="GUITAR_DistortionGuitar"/>
			<xs:enumeration value="GUITAR_GuitarHarmonics"/>
			<xs:enumeration value="BASS_AcousticBass"/>
			<xs:enumeration value="BASS_ElectricBass_finger"/>
			<xs:enumeration value="BASS_ElectricBass_pick"/>
			<xs:enumeration value="BASS_FretlessBass"/>
			<xs:enumeration value="BASS_SlapBass1"/>
			<xs:enumeration value="BASS_SlapBass2"/>
			<xs:enumeration value="BASS_SynthBass1"/>
			<xs:enumeration value="BASS_SynthBass2"/>
			<xs:enumeration value="STRINGS_Violin"/>
			<xs:enumeration value="STRINGS_Viola"/>
			<xs:enumeration value="STRINGS_Cello"/>
			<xs:enumeration value="STRINGS_Contrabass"/>
			<xs:enumeration value="STRINGS_TremoloStrings"/>
			<xs:enumeration value="STRINGS_PizzicatoStrings"/>
			<xs:enumeration value="STRINGS_OrchestralStrings"/>
			<xs:enumeration value="STRINGS_Timpani"/>
			<xs:enumeration value="ENSEMBLE_StringEnsemble1"/>
			<xs:enumeration value="ENSEMBLE_StringEnsemble2"/>
			<xs:enumeration value="ENSEMBLE_SynthStrings1"/>
			<xs:enumeration value="ENSEMBLE_SynthStrings2"/>
			<xs:enumeration value="ENSEMBLE_ChoirAahs"/>
			<xs:enumeration value="ENSEMBLE_VoiceOohs"/>
			<xs:enumeration value="ENSEMBLE_SynthVoice"/>
			<xs:enumeration value="ENSEMBLE_OrchestraHit"/>
			<xs:enumeration value="BRASS_Trumpet"/>
			<xs:enumeration value="BRASS_Trombone"/>
			<xs:enumeration value="BRASS_Tuba"/>
			<xs:enumeration value="BRASS_MutedTrumpet"/>
			<xs:enumeration value="BRASS_FrenchHorn"/>
			<xs:enumeration value="BRASS_BrassSection"/>
			<xs:enumeration value="BRASS_SynthBrass1"/>
			<xs:enumeration value="BRASS_SynthBrass2"/>
			<xs:enumeration value="REED_SopranoSax"/>
			<xs:enumeration value="REED_AltoSax"/>
			<xs:enumeration value="REED_TenorSax"/>
			<xs:enumeration value="REED_BaritoneSax"/>
			<xs:enumeration value="REED_Oboe"/>
			<xs:enumeration value="REED_EnglishHorn"/>
			<xs:enumeration value="REED_Bassoon"/>
			<xs:enumeration value="REED_Clarinet"/>
			<xs:enumeration value="PIPE_Piccolo"/>
			<xs:enumeration value="PIPE_Flute"/>
			<xs:enumeration value="PIPE_Recorder"/>
			<xs:enumeration value="PIPE_PanFlute"/>
			<xs:enumeration value="PIPE_BlownBottle"/>
			<xs:enumeration value="PIPE_Shakuhachi"/>
			<xs:enumeration value="PIPE_Whistle"/>
			<xs:enumeration value="PIPE_Ocarina"/>
			<xs:enumeration value="SYNTH_LEAD_Lead1"/>
			<xs:enumeration value="SYNTH_LEAD_Lead2"/>
			<xs:enumeration value="SYNTH_LEAD_Lead3"/>
			<xs:enumeration value="SYNTH_LEAD_Lead4"/>
			<xs:enumeration value="SYNTH_LEAD_Lead5"/>
			<xs:enumeration value="SYNTH_LEAD_Lead6"/>
			<xs:enumeration value="SYNTH_LEAD_Lead7"/>
			<xs:enumeration value="SYNTH_LEAD_Lead8"/>
			<xs:enumeration value="SYNTH_PAD_Pad1"/>
			<xs:enumeration value="SYNTH_PAD_Pad2"/>
			<xs:enumeration value="SYNTH_PAD_Pad3"/>
			<xs:enumeration value="SYNTH_PAD_Pad4"/>
			<xs:enumeration value="SYNTH_PAD_Pad5"/>
			<xs:enumeration value="SYNTH_PAD_Pad6"/>
			<xs:enumeration value="SYNTH_PAD_Pad7"/>
			<xs:enumeration value="SYNTH_PAD_Pad8"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX1"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX2"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX3"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX4"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX5"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX6"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX7"/>
			<xs:enumeration value="SYNTH_EFFECTS_FX8"/>
			<xs:enumeration value="ETHNIC_Sitar"/>
			<xs:enumeration value="ETHNIC_Banjo"/>
			<xs:enumeration value="ETHNIC_Shamisen"/>
			<xs:enumeration value="ETHNIC_Koto"/>
			<xs:enumeration value="ETHNIC_Kalimba"/>
			<xs:enumeration value="ETHNIC_Bagpipe"/>
			<xs:enumeration value="ETHNIC_Fiddle"/>
			<xs:enumeration value="ETHNIC_Shanai"/>
			<xs:enumeration value="PERCUSSIVE_TinkleBell"/>
			<xs:enumeration value="PERCUSSIVE_Agogo"/>
			<xs:enumeration value="PERCUSSIVE_SteelDrums"/>
			<xs:enumeration value="PERCUSSIVE_Woodblock"/>
			<xs:enumeration value="PERCUSSIVE_TaikoDrum"/>
			<xs:enumeration value="PERCUSSIVE_MelodicTom"/>
			<xs:enumeration value="PERCUSSIVE_SynthDrum"/>
			<xs:enumeration value="PERCUSSIVE_ReverseCymbal"/>
			<xs:enumeration value="SOUND_EFFECTS_GuitarFretNoise"/>
			<xs:enumeration value="SOUND_EFFECTS_BreathNoise"/>
			<xs:enumeration value="SOUND_EFFECTS_Seashore"/>
			<xs:enumeration value="SOUND_EFFECTS_BirdTweet"/>
			<xs:enumeration value="SOUND_EFFECTS_TelephoneRing"/>
			<xs:enumeration value="SOUND_EFFECTS_Helicopter"/>
			<xs:enumeration value="SOUND_EFFECTS_Applause"/>
			<xs:enumeration value="SOUND_EFFECTS_Gunshot"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- =================================================================== -->
	<xs:element name="SonificationMap">
	<!-- =================================================================== -->
		<xs:annotation><xs:documentation>Either a casewise constant function or a polynomial function with y = a3x^3 + a2x^2 + a1x+ a0, where x is the event/object property and y is one of the four sound properties instrumentNo, note, duration, volume. The casewise constant function is defined by y = v0 if  x &lt; a0, y = v1 if  a0 &lt;= x &lt; a1, etc. </xs:documentation></xs:annotation>
		<xs:complexType>
			<xs:attribute name="soundProperty" use="required">
				<xs:annotation>
					<xs:documentation>
						The sound property that will be affected by this sonification map.		
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="instrumentNo">
							<xs:annotation>
								<xs:documentation>
									The instrument number (allowed resulting values ar in range of 0-127).
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="note">
							<xs:annotation>
								<xs:documentation>
									The note number - resulting note value must be in range of 0-127.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="duration">
							<xs:annotation>
								<xs:documentation>
									The note duration. The resulting value must be positive or equal to 0 and is expressed in milliseconds.
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="volume">
							<xs:annotation>
								<xs:documentation>
									The resulting value must be in range 0-127 (0 = mute, 127 = MAX_VOLUME).
								</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="ers:Map.attrgrp"/>
		</xs:complexType>
	</xs:element>
	<!-- =================================================================== -->
	<!-- *** Special Data Types  *** -->
	<!-- =================================================================== -->
	<xs:simpleType name="NoteSequence.type">
		<xs:list itemType="ers:NoteDurationVolumeTriple"/>
	</xs:simpleType>
	<xs:simpleType name="NoteDurationVolumeTriple">
		<xs:annotation>
			<xs:documentation>
				A note/duration/volume triple has the form N[[/D]/V] where N=0..127 (note), D=Integer (duration), and V=0..127 (volume).
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
		  <xs:pattern value="(([1-9]?|1[0-1])[0-9]|12[0-7])(/([1-9][0-9]*)(/((([1-9]?|1[0-1])[0-9]|12[0-7])))?)?"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
