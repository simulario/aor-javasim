<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-9.xsd"
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:h="http://www.w3.org/1999/xhtml"
	scenarioName="LemonadeStandGame"
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="4320" timeUnit="h"  stepTimeDelay="0"/>
	<SimulationModel modelName="LemonadeStandGame" modelTitle="Make lemonade and sell it at a street stand">
		<documentation>
			<dc:title>Lemonade Stand Game</dc:title>
			<dc:title xml:lang="de">Limonadenstand-Spiel</dc:title>
			<dc:created>20110211</dc:created>
			<dc:creator>Gerd Wagner</dc:creator>
			<dc:modified></dc:modified>
			<dc:source>See http://en.wikipedia.org/wiki/Lemonade_Stand</dc:source>
			<aors:shortDescription xmlns="http://www.w3.org/1999/xhtml">
				Simulates a lemonade stand that makes lemonade in pitchers from lemons and sugar each morning,
				and then sells it in paper cups. 
			</aors:shortDescription>
			<aors:shortDescription xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
				Simuliert einen Limonadenstand, der jeden Morgen Limonade in Karaffen aus Zitronen und Zucker
				herstellt und sie dann in Papierbechern verkauft. 
			</aors:shortDescription>
			<aors:description xmlns="http://www.w3.org/1999/xhtml">
				<p>A lemonade seller makes lemonade in pitchers and sells it in paper cups 
				at a stand in a street market. Each day consists of the following process steps and phases:</p>
				<h:ol>
					<h:li>The day starts with making planning decisions
						and placing a purchase order for getting the input materials.</h:li>
					<h:li>Some time later, the ordered input materials are delivered, the planned products 
						are manufactured and the stand is opened.</h:li>
					<h:li>After the stand has been opened, customer orders arrive with some random periodicity.
					  As long as there are still products in stock, customer orders are served.</h:li>
					<h:li>At the end of the day, close the lemonade stand and depreciate the expired items in stock.</h:li>
				</h:ol>
				<p>In this first version, neither customers nor suppliers are modeled explixitly.
				Also, there is no physics simulation.</p>
			</aors:description>
			<dc:license>Creative Commons Attribution-NonCommercial-ShareAlike 3.0, 
				see http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:license>
		</documentation>
<!--		
		<SpaceModel geometry="Euclidean" spatialDistanceUnit="m">
			<TwoDimensionalGrid xMax="30" yMax="1"/>
		</SpaceModel>
-->		
		<Statistics>
			<Variable name="cash" dataType="Float">				
				<Source>
					<ObjectProperty property="amountOfCash" objectType="LemonadeStand" objectIdRef="1"/>
				</Source>
			</Variable>
			<Variable name="productQuantity" dataType="Integer">				
				<Source>
					<ObjectProperty property="productQuantityInStock" objectType="LemonadeStand" objectIdRef="1"/>
				</Source>
			</Variable>
		</Statistics>
		
		<DataTypes>
			<Enumeration name="QuantityUnitEL">
				<EnumerationLiteral>PIECE</EnumerationLiteral>
				<EnumerationLiteral>MG</EnumerationLiteral>
				<EnumerationLiteral>G</EnumerationLiteral>
				<EnumerationLiteral>KG</EnumerationLiteral>
				<EnumerationLiteral>ML</EnumerationLiteral>
				<EnumerationLiteral>LTR</EnumerationLiteral>
			</Enumeration>
			<Enumeration name="SupplyUnitEL">
				<EnumerationLiteral>CRATE</EnumerationLiteral>
				<EnumerationLiteral>CAN</EnumerationLiteral>
				<EnumerationLiteral>CUP</EnumerationLiteral>
				<EnumerationLiteral>BAG</EnumerationLiteral>
				<EnumerationLiteral>PIECE</EnumerationLiteral>
			</Enumeration>
			<!--====================================-->
			<ComplexDataType name="PurchaseItemType">
			<!--====================================-->
				<ClassDef language="Java"><![CDATA[
					
	private String name;
	private QuantityUnitEL quantityUnit; 
	private SupplyUnitEL supplyUnit; 
	private int quantityPerProductSupplyUnit; 
	private double purchasePrice; 
	private int expirationTimeSpan; 
	private double transactionCostPerOrder; 
	private int reorderUpToLevel; 
	private int reorderPeriod; 

	public PurchaseItemType(){}

	/**
	* Construct a purchase item type with all properties set
	*/
	public PurchaseItemType(String n, QuantityUnitEL qU, SupplyUnitEL sU, int qPSU, 
			double pP, int eT, double tCO, int rUTL, int rP) {
		this.name = n;
		this.quantityUnit = qU;
		this.supplyUnit = sU;
		this.quantityPerProductSupplyUnit = qPSU;
		this.purchasePrice = pP;
		this.expirationTimeSpan = eT;
		this.transactionCostPerOrder = tCO;
		this.reorderUpToLevel = rUTL;
		this.reorderPeriod = rP;
	}

	public String getName() { return name;}
	public QuantityUnitEL getQuantityUnit() { return quantityUnit;}
	public SupplyUnitEL getSupplyUnit() { return supplyUnit;}
	public int getQuantityPerProductSupplyUnit() { return quantityPerProductSupplyUnit;}
	public double getPurchasePrice() { return purchasePrice;}
	public int getExpirationTimeSpan() { return expirationTimeSpan;}
	public double getTransactionCostPerOrder() { return transactionCostPerOrder;}
	public int getReorderUpToLevel() { return reorderUpToLevel;}
	public int getReorderPeriod() { return reorderPeriod;}
																					
					]]></ClassDef>
<!--				
				<Attribute name="name" type="String"/>
				<EnumerationProperty name="quantityUnit" type="QuantityUnitEL"/>
				<EnumerationProperty name="supplyUnit" type="SupplyUnitEL"/>
				<Attribute name="quantityPerProductSupplyUnit" type="Integer"/>
				<Attribute name="purchasePrice" type="Float"/>
				<Attribute name="expirationTimeSpan" type="Integer"/>
				<Attribute name="transactionCostPerOrder" type="Float"/>
				<Attribute name="reorderUpToLevel" type="Integer"/>
				<Attribute name="reorderPeriod" type="Integer"/>
-->			
			</ComplexDataType>
		</DataTypes>		
		<EntityTypes>
<!--			
			<MessageType name="Order"/>
			<MessageType name="OrderConfirmation">
				<Attribute name="price" type="Float"/>
			</MessageType>						
-->
			<PerceptionEventType name="PurchaseItemsDelivery"/>
			<PerceptionEventType name="SalesOrder"/>
			
			<ActionEventType name="OpenLemonadeStand"/>
			<ActionEventType name="PlacePurchaseOrder"/>
			<ActionEventType name="FinishCustomerOrder"/>
			<ActionEventType name="CloseLemonadeStand"/>

			<!-- =================================================== 				
			<ActionEventType name="Halt"/>
			<ActionEventType name="Go"/>
			<ActionEventType name="MakePayment">
				<Attribute name="amount" type="Float"/>
				<ReferenceProperty name="receiver" type="LemonadeStand"/>
			</ActionEventType>
			
			<PhysicalObjectType name="PricePoster" idPerceivable="true">
				<Attribute name="sellerIdRef" type="Integer"/>
				<Attribute name="price" type="Float"/>
			</PhysicalObjectType>
			
			<PhysicalAgentType name="Customer" autoPerception="true">
				<documentation><description>Customers walk along a street and perceive the price posters 
					of the lemonade stands.	When the price is smaller than their price limit, they halt
					at the stand and order a lemonade. 
					Possible extensions:
					- Use a waiting line at the stand
					- Vary the price limit with the weather (better weather = higher price limit)
					- Model the lemonade's quality with respect to cutomer preferences
					- Model the binding	of a customer to a preferred seller
					- Offer large and small amounts of lemonade
				</description></documentation>
				<Attribute name="priceLimit" type="Float"/>
				<Attribute name="patience" type="Integer"/>					

				<ReactionRule name="PricePosterPerception_RR" agentVariable="cust">
					<documentation>
						<description>When approaching a lemonade stand, the customer perceives the price poster. 
							If the price is not above her price limit, the customer gets into the waiting line 
							of the stand and orders a lemonade. </description>
					</documentation>
					<WHEN eventType="PhysicalObjectPerceptionEvent" physicalObjectType="PricePoster" eventVariable="e"/>
					<FOR dataVariable="q" dataType="Integer">
						<ValueExpr language="Java">cust.randomHamburgerQty()</ValueExpr>
					</FOR>
					<IF language="Java"><![CDATA[
						cust.getPriceLimit() >= ((PricePoster)e.getPerceivedPhysicalObject()).getPrice()
					]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="Halt"/>
							<OutMessageEventExpr messageType="Order">
								<ReceiverIdRef language="Java">
									((PricePoster)e.getPerceivedPhysicalObject()).getSellerIdRef()
								</ReceiverIdRef>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<ReactionRule name="OrderConfirmation_RR" agentVariable="cust">
					<documentation>
						<description>When the customer receives an oder conformation (and the cup of lemonade), she pays the bill
							and stays for a moment for drinking the cup of lemonade. </description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OrderConfirmation" eventVariable="e" messageVariable="m"/>
					<DO>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="MakePayment">
								<Slot property="amount">
									<ValueExpr language="Java">	m.getPrice() </ValueExpr>
								</Slot>
								<Slot property="receiver">
									<ValueExpr language="Java">	e.getActor() </ValueExpr>
								</Slot>
							</ActionEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</PhysicalAgentType>
-->
			<!-- ============================================ -->
			<AgentType name="LemonadeStand">
			<!-- ============================================ -->
				<documentation>
					<description>
						<h:p>A lemonade stand makes lemonade and sells it in paper cups at a stand in a street market.
						Lemonade is made in a pitcher by adding a number of sugar cubes and the juice of a number
						of lemons, and filling it up with water. Then, for serving the lemonade in a cup, first
						a number of ice cubes are put into the cup, which is then filled with the lemonade from
						the pitcher. On each day, the lemonade seller first has to make production, purchase 
						and sales planning decisions.</h:p>
						<h:p>During the day, the lemonade stand receives sales orders from customers passing by,
						depending on the weather conditions. </h:p>						
						<h:p>At the end of the day, the lemonade stand has to write off the expired input materials 
							(all ice cubes and possibly some lemons). </h:p>						
					</description>
				</documentation>
				<Attribute name="amountOfCash" type="Float"/>
				<Attribute name="nameOfProductType" type="String"/>
				<EnumerationProperty name="productSupplyUnit" type="SupplyUnitEL"/>
				<EnumerationProperty name="productQuantityUnit" type="QuantityUnitEL"/>
				<Attribute name="quantityPerProductSupplyUnit" type="Float"/>
				<Attribute name="productQuantityInStock" type="Integer"/>
				<!-- Batch size (unit production quantity) in quantity units -->
				<Attribute name="productBatchSize" type="Integer"/>
				<!-- The purchase item types (cups, lemons, sugar and ice) -->
				<ComplexDataProperty name="purchaseItemTypes" type="PurchaseItemType" upperMultiplicity="unbounded"/>
				<Attribute name="purchaseItemQuantitiesInStock" type="Integer" upperMultiplicity="unbounded"/>
				<!-- ***  P L A N N I N G  *** -->
				<!-- The production quantity planned for the current day-->
				<Attribute name="plannedProductionQuantity" type="Integer"/>
				<!-- Purchase planning decisions -->
				<Attribute name="purchaseQuantities" type="Integer" upperMultiplicity="unbounded"/>
				<!-- Production planning decisions per batch: lemon and sugar quantities per pitcher -->
				<Attribute name="inputQuantitiesPerBatch" type="Integer" upperMultiplicity="unbounded"/>
				<!-- Production planning decisions per supply unit: ice cubes per cup -->
				<Attribute name="inputQuantitiesPerSupplyUnit" type="Integer" upperMultiplicity="unbounded"/>
				<!-- Sales planning decisions -->
				<Attribute name="productSalesPrice" type="Float"/>
				
				<Function name="addPurchaseQuantitiesToInventory" resultType="void">
					<Body language="Java"><![CDATA[
						for (int i=0; i < this.getAllPurchaseItemTypes().size(); i++) {
							aors.util.ArrayListInterface<Long> qL = this.getAllPurchaseItemQuantitiesInStock(); 
							qL.set( i, qL.get(i)+ this.getAllPurchaseQuantities().get(i));
						}
					]]></Body>
				</Function>
				
				<Function name="subtractPurchaseAmountFromAmountOfCash" resultType="Float">
					<Body language="Java"><![CDATA[
						double purchaseAmount = 0;
						aors.util.ArrayListInterface<PurchaseItemType> pitlist = this.getAllPurchaseItemTypes();
						for (int i=0; i < pitlist.size(); i++) {
							purchaseAmount += this.getAllPurchaseQuantities().get(i) * pitlist.get(i).getPurchasePrice();
						}
						return (this.getAmountOfCash() - purchaseAmount);
					]]></Body>
				</Function>

				<PeriodicTimeEventType name="StartOfDay" periodicity="100"/>
				<PeriodicTimeEventType name="EndOfDay" periodicity="100"/>

				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="StartOfDay_RR">
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation><description>
						<h:p>At the start of the day, make planning decisions on</h:p>
						<h:ol>
							<h:li>the <strong>production quantity</strong>: how many pitchers of lemonade is to be produced?</h:li>
							<h:li>the <strong>product quality</strong>: how many lemons and how much sugar per pitcher, 
								and how many ice cubes per cup?</h:li>
							<h:li>the <strong>purchase quantities</strong>: how many paper cups, how many lemons, how much sugar and 
								how many ice cubes are to be purchased?</h:li>
							<h:li>the <strong>sales price</strong>: for how much is a cup of lemonade to be sold?</h:li>
						</h:ol>						
						<h:p>Finally, order the planned purchase item quantities.</h:p>
					</description></documentation>
					<WHEN eventType="StartOfDay"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="plannedProductionQuantity">
								<!-- TODO: use a function depending on the weather forecast -->
								<ValueExpr language="Java"><![CDATA[
									20
								]]></ValueExpr>
							</Slot>
							<MultiValuedSlot property="purchaseQuantities">
								<Set indexValue="0"><!-- crates of lemons -->
									<!-- TODO: use a function depending on the planned production quantity and the input items in stock -->
									<ItemExpr language="Java">1</ItemExpr>
								</Set>
								<Set indexValue="1" itemValue="3"/><!-- crates of sugar  -->
								<Set indexValue="2" itemValue="3"/><!-- ice bags-->
								<Set indexValue="3" itemValue="3"/><!-- crates of cups -->
							</MultiValuedSlot>
							<Slot property="productSalesPrice">
								<!-- TODO: improve formula -->
								<ValueExpr language="Java"><![CDATA[
									1.80
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="PlacePurchaseOrder"/>
						</SCHEDULE-EVT>
					</DO>	
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ReceiveDelivery_RR" agentVariable="lst">
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation><description>
						<h:p>At this step, purchase items are delivered, and products are manufactured, as planned. 
							More precisely,</h:p> 
						<h:ol>
							<h:li>the purchased input items are added to the purchase items in stock,</h:li>
							<h:li>the amount of cash is decremented accordingly,</h:li>
							<h:li>the planned production quantity is produced, and the product quantity in stock is incremented, 
								while the used input items' quantities in stock	are decremented, accordingly.</h:li>
						</h:ol>
						<h:p>Finally, the lemonade stand is opened for sales.</h:p> 
					</description></documentation>
					<WHEN eventType="PurchaseItemsDelivery"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="addPurchaseQuantitiesToInventory" contextObjectVariable="lst"/>
							<Slot property="amountOfCash">
								<ValueExpr language="Java JavaScript">
									lst.subtractPurchaseAmountFromAmountOfCash()
								</ValueExpr>
							</Slot>
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java JavaScript">
									lst.getProductQuantityInStock() + lst.getPlannedProductionQuantity()
								</ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="OpenLemonadeStand"/>
						</SCHEDULE-EVT>
					</DO>	
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProcessSalesOrder_RR" agentVariable="lst">
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation><description>
						<h:p>When the lemonade stand receives an order, it checks if it still has enough lemonade.
						If yes, it serves the order leading to an update of the product quantity in stock and the
						amount of cash.</h:p> 
					</description></documentation>
					<WHEN eventType="SalesOrder"/>
					<IF language="Java JavaScript"> lst.getProductQuantityInStock() > 0 </IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="productQuantityInStock">
								<ValueExpr language="Java JavaScript">	lst.getProductQuantityInStock() - 1 </ValueExpr>
							</Slot>
							<Slot property="amountOfCash">
								<ValueExpr language="Java JavaScript">
									lst.getAmountOfCash() + lst.getProductSalesPrice()
								</ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="FinishCustomerOrder"/>
						</SCHEDULE-EVT>
					</THEN>	
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="EndOfDay_RR">
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation><description>
						<h:p>At the end of the day, close the lemonade stand and depreciate the expired items in stock.
							In this first version, only the remaining ice cubes and lemonade are depreciated.</h:p>
					</description></documentation>
					<WHEN eventType="EndOfDay" />
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="purchaseItemQuantitiesInStock">
								<Set indexValue="3" itemValue="0"/>
							</MultiValuedSlot>
							<Slot property="productQuantityInStock" value="0"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="CloseLemonadeStand"/>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
		</EntityTypes>
		
		<EnvironmentRules>
			<!-- ====================================== -->
			<EnvironmentRule name="PlacePurchaseOrder_ER">
			<!-- ====================================== -->
				<WHEN eventType="PlacePurchaseOrder"/>
				<DO>
					<SCHEDULE-EVT>
						<PerceptionEventExpr eventType="PurchaseItemsDelivery" perceiverIdRefs="1"/>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			<!-- ====================================== -->
			<EnvironmentRule name="OpenLemonadeStand_ER">
			<!-- ====================================== -->
				<WHEN eventType="OpenLemonadeStand"/>
				<DO>
					<SCHEDULE-EVT>
						<PerceptionEventExpr eventType="SalesOrder" perceiverIdRefs="1">
							<Delay>
								<DiscreteRandomVariable>
									<ExponentialInt lambda="0.3"/>
								</DiscreteRandomVariable>
							</Delay>
						</PerceptionEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			<!-- ====================================== -->
			<EnvironmentRule name="FinishCustomerOrder_ER">
			<!-- ====================================== -->
				<WHEN eventType="FinishCustomerOrder"/>
				<DO>
					<SCHEDULE-EVT>
						<PerceptionEventExpr eventType="SalesOrder" perceiverIdRefs="1">
							<Delay>
								<DiscreteRandomVariable>
									<ExponentialInt lambda="0.3"/>
								</DiscreteRandomVariable>
							</Delay>
						</PerceptionEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			<!-- ======================================  Not Needed?
			<EnvironmentRule name="CloseLemonadeStand_ER">
				<WHEN eventType="CloseLemonadeStand"/>
			</EnvironmentRule>
			 ====================================== -->
			
			<!-- ====================================== 
			<EnvironmentRule name="MakePayment_RR">
				<WHEN eventType="MakePayment" eventVariable="e"/>
				<FOR objectVariable="ls" objectType="LemonadeStand">
					<ValueExpr language="Java"> e.getReceiver() </ValueExpr>
				</FOR>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="ls">
							<Slot property="cash">
								<ValueExpr language="Java"> ls.getCash() + e.getAmount() </ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			====================================== -->
		</EnvironmentRules>	
	</SimulationModel>
	
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<Agent type="LemonadeStand" id="1" name="DeliLemonade">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="nameOfProductType" value="Lemonade" />
			<Slot property="amountOfCash" value="200" />
			
			<Slot property="productQuantityUnit">
				<ValueExpr language="Java">QuantityUnitEL.ML</ValueExpr>
			</Slot>
			<Slot property="productSupplyUnit">
				<ValueExpr language="Java">SupplyUnitEL.CUP</ValueExpr>
			</Slot>
			<Slot property="productBatchSize" value="2000" />
			<Slot property="quantityPerProductSupplyUnit" value="200" />
			<Slot property="productQuantityInStock" value="0" />
			
			<Slot property="purchaseItemTypes">
				<!-- name, quantityUnit, supplyUnit, quantityPerProductSupplyUnit, purchasePrice, expirationTimeSpan, 
							transactionCostPerOrder, reorderUpToLevel, reorderPeriod -->
				<ValueExpr language="Java"><![CDATA[ 
					new aors.util.ArrayList<PurchaseItemType>(){
						{
							add( new PurchaseItemType("Lemon", QuantityUnitEL.PIECE, SupplyUnitEL.CRATE, 25, 7.50, 150, 2.50, 3, 100));
							add( new PurchaseItemType("Sugar", QuantityUnitEL.PIECE, SupplyUnitEL.CRATE, 100, 1.50, 0, 2.50, 3, 100));
							add( new PurchaseItemType("Ice", QuantityUnitEL.PIECE, SupplyUnitEL.BAG, 200, 2.00, 50, 2.50, 3, 100));
							add( new PurchaseItemType("Cup", QuantityUnitEL.PIECE, SupplyUnitEL.CRATE, 50, 2.50, 0, 2.50, 3, 100));
						}
					}
				]]></ValueExpr>
			</Slot>
			<Slot property="purchaseQuantities">
				<ValueExpr language="Java"><![CDATA[ 
					new aors.util.ArrayList<Long>(){
						{
							add( new Long(0));
							add( new Long(0));
							add( new Long(0));
							add( new Long(0));
						}
					}
				]]></ValueExpr>
			</Slot>
			<Slot property="purchaseItemQuantitiesInStock">
				<ValueExpr language="Java"><![CDATA[ 
					new aors.util.ArrayList<Long>(){
						{
							add( new Long(0));
							add( new Long(0));
							add( new Long(0));
							add( new Long(0));
						}
					}
				]]></ValueExpr>
			</Slot>
			<Slot property="inputQuantitiesPerSupplyUnit">
				<ValueExpr language="Java"><![CDATA[ 
					new aors.util.ArrayList<Long>(){
						{
							add( new Long(0));
							add( new Long(0));
							add( new Long(5));  // ice cubes
							add( new Long(1));  // paper cup
						}
					}
					]]></ValueExpr>
			</Slot>
			<Slot property="inputQuantitiesPerBatch">
				<ValueExpr language="Java"><![CDATA[ 
					new aors.util.ArrayList<Long>(){
						{
							add( new Long(2));  // lemons
							add( new Long(10)); // sugar cubes
							add( new Long(0));
							add( new Long(0));
						}
					}
					]]></ValueExpr>
			</Slot>			
			<Slot property="plannedProductionQuantity" value="2"/>
			<Slot property="productSalesPrice" value="1.20"/>
			
			<PeriodicTimeEvent type="StartOfDay" occurrenceTime="1"/>
			<PeriodicTimeEvent type="EndOfDay" occurrenceTime="100"/>
		</Agent>
	</InitialState>
	
	<UserInterface supportedLanguages="en">
		<StatisticsUI>
			<StatisticsVariableUI variable="cash">
				<Label>
					<Text xml:lang="en">Cash</Text>
				</Label>
				<Hint>
					<Text>How much money does the stand have?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="productQuantity">
				<Label>
					<Text xml:lang="en">Lemonade</Text>
				</Label>
				<Hint>
					<Text>How much lemonade does the stand have?</Text>
				</Hint>
				<Format decimalPlaces="0"><PackagingUnits>cups</PackagingUnits></Format>
			</StatisticsVariableUI>			
		</StatisticsUI>
		
		<AnimationUI>
			<StartPageText>
				<aors:HtmlText xmlns="http://www.w3.org/1999/xhtml"><p>This is just an experimental<br/>
					visualization!</p></aors:HtmlText>
			</StartPageText>
			
			<Views>
				<ObjectView objectType="LemonadeStand" objectIdRef="1">
					<Shape2D x="50" y="30">
						<Rectangle fill="green" positioning="LeftBottom">
							<ShapePropertyVisualizationMap shapeProperty="height" property="amountOfCash" mapType="polynomial" a0="20" a1="0.1"/>
							<ShapePropertyVisualizationMap shapeProperty="width" property="productQuantityInStock" mapType="polynomial" a0="20" a1="0.1"/>
						</Rectangle>
					</Shape2D>
					<DisplayInfo content="Cash"></DisplayInfo>
				</ObjectView>
			</Views>
		</AnimationUI>
		
	</UserInterface>
</SimulationScenario>