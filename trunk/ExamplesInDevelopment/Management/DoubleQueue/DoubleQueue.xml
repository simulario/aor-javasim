<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.8.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../ext/aorsl/ersl/ERSL-0-8-3.xsd"
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	scenarioName="ServiceDoubleQueueSystemWithResourceUtilizationStatistics"
	scenarioTitle="ServiceDoubleQueueSystemWithResourceUtilizationStatistics"
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="100" stepDuration="1" timeUnit="min"/>

	<SimulationModel modelName="ServiceDoubleQueueSystemWithResourceUtilizationStatistics"
		modelTitle="ServiceDoubleQueueSystemWithResourceUtilizationStatistics">

		<documentation>
			<dc:creator>Oana Nicolae</dc:creator>
			<dc:created>20090323</dc:created>
			<dc:source>DoubleQueueSystem</dc:source>
			<dc:description>General Case: A Double Queue system where the entities are waiting in line for some resources with restricted capacity (i.e. loaders(2) and scale(1)) to be available. - Particular Case: The Dump-Truck Problem. We abstract away the Truck objects (6) and also the queue objects (2), as for calculating the resource utilization statistics ( the percentage while the resource was busy in the system)we only need the delays of the EndService scheduled events for loaders and scale. </dc:description>
			<processModelDiagram>DoubleQueue_withoutActivities.png</processModelDiagram>
		</documentation>

		<Statistics>
			<!-- Time-persistent statistical colectors: return the time-weighted values of the variables lru / sru that track the utilization of the two resources from the system-->
			<Variable name="lru" dataType="Float" displayName="Loaders-resource Utilization"
				initialValue="0">
				<Source computeOnlyAtEnd="true" aggregationFunction="avg">
					<ValueExpr language="Java"><![CDATA[
                      SimStatistics.lru.getValue() / SimulationParameters.SIMULATION_STEPS
                      ]]>
					</ValueExpr>
				</Source>
			</Variable>

			<Variable name="sru" dataType="Float" displayName="Scale-resource Utilization"
				initialValue="0">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java"><![CDATA[
                    SimStatistics.sru.getValue() / SimulationParameters.SIMULATION_STEPS
                    ]]>
					</ValueExpr>
				</Source>
			</Variable>
		</Statistics>

		<EntityTypes>
			<!-- =================================================== -->
			<ExogenousEventType name="StartSimulation">
				<!-- ================================================= -->
				<Periodicity>
					<ValueExpr language="Java">0</ValueExpr>
				</Periodicity>
			</ExogenousEventType>
			<!-- =================================================== -->
			<CausedEventType name="ArrivalAtLoaders"/>
			<!-- =================================================== -->
			<CausedEventType name="StartLoadingService"/>
			<!-- =================================================== -->
			<CausedEventType name="EndLoadingService">
				<Attribute name="endTime" type="Integer"/>
			</CausedEventType>
			<!-- =================================================== -->
			<CausedEventType name="StartScaleService"/>
			<!-- =================================================== -->
			<CausedEventType name="EndScaleService">
				<Attribute name="endTime" type="Integer"/>
			</CausedEventType>
			<!-- =================================================== -->
			<CausedEventType name="StartTransportService"/>
			<!-- =================================================== -->

			<!-- =================================================== -->
			<ObjectType name="ServiceDoubleQueueSystem">
				<!-- =================================================== -->
				<Attribute name="loadersQL" type="Integer"/>
				<Attribute name="scaleQL" type="Integer"/>
				<Attribute name="freeLoaders" type="Integer"/>
				<Attribute name="scaleServiceBusy" type="Boolean"/>

				<Function name="randomLoadTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 30) return 5; 		// with probability 0.30
					else if (r < 80) return 10;		// with probability 0.50
					else return 15;			// with probability 0.20
					]]></Body>
				</Function>
				<Function name="randomScaleTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 70) return 12; 		 // with probability 0.70
					else return 16;			 // with probability 0.30
					]]></Body>
				</Function>
				<Function name="randomTravelTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 40) return 40; 	              // with probability 0.40
					else if (r < 70) return 60;		// with probability 0.30
					else if (r < 90) return 80;		// with probability 0.20
					else return 100;			// with probability 0.10
					]]></Body>
				</Function>
			</ObjectType>

		</EntityTypes>

		<EnvironmentRules>
			<!-- ================================================== -->
			<EnvironmentRule name="ArrivalAtLoadersWhenBusy_Rule">
				<!-- =================================================== -->
				<documentation>
					<dc:description> On arrival of a truck, when both the loader resources are
						occupied, the truck has to wait in a line for one loader-resource to be
						available, so the loading queue length is increased by 1. </dc:description>
				</documentation>
				<WHEN eventType="ArrivalAtLoaders"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[s.getFreeLoaders() == 0]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Increment property="loadersQL" value="1"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			<!-- =================================================== -->
			<EnvironmentRule name="ArrivalAtLoadersWhenNotBusy_Rule">
				<!-- =================================================== -->
				<documentation>
					<dc:description> On arrival of a truck, when there is at least one
						loader-resource free, we schedule a StartLoadingService event.
					</dc:description>
				</documentation>
				<WHEN eventType="ArrivalAtLoaders"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
s.getFreeLoaders() == 1 || s.getFreeLoaders() == 2 
          ]]></IF>
			    <THEN>
			    	<SCHEDULE-EVT>
			    		<CausedEventExpr eventType="StartLoadingService"/>
			    	</SCHEDULE-EVT>
			    </THEN>
			</EnvironmentRule>

			<!-- =================================================== -->
			<EnvironmentRule name="StartLoadingService_Rule">
				<!-- =================================================== -->
				<documentation>
					<dc:description> We start the loading service and the truck is going to be
						loaded and hence the free loader-resources number is decreasing. After
						loading, the truck moves to the scale to be weighed as soon as possible. An
						EndLoadingService with appropriate delay is created. </dc:description>
				</documentation>
				<WHEN eventType="StartLoadingService"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<FOR dataVariable="loadTime" dataType="Integer">
					<ValueExpr language="Java">s.randomLoadTime()</ValueExpr>
				</FOR>
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="s">
						<Decrement property="freeLoaders" value="1"/>
					</UpdateObject>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<CausedEventExpr eventType="EndLoadingService">
						<Delay>
							<ValueExpr language="Java">loadTime</ValueExpr>
						</Delay>
						<Slot property="endTime">
							<ValueExpr language="Java">loadTime</ValueExpr>
						</Slot>
					</CausedEventExpr>
				</SCHEDULE-EVT>
			</DO>
			</EnvironmentRule>

			<!-- =============================================================== -->
			<EnvironmentRule name="DepartureFromLoadersWhenQueueEmpty_Rule">
				<!-- ================================================================ -->
				<documentation>
					<dc:description> When the truck leaves the loading queue, if the loaders queue
						is empty, the free loaders number decrease a unity. </dc:description>
				</documentation>
				<WHEN eventType="EndLoadingService" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[s.getLoadersQL() == 0]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Increment property="freeLoaders" value="1"/>
						</UpdateObject>
						<UpdateStatisticsVariable variable="lru">
							<ValueExpr language="Java"><![CDATA[
SimStatistics.lru.getValue() + event.getEndTime()
             ]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>

			<!-- =================================================================== -->
			<EnvironmentRule name="DepartureFromLoadersWhenQueueNotEmpty_Rule">
				<!-- ===================================================================== -->
				<documentation>
					<dc:description> On departure of a truck, when the loaders queue is not empty,
						the next truck will be weighed, so a new future StartLoadingService event is
						created and the loaders queue length is decreased by 1. </dc:description>
				</documentation>
				<WHEN eventType="EndLoadingService" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<FOR dataVariable="arrivalTime" dataType="Integer">
					<ValueExpr language="Java">s.randomScaleTime()</ValueExpr>
				</FOR>
				<IF language="Java"><![CDATA[
s.getLoadersQL() > 0
       ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Increment property="freeLoaders" value="1"/>
						</UpdateObject>
						<UpdateObject objectVariable="s">
							<Decrement property="loadersQL" value="1"/>
						</UpdateObject>
						<UpdateStatisticsVariable variable="lru">
							<ValueExpr language="Java"><![CDATA[
SimStatistics.lru.getValue() + event.getEndTime()
               ]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="StartLoadingService"/>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>

			<!-- =================================================== -->
			<EnvironmentRule name="ArrivalAtScaleQueueWhenBusy_Rule">
				<!-- ===================================================== -->
				<documentation>
					<dc:description> When arriving at the scale queue, the truck waits in a line for
						the scale resource to be available, therefore the scaling queue length is
						increased by 1. </dc:description>
				</documentation>
				<WHEN eventType="EndLoadingService"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[ 
					s.isScaleServiceBusy()
					]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Increment property="scaleQL" value="1"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>

			<!-- ===================================================== -->
			<EnvironmentRule name="ArrivalAtScaleQueueWhenNotBusy_Rule">
				<!-- ====================================================== -->
				<documentation>
					<dc:description> On the arrival of a truck at the scale queue, when the
						scale-resource is free, a StartScaleService event is created. A
						StartScaleService event is created. We can abstract away the departure from
						loaders and the arrival at scale queue events and consider only the
						StartScaleService event. </dc:description>
				</documentation>
				<WHEN eventType="EndLoadingService"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
!s.isScaleServiceBusy()
        ]]></IF>
				<THEN>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="StartScaleService"/>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>

			<!-- =========================================================== -->
			<EnvironmentRule name="StartScaleService_Rule">
				<!-- ============================================================= -->
				<documentation>
					<dc:description> After the StartScaleService event is triggered, the truck is
						going to be weighed and the scale-resource became busy. After being weighed,
						the truck leaves the scale and begins a travel (during which it unloads). An
						EndScaleService event with appropriate delay is created. </dc:description>
				</documentation>
				<WHEN eventType="StartScaleService"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<FOR dataVariable="time" dataType="Integer">
					<ValueExpr language="Java">s.randomScaleTime()</ValueExpr>
				</FOR>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Slot property="scaleServiceBusy" value="true"/>
						</UpdateObject>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="EndScaleService">
							<Delay>
								<ValueExpr language="Java">time</ValueExpr>
							</Delay>
							<Slot property="endTime">
								<ValueExpr language="Java">time</ValueExpr>
							</Slot>
						</CausedEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>

			<!-- =================================================== -->
			<EnvironmentRule name="DepartureWhenScaleQueueEmpty_Rule">
				<!-- ==================================================== -->
				<documentation>
					<dc:description> When the truck leaves the scale, if the scaling queue is empty,
						then, the scale queue is no longer busy. An StartTransportService event is
						created. </dc:description>
				</documentation>
				<WHEN eventType="EndScaleService" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[s.getScaleQL() == 0]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="s">
						<Slot property="scaleServiceBusy" value="false"/>
					</UpdateObject>
					<UpdateStatisticsVariable variable="sru">
						<ValueExpr language="Java"><![CDATA[
SimStatistics.sru.getValue() + event.getEndTime()
          ]]></ValueExpr>
					</UpdateStatisticsVariable>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<CausedEventExpr eventType="StartTransportService"/>
				</SCHEDULE-EVT>
			</THEN>
			</EnvironmentRule>

			<!-- ======================================================== -->
			<EnvironmentRule name="DepartureWhenScaleQueueNotEmpty_Rule">
				<!-- ========================================================== -->
				<documentation>
					<dc:description> When the truck leaves the scale, if the scale queue is not
						empty, the next truck will be weighed, so a new StartScaleService event is
						created and the queue size is decreased by 1. </dc:description>
				</documentation>
				<WHEN eventType="EndScaleService" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<IF language="Java">s.getScaleQL() > 0</IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Slot property="scaleServiceBusy" value="false"/>
						</UpdateObject>
						<UpdateObject objectVariable="s">
							<Decrement property="scaleQL" value="1"/>
						</UpdateObject>
						<UpdateStatisticsVariable variable="sru">
							<ValueExpr language="Java"><![CDATA[
SimStatistics.sru.getValue() + event.getEndTime()
            ]]></ValueExpr>
						</UpdateStatisticsVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<CausedEventExpr eventType="StartScaleService"/>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>

			<!-- ========================================================== -->
			<EnvironmentRule name="StartTransportService_Rule">
				<!-- ============================================================= -->
				<documentation>
					<dc:description> We schedule an ArrivalAtLoaders event with the appropriate
						delay, in order to simulate the transportation time. </dc:description>
				</documentation>
				<WHEN eventType="StartTransportService"/>
				<FOR objectType="ServiceDoubleQueueSystem" objectVariable="s" objectIdRef="1"/>
				<FOR dataVariable="arrivalTime" dataType="Integer">
					<ValueExpr language="Java">s.randomTravelTime()</ValueExpr>
				</FOR>
			<DO>
				<SCHEDULE-EVT>
					<CausedEventExpr eventType="ArrivalAtLoaders">
						<Delay>
							<ValueExpr language="Java">arrivalTime</ValueExpr>
						</Delay>
					</CausedEventExpr>
				</SCHEDULE-EVT>
			</DO>
			</EnvironmentRule>

			<!-- =========================================================== -->
			<EnvironmentRule name="StartSimulation_Rule">
				<!-- ============================================================== -->
				<documentation>
					<dc:description> We start the simulation with 6 trucks waiting in the loaders
						queue. We schedule an StartLoadingService event for the first truck from the
						queue. </dc:description>
				</documentation>
				<WHEN eventType="StartSimulation"/>
			<DO>
				<SCHEDULE-EVT>
					<CausedEventExpr eventType="StartLoadingService"/>
				</SCHEDULE-EVT>
			</DO>
			</EnvironmentRule>
		</EnvironmentRules>
	</SimulationModel>

	<!-- =================================================== -->
	<InitialState>
		<!-- =================================================== -->
		<Object type="ServiceDoubleQueueSystem" name="SDQS" id="1">
			<Slot property="scaleServiceBusy" value="false"/>
			<!--   We start the simulation with 6 trucks waiting in the loaders queue. -->
			<Slot property="loadersQL" value="6"/>
			<Slot property="scaleQL" value="0"/>
			<Slot property="freeLoaders" value="2"/>
		</Object>
		<ExogenousEvent type="StartSimulation" occurrenceTime="1"/>
	</InitialState>

	<!-- =================================================== -->
	<UserInterface>
		<!-- =================================================== -->
		<StatisticsUI>
			<StatisticsVariableUI variable="lru">
				<Label>
					<Text xml:lang="en">Loaders resource utilization</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Time weighted average of loader resource utilization.</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="sru">
				<Label>
					<Text xml:lang="en">Scale resource utilization</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Time weighted average of scale resource utilization.</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>
	</UserInterface>
</SimulationScenario>
