<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../ext/aorsl/AORSL-0-8-3.xsd"
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns="http://aor-simulation.org"
	xmlns:aors="http://aor-simulation.org" version="0.8.3"
	scenarioName="ServiceDoubleQueueWithResourceUtilizationStatisticsWithActivities"
	scenarioTitle="ServiceDoubleQueueWithResourceUtilizationStatisticsWithActivities">
	<SimulationParameters simulationSteps="10000" stepDuration="1" timeUnit="min"
		randomSeed="10"/>
	<SimulationModel
		modelName="ServiceDoubleQueueWithResourceUtilizationStatisticsWithActivities"
		modelTitle="ServiceDoubleQueue with resource utilization statistics and with activities">

		<documentation>
			<dc:creator>Oana Nicolae</dc:creator>
			<dc:creator>Jens Werner</dc:creator>
			<dc:created>20090428</dc:created>
			<dc:modified>20090913</dc:modified>
			<dc:source>DoubleQueue_withActivities.xml</dc:source>
			<aors:description>General Case: A Double Queue system where the entities are waiting in line for some resources with restricted capacity (i.e. loaders(2) and scale(1)) to be available. - Particular Case: The Dump-Truck Problem. We abstract away the Truck objects (6), the Loaders (2) and the Scale (1) objects and also the queue objects (2), as for calculating the resource utilization statistics (the percentage while the resource was busy in the system) we only need the delays of the EndService scheduled events for loaders, scale and transportation resources. The resources are also simulated using their maximum capacity expressed as numbers. </aors:description>
			<processModelDiagram>DoubleQueue_withActivities_Collapsed.png</processModelDiagram>
		</documentation>
		<Statistics>
			<!-- Time-persistent statistical colectors: return the time-weighted values of the variables lru / sru that track the
      utilization of the two resources from the system-->
			<Variable name="loadingTimes" dataType="Integer" initialValue="0"
				displayName="Total loaders utilization number"/>
			<Variable name="lru" dataType="Float"
				displayName="Time-weighted average of loaders-resource utilization"
				initialValue="0">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java"><![CDATA[
           SimStatistics.lru.getValue() /  SimStatistics.loadingTimes.getValue()
           ]]></ValueExpr>
				</Source>

			</Variable>
			<Variable name="scaleTimes" dataType="Integer" initialValue="0"
				displayName="Total scale utilization number"/>
			<Variable name="sru" dataType="Float"
				displayName="Time-weighted average of scale-resource utilization" initialValue="0">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java"><![CDATA[
         SimStatistics.sru.getValue() / SimStatistics.scaleTimes.getValue()
        ]]></ValueExpr>
				</Source>
			</Variable>
			<Variable name="transportationTimes" dataType="Integer" initialValue="0"
				displayName="Total transportations number"/>
			<Variable name="tru" dataType="Float"
				displayName="Time-weighted average of transportation-resource utilization"
				initialValue="0">
				<Source computeOnlyAtEnd="true">
					<ValueExpr language="Java"><![CDATA[
         SimStatistics.tru.getValue() / SimStatistics.transportationTimes.getValue()
        ]]></ValueExpr>
				</Source>
			</Variable>
		</Statistics>

		<EntityTypes>
			<!-- =================================================== -->
			<ExogenousEventType name="StartSimulation">
				<!-- ================================================= -->
				<Periodicity>
					<ValueExpr language="Java">0</ValueExpr>
				</Periodicity>
			</ExogenousEventType>

			<ActivityType name="PerformLoading">
				<Function name="randomLoadTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 30) return 5; 		    // with probability 0.30
					else if (r < 80) return 10;		// with probability 0.50
					else return 15;			          // with probability 0.20
					]]></Body>
				</Function>
				<FOR objectVariable="system" objectIdRef="1"/>
				<Duration>
					<ValueExpr language="Java">randomLoadTime()</ValueExpr>
				</Duration>
				<ActivityStartEffect>
					<UpdateObject objectVariable="system">
						<Decrement property="freeLoaders" value="1"/>
						<Slot property="loadersUtilization" value="0"/>
					</UpdateObject>
				</ActivityStartEffect>
				<ActivityEndEffect>
					<UpdateObject objectVariable="system">
						<Increment property="freeLoaders" value="1"/>
					</UpdateObject>
				</ActivityEndEffect>
			</ActivityType>

			<ActivityType name="PerformScaling">
				<Function name="randomScaleTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 70) return 12;     // with probability 0.70
					else return 16;	           // with probability 0.30
					]]></Body>
				</Function>
				<FOR objectVariable="system" objectIdRef="1"/>
				<Duration>
					<ValueExpr language="Java">randomScaleTime()</ValueExpr>
				</Duration>
				<ActivityStartEffect>
					<UpdateObject objectVariable="system">
						<Slot property="scaleServiceBusy" value="true"/>
						<Slot property="scaleUtilization" value="0"/>
					</UpdateObject>
				</ActivityStartEffect>
				<ActivityEndEffect>
					<UpdateObject objectVariable="system">
						<Slot property="scaleServiceBusy" value="false"/>
					</UpdateObject>
				</ActivityEndEffect>
			</ActivityType>

			<ActivityType name="PerformTransportation">
				<Function name="randomTravelTime" resultType="Integer">
					<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 40) return 40; 	              // with probability 0.40
					else if (r < 70) return 60;		        // with probability 0.30
					else if (r < 90) return 80;		        // with probability 0.20
					else return 100;		                	// with probability 0.10
					]]></Body>
				</Function>
				<Duration>
					<ValueExpr language="Java">randomTravelTime()</ValueExpr>
				</Duration>
			</ActivityType>

			<!-- =================================================== -->
			<AgentType name="ServiceDoubleQueue">
				<!-- =================================================== -->
				<Attribute name="loadersQL" type="Integer"/>
				<Attribute name="scaleQL" type="Integer"/>
				<Attribute name="freeLoaders" type="Integer"/>
				<Attribute name="scaleServiceBusy" type="Boolean"/>
				<Attribute type="Integer" name="scaleUtilization" initialValue="0"/>
				<Attribute type="Integer" name="scaleResourceNr" initialValue="1"/>
				<Attribute type="Integer" name="loadersUtilization" initialValue="0"/>
				<Attribute type="Integer" name="loaderResourceNr" initialValue="2"/>
			</AgentType>
		</EntityTypes>

		<EnvironmentRules>
			<!-- =================================================== -->
			<EnvironmentRule name="StartSimulation_Rule">
				<!-- =================================================== -->
				<documentation>
					<description> When we start the simulation we have two loader-resources free,
						therefore we schedule two ActivityStartEvent(s) for PerformLoading activity.
					</description>
				</documentation>
				<WHEN eventType="StartSimulation"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
 s.getFreeLoaders() == 2 && s.getLoadersQL() >1
         ]]></IF>
				<THEN>
					<SCHEDULE-EVT>
						<ActivityStartEventExpr activityType="PerformLoading"/>
						<ActivityStartEventExpr activityType="PerformLoading"/>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>

			<!-- =================================================================== -->
			<EnvironmentRule name="DepartureFromLoaders_Rule">
				<!-- ===================================================================== -->
				<documentation>
					<description> On departure of a truck, when the loaders queue is not empty, the
						next truck will be weighed, so a new future ActivityStartEvent for
						PerformLoading activity is created and the loaders queue length is decreased
						by 1. We also schedule the corresponding ActivityStartEvent for PerformScaling
						activity. </description>
				</documentation>
				<WHEN eventType="ActivityEndEvent" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
event.getActivity().getName().equals("PerformLoading") 
        ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="s">
						<Increment property="scaleUtilization" value="1"/>
						<Decrement property="loadersQL" value="1"/>
					</UpdateObject>
					<UpdateStatisticsVariable variable="lru">
						<ValueExpr language="Java"><![CDATA[
 SimStatistics.lru.getValue() + event.getActivity().getDuration()
           ]]></ValueExpr>
					</UpdateStatisticsVariable>
					<UpdateStatisticsVariable variable="loadingTimes">
						<ValueExpr language="Java">SimStatistics.loadingTimes.getValue() +
							1</ValueExpr>
					</UpdateStatisticsVariable>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<ActivityStartEventExpr activityType="PerformLoading">
						<Condition language="Java"><![CDATA[
 s.getLoadersQL() > 1
              ]]></Condition>
					</ActivityStartEventExpr>
					<ActivityStartEventExpr activityType="PerformScaling">
						<Condition language="Java"><![CDATA[
!s.isScaleServiceBusy() && s.getScaleUtilization() <=
 s.getScaleResourceNr()
              ]]></Condition>
					</ActivityStartEventExpr>
				</SCHEDULE-EVT>
			</THEN>
			</EnvironmentRule>

			<!-- =================================================== -->
			<EnvironmentRule name="ArrivalAtScaleQueueWhenBusy_Rule">
				<!-- ===================================================== -->
				<documentation>
					<description> When arriving at the scale queue, the truck waits in a line for
						the scale resource to be available, therefore the scaleQL is increased by 1.
					</description>
				</documentation>
				<WHEN eventType="ActivityEndEvent" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java">
					<![CDATA[
 event.getActivity().getName().equals("PerformLoading") &&
 (s.isScaleServiceBusy() || s.getScaleUtilization() > s.getScaleResourceNr())
         ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="s">
							<Increment property="scaleQL" value="1"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>

			<!-- ======================================================== -->
			<EnvironmentRule name="DepartureFromScaleWhenEmpty_Rule">
				<!-- ========================================================== -->
				<documentation>
					<description> When the truck leaves the scale, if the scale queue it is empty,
						then we schedule a ActivityStartEvent for PerformTransportation activity.
					</description>
				</documentation>
				<WHEN eventType="ActivityEndEvent" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
 event.getActivity().getName().equals("PerformScaling") && s.getScaleQL() == 0
          ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateStatisticsVariable variable="sru">
						<ValueExpr language="Java"><![CDATA[
SimStatistics.sru.getValue() + event.getActivity().getDuration()
            ]]></ValueExpr>
					</UpdateStatisticsVariable>
					<UpdateStatisticsVariable variable="scaleTimes">
						<ValueExpr language="Java">SimStatistics.scaleTimes.getValue() + 1</ValueExpr>
					</UpdateStatisticsVariable>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<ActivityStartEventExpr activityType="PerformTransportation"/>
				</SCHEDULE-EVT>
			</THEN>
			</EnvironmentRule>

			<!-- ======================================================== -->
			<EnvironmentRule name="DepartureFromScaleWhenNotEmpty_Rule">
				<!-- ========================================================== -->
				<documentation>
					<description> When the truck leaves the scale, if the scale queue is not empty,
						the next truck will be weighed, so a new ActivityStartEvent is scheduled for
						PerformScaling and the queue size is decreased by 1. We also schedule an
						ActivityStartEvent for the PerformTransportation activity. </description>
				</documentation>
				<WHEN eventType="ActivityEndEvent" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
event.getActivity().getName().equals("PerformScaling") && s.getScaleQL() > 0
          ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="s">
						<Decrement property="scaleQL" value="1"/>
					</UpdateObject>
					<UpdateStatisticsVariable variable="sru">
						<ValueExpr language="Java"><![CDATA[
SimStatistics.sru.getValue() + event.getActivity().getDuration()
            ]]></ValueExpr>
					</UpdateStatisticsVariable>
					<UpdateStatisticsVariable variable="scaleTimes">
						<ValueExpr language="Java">SimStatistics.scaleTimes.getValue() + 1</ValueExpr>
					</UpdateStatisticsVariable>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<ActivityStartEventExpr activityType="PerformScaling">
						<Condition language="Java"><![CDATA[
!s.isScaleServiceBusy() 
             ]]></Condition>
					</ActivityStartEventExpr>
					<ActivityStartEventExpr activityType="PerformTransportation"/>
				</SCHEDULE-EVT>
			</THEN>
			</EnvironmentRule>

			<!-- =================================================== -->
			<EnvironmentRule name="ArrivalAtLoaders_Rule">
				<!-- =================================================== -->
				<documentation>
					<description> On arrival of a truck, when there is at least one loader-resource
						free, we schedule a ActivityStartEvent for PerformLoading activity. If there
						is the case when many trucks arrive on very close steps (when the
						StartActivityEffects variables are not yet updated i.e. the freeLoaders var is
						not yet decremented) then we should allow no more than 2 trucks(=
						loaderResourceNr) to be loaded simultaneously. </description>
				</documentation>
				<WHEN eventType="ActivityEndEvent" eventVariable="event"/>
				<FOR objectType="ServiceDoubleQueue" objectVariable="s" objectIdRef="1"/>
				<IF language="Java"><![CDATA[
 event.getActivity().getName().equals("PerformTransportation")
         ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="s">
						<Increment property="loadersQL" value="1"/>
						<Increment property="loadersUtilization" value="1"/>
					</UpdateObject>
					<UpdateStatisticsVariable variable="tru">
						<ValueExpr language="Java"><![CDATA[
 SimStatistics.tru.getValue() + event.getActivity().getDuration()
           ]]></ValueExpr>
					</UpdateStatisticsVariable>
					<UpdateStatisticsVariable variable="transportationTimes">
						<ValueExpr language="Java">SimStatistics.transportationTimes.getValue() +
							1</ValueExpr>
					</UpdateStatisticsVariable>
				</UPDATE-ENV>
				<SCHEDULE-EVT>
					<ActivityStartEventExpr activityType="PerformLoading">
						<Condition language="Java"><![CDATA[
(s.getFreeLoaders() == 2 || s.getFreeLoaders() == 1) && (s.getLoadersUtilization() <
 s.getLoaderResourceNr())
              ]]></Condition>
					</ActivityStartEventExpr>
				</SCHEDULE-EVT>
			</THEN>
			</EnvironmentRule>
		</EnvironmentRules>
	</SimulationModel>

	<!-- =================================================== -->
	<InitialState>
		<!-- =================================================== -->
		<Agent type="ServiceDoubleQueue" name="SDQS" id="1">
			<Slot property="scaleServiceBusy" value="false"/>
			<!--   We start the simulation with 6 trucks waiting in the loaders queue. -->
			<Slot property="loadersQL" value="6"/>
			<Slot property="scaleQL" value="0"/>
			<Slot property="freeLoaders" value="2"/>
		</Agent>
		<ExogenousEvent type="StartSimulation" occurrenceTime="1"/>
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface>
		<!-- =================================================== -->
		<StatisticsUI>
			<StatisticsVariableUI variable="lru">
				<Label>
					<Text xml:lang="en">Loaders resource utilization</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Time weighted average of loader resource utilization.</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="sru">
				<Label>
					<Text xml:lang="en">Scale resource utilization</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Time weighted average of scale resource utilization.</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>
	</UserInterface>

</SimulationScenario>
