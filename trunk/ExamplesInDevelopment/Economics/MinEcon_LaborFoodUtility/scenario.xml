<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns="http://aor-simulation.org"
	xmlns:aors="http://aor-simulation.org"
	version="0.8.4"
	scenarioName="MinEcon_LaborFoodUtility_Scenario1"
	scenarioTitle="Minimal Economy with Labor, Food and Utility Markets"
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0" randomSeed="47"/>
	<SimulationModel modelName="MinEcon_LaborFoodUtility">
		<documentation>
			<dc:subject>Agent-based computational economics</dc:subject>
			<dc:creator>Lars Langjahr</dc:creator>
			<dc:created>20101031</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:contributor>Gabriel Diaconita</dc:contributor>
			<dc:modified>20101203</dc:modified>
			<dc:source>The Baseline 4 model from the EOS ("Economics via Object-oriented Simulation") project at Princeton University led by Ken Steiglitz, see http://eos.cs.princeton.edu/.</dc:source>
			<aors:shortDescription xmlns="http://www.w3.org/1999/xhtml">
				A simulation model of an economy with three commodities: food, labor, and "utility" 
				and are four types of economic agents: laborers, owners, farms, and utility factories. 
			</aors:shortDescription>
			<aors:description xmlns="http://www.w3.org/1999/xhtml">
				A simulation model of an economy with three commodities: food, labor, and "utility". 
				It also implements ownership of farms and factories. There are four types of economic agents: 
				laborers, owners, farms, and utility factories. Laborers are allotted a certain amount 
				of labor at each step, which they can either sell to a farm or utility factory, or chose 
				to convert to utility.  Laborers can also buy food and utility on the open market with the 
				money that they have earned. Owners simply own a farm or a factory, and collect the profits 
				from these endeavors, which they use to purchase food and utility. Farms hire laborers to 
				produce food, and then sell this food on the open market, giving any profits to their 
				owners. Utility factories operate in the same manner, but produce utility instead of food. 
				In addition, each laborer and owner must consume a sufficient quantity of food 
				at each step or it dies, and owners and laborers seek to purchase.
				For more information, see <a href="http://eos.cs.princeton.edu/DeLuise_JIW05.27.10.pdf">Developing 
					a Micro-Validated Baseline for the EOS Framework</a> by Anthony M. DeLuise.
			</aors:description>
			<informationModelDiagram>EOS.png</informationModelDiagram>
			<dc:license>http://creativecommons.org/licenses/by-nc-sa/2.5/</dc:license>
		</documentation>
		
		<Statistics>
			<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="PriceLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="SellOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="4"/>
				</Source>
				</Variable>
		</Statistics>
		
		<DataTypes>
			<!--====================================-->
			<ComplexDataType name="TradeOffer">
			<!--====================================-->
				<Attribute type="String" name="product"/>
				<Attribute type="Float" name="price"/>
				<Attribute type="Float" name="Quantity"/>
				<Attribute type="Boolean" name="buy"/>
				<Attribute type="Integer" name="bidderIdRef"/>
				<!--<ReferenceProperty name="bidder" type="EconomicAgent"/>-->
			</ComplexDataType>
		</DataTypes>
		
		<Globals>
			<!--====================================-->
			<GlobalFunction name="getAssetByName" resultType="aors.util.economics.Quantity">
				<documentation>
					<dc:description> Find an asset from a Quantitylist by String</dc:description>
				</documentation>
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					int i;
					for (i=0; i < assets.size(); i++){
						if (!assets.get(i).isDiscrete()) {
							if (((aors.util.economics.ContinuousQuantity)assets.get(i)).getContinuousQuantityType().getName().equals( name)){
								break;
							}
						} else {
							if (((aors.util.economics.DiscreteQuantity)assets.get(i)).getType().equals(name)){
								break;
							}
						}
					}
					return assets.get(i);
					]]></Body>	
				<Body language="JavaScript"><![CDATA[
					var i = 0;
					for (i = 0; i < assets.size(); i++) {
						if (!assets.get(i).isDiscrete()) {
							if (assets.get(i).getContinuousQuantityType().getName() == name)
								break;
						}
						else {
							if (assets.get(i).getType() == name)
								break;
						}
					}
					return assets.get(i);
					]]></Body>	
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addContinuous" resultType="Double">
				<documentation>
					<dc:description> Adds a ContinuousQuantity to a Quantitylist</dc:description>
				</documentation>
				<Parameter name="quantity" type="Double"/>
				<Parameter name="name" type="String"/>
				<Parameter name="unit" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.ContinuousQuantityType assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
					aors.util.economics.ContinuousQuantity asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
					assets.add(asset);
					return quantity;
				]]></Body>
				<Body language="JavaScript"><![CDATA[
					var assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
					var asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
					assets.add(asset);
					return quantity;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="getContinuous" resultType="aors.util.economics.Quantity">
				<documentation>
					<dc:description> Gets a ContinuousQuantity item</dc:description>
				</documentation>
				<Parameter name="quantity" type="Double"/>
				<Parameter name="name" type="String"/>
				<Parameter name="unit" type="String"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.ContinuousQuantityType assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
					aors.util.economics.ContinuousQuantity asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
					return asset;
				]]></Body>
				<Body language="JavaScript"><![CDATA[
					var assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
					var asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
					return asset;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addDiscrete" resultType="Long">
				<documentation>
					<dc:description> Adds a DiscreteQuantity to a Quantitylist</dc:description>
				</documentation>
				<Parameter name="quantity" type="Integer"/>
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.DiscreteQuantity asset = new aors.util.economics.DiscreteQuantity( name, (int)quantity);
					assets.add( asset);
					return quantity;
				]]></Body>
				<Body language="JavaScript"><![CDATA[
					var asset = new aors.util.economics.DiscreteQuantity(name, quantity);
					assets.add(asset);
					return quantity;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="getDiscrete" resultType="aors.util.economics.Quantity">
				<documentation>
					<dc:description> Gets DiscreteQuantity item</dc:description>
				</documentation>
				<Parameter name="quantity" type="Integer"/>
				<Parameter name="name" type="String"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.DiscreteQuantity asset = new aors.util.economics.DiscreteQuantity( name, (int)quantity);
					return asset;
				]]></Body>
				<Body language="JavaScript"><![CDATA[
					var asset = new aors.util.economics.DiscreteQuantity(name, quantity);
					return asset;
				]]></Body>
			</GlobalFunction>
		</Globals>
		
		<EntityTypes>
			<!--====================================-->
			<MessageType name="StartOfDay_Notification">
				<!--====================================-->
				<Attribute name="price" type="Float"/>
				<Attribute name="marketType" type="String" />
			</MessageType>
			<!--====================================-->
			<MessageType name="Act_msg" />
			<!--====================================-->
			<MessageType name="OfferToBuyFood">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellFood">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyLabor">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellLabor">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyUtility">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellUtility">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="ClearMarket" />
			<!--====================================-->
			<MessageType name="MatchingOffer" >
				<!--====================================-->
				<ComplexDataProperty name="offer" type="TradeOffer"/>
			</MessageType>
			<!--=======================================================-->
			<ExogenousEventType name="StartOfDay" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="StartWork" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="CloseMarket" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="Init" />
			<!-- ============================================ -->
			<AgentType name="EconomicAgent">
			<!-- ============================================ -->
				<ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded"/>
				<Attribute type="Float" name="LABOR_ALLOWANCE" initialValue="1.0"/>
				<Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
				<Attribute type="Float" name="lastFoodPrice" initialValue="0"/>
				<Attribute type="Float" name="lastLaborPrice" initialValue="0"/>
				<Attribute type="Float" name="lastUtilityPrice" initialValue="0"/>
				<Attribute type="Float" name="foodAmount" initialValue="0"/>
				<Attribute type="Float" name="goldAmount" initialValue="0"/>
				<Attribute type="Float" name="laborAmount" initialValue="0"/>
				<Attribute type="Float" name="utilityAmount" initialValue="0"/>
				
				<Function name="updateFood" resultType="Float">
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if (offer.getProduct().equals("Food")){
							if (offer.isBuy()) 
								Global.getAssetByName("Food", getAssets()).deposit(offer.getQuantity());	
							 else 
								Global.getAssetByName("Food", getAssets()).withdraw(offer.getQuantity());
						}
						return Global.getAssetByName("Food", getAssets()).getQuantity();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						if (offer.getProduct() == "Food") {
							if (offer.isBuy())
								eos_economy.controller.Global.getAssetByName("Food", assets).deposit(offer.getQuantity());	
							else 
								eos_economy.controller.Global.getAssetByName("Food", assets).withdraw(offer.getQuantity());
						}
						return eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity();
					]]></Body>
				</Function>
		
				<Function name="updateGold" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the gold amount by the quantity times the price of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if (offer.isBuy())
							Global.getAssetByName("Money", getAssets()).withdraw(offer.getQuantity() * offer.getPrice());					
						else
							Global.getAssetByName("Money", getAssets()).deposit(offer.getQuantity() * offer.getPrice());
						
						return Global.getAssetByName("Money",getAssets()).getQuantity();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						if (offer.isBuy()) 
							eos_economy.controller.Global.getAssetByName("Money", assets).withdraw(offer.getQuantity() * offer.getPrice());					
						else 
							eos_economy.controller.Global.getAssetByName("Money", assets).deposit(offer.getQuantity() * offer.getPrice());
						
						return eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateLabor" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the gold amount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if (offer.getProduct().equals("Labor")) {
							if (offer.isBuy()) 
								Global.getAssetByName("Labor", getAssets()).deposit(offer.getQuantity());
							else 
								Global.getAssetByName("Labor", getAssets()).withdraw(offer.getQuantity());
						}
						return Global.getAssetByName("Labor", getAssets()).getQuantity();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						if (offer.getProduct() == "Labor") {
							if (offer.isBuy()) 
								eos_economy.controller.Global.getAssetByName("Labor", assets).deposit(offer.getQuantity());
							else 
								eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(offer.getQuantity());
						}
						return eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateUtility" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if (offer.getProduct().equals("Utility")){
							if (offer.isBuy())
								Global.getAssetByName("Utility",getAssets()).deposit(offer.getQuantity());
							else
								Global.getAssetByName("Utility",getAssets()).withdraw(offer.getQuantity());
						}
						return Global.getAssetByName("Utility",getAssets()).getQuantity();										
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						if (offer.getProduct() == "Utility") {
							if (offer.isBuy())
								eos_economy.controller.Global.getAssetByName("Utility", assets).deposit(offer.getQuantity());
						    else 
								eos_economy.controller.Global.getAssetByName("Utility", assets).withdraw(offer.getQuantity());
						}
						return eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity();									
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Food_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the food market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Food")</IF> 
					<IF language="JavaScript">this.msg.getMarketType() == "Food"</IF> 
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastFoodPrice">
								<ValueExpr language="Java JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Labor_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the labor market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Labor")</IF>
					<IF language="JavaScript">this.msg.getMarketType() == "Labor"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastLaborPrice">
								<ValueExpr language="Java JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Utility_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the utility market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Utility")</IF>
					<IF language="JavaScript">this.msg.getMarketType() == "Utility"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastUtilityPrice">
								<ValueExpr language="Java JavaScript">this.msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Update_Rule" agentVariable="p">	
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Succesful transactions are received from the market, food, labor, utility and gold are updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="goldAmount">
								<ValueExpr language="Java JavaScript">this.p.updateGold(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="foodAmount">
								<ValueExpr language="Java JavaScript">this.p.updateFood(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="laborAmount">
								<ValueExpr language="Java JavaScript">this.p.updateLabor(this.msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="utilityAmount">
								<ValueExpr language="Java JavaScript">this.p.updateUtility(this.msg.getOffer())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="30.0"/>
				<Attribute type="Float" name="TARGET_MONEY_STOCK" initialValue="60.0"/>
				<Attribute type="Float" name="TARGET_FIRM_MONEY_STOCK" initialValue="100"/>
				<Attribute type="Float" name="EAT_AMOUNT" initialValue="1.0"/>
				<Attribute type="Boolean" name="owner" initialValue="false"/>
				<Attribute type="Boolean" name="hasFirm" initialValue="false"/>
				<Attribute type="Float" name="konto"  initialValue="0"/>
				<ReferenceProperty name="firm" type="Firm"/>
				<ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the foodBuyList</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						if (isOwner()) {
							double firmMoney = Global.getAssetByName("Money",getFirm().getAssets()).getQuantity();
							
							double moneyToWithdraw = Math.max(getTARGET_MONEY_STOCK() - Global.getAssetByName("Money", getAssets()).getQuantity() , firmMoney - getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								Global.getAssetByName("Money", getAssets()).deposit(Global.getAssetByName("Money", getFirm().getAssets()).withdraw(moneyToWithdraw));
	                    	}
                    	}
                    	setKonto(Global.getAssetByName("Money", getAssets()).getQuantity());
						getFoodBuyLists().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			          	for (double x = Global.getAssetByName("Food", getAssets()).getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	TradeOffer o = new TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyLists().add(o);
			            	setKonto(getKonto()-price);
			          	}
						return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						assets = this.getAllAssets();
						if (this.isOwner()) {
							var firmMoney = eos_economy.controller.Global.getAssetByName("Money", this.getFirm().getAllAssets()).getQuantity();
							
							var moneyToWithdraw = Math.max(this.getTARGET_MONEY_STOCK() - eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity(), firmMoney - this.getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								var moneyAsset = eos_economy.controller.Global.getAssetByName("Money", assets);
								var firmMoneyAsset = eos_economy.controller.Global.getAssetByName("Money", this.getFirm().getAllAssets());
								moneyAsset.deposit(firmMoneyAsset.withdraw(moneyToWithdraw));
							}
							
						}
							
						this.setKonto(eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity());
						this.getAllFoodBuyLists().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
						for (var x = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new eos_economy.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getAllFoodBuyLists().add(o);
							this.setKonto(this.getKonto() - price);
						}
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the foodSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getFoodSellLists().clear();
						if (Global.getAssetByName("Food", getAssets()).getQuantity() > 1.5 * getTARGET_FOOD_STOCK()){
				        	final double quantum = getEAT_AMOUNT() * 1.0;
				          	for (double x = Global.getAssetByName("Food", getAssets()).getQuantity(); x > 1.5 * getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
					            double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / (x - getTARGET_FOOD_STOCK()), .2) + 0.90 + Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
					            double price = mod * getLastFoodPrice();
					            if (price <= 0.0) break;
								
					            TradeOffer o = new TradeOffer();
					            o.setProduct("Food");
				            	o.setQuantity(quantum);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getFoodSellLists().add(o);
				          }
						return true;
						}
						return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						this.getAllFoodSellLists().clear();
						
						if (eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() > 1.5 * this.getTARGET_FOOD_STOCK()) {
							var quantum = this.getEAT_AMOUNT() * 1.0;
							for (var x = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity(); x > 1.5 * this.getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
								var random_value = js.util.Random.uniform(0.0, 1.0);
								var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / (x - this.getTARGET_FOOD_STOCK()), 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
								var price = mod * this.getLastFoodPrice();
								if (price <= 0.0) break;
								
								var o = new eos_economy.model.dataTypes.TradeOffer();
								o.setProduct("Food");
								o.setQuantity(quantum);
								o.setPrice(price);
								o.setBuy(false);
								
								o.setBidderIdRef(bidderIdRef);
								this.getAllFoodSellLists().add(o);
							}
							return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the sell offers and adds them to the laborSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						if (isOwner() == false){
							double price;
							getLaborSellLists().clear();
							if (getLastLaborPrice() > getLastFoodPrice() && Global.getAssetByName("Food", getAssets()).getQuantity() < getTARGET_FOOD_STOCK()){
					        	price = (getLastLaborPrice() - getLastFoodPrice()) * ((Global.getAssetByName("Food", getAssets()).getQuantity()*Global.getAssetByName("Food", getAssets()).getQuantity()) / (getTARGET_FOOD_STOCK()*getTARGET_FOOD_STOCK())) + getLastFoodPrice();
					        	price = Math.min(price, getLastLaborPrice() * 1.1);
					        }else{
					            price = getLastLaborPrice();
					            final double frac = 0.95;
					            double mod =((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
					        	price *= mod;
					        }
								TradeOffer o = new TradeOffer();
					            o.setProduct("Labor");
				            	o.setQuantity(getLABOR_ALLOWANCE());
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getLaborSellLists().add(o);
				            	return true;
				            
				      }
				      return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						if (!this.isOwner()){ 
							var price = 0;
							var assets = this.getAllAssets();
							this.getAllLaborSellLists().clear();
							if (this.getLastLaborPrice() > this.getLastFoodPrice() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() < this.getTARGET_FOOD_STOCK()){
								price = (this.getLastLaborPrice() - this.getLastFoodPrice()) * ((eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() * eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity()) / (this.getTARGET_FOOD_STOCK() * this.getTARGET_FOOD_STOCK())) + this.getLastFoodPrice();
								price = Math.min(price, this.getLastLaborPrice() * 1.1);
							} else {
								price = this.getLastLaborPrice();
								var frac = 0.95;
								var random_value = js.util.Random.normal(0.0, 1.0);
								var mod = (Math.max(Math.min(random_value, 2.0), -2) / 2) * (1 - frac) + 1;
								price *= mod;
							}
								var o = new eos_economy.model.dataTypes.TradeOffer();
								o.setProduct("Labor");
								o.setQuantity(this.getLABOR_ALLOWANCE());
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getAllLaborSellLists().add(o);

								return true;
					  }
					  return false; 
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the utilityBuyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getUtilityBuyLists().clear();
						double purse = getKonto();
						if (purse > getTARGET_MONEY_STOCK() && Global.getAssetByName("Food", getAssets()).getQuantity() > getTARGET_FOOD_STOCK()) {
					      	final double frac = 0.95;
					      	double factor = ((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
					      	double uPrice = getLastUtilityPrice() * factor;
					      	double quantity = (getKonto() - getTARGET_MONEY_STOCK()) / uPrice;
					      	if (quantity > 0 && uPrice > 0.0){
					      		for(double d = quantity; d > 0; d--){
						        	TradeOffer o = new TradeOffer();
					            	o.setProduct("Utility");
				            		o.setQuantity(1);
				            		o.setPrice(uPrice);
				            		o.setBuy(true);
				            		o.setBidderIdRef(bidderIdRef);
				            		getUtilityBuyLists().add(o);
			            		}
			            	}
			            }
			            return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getAllUtilityBuyLists().clear();
						var assets = this.getAllAssets();
						var purse = this.getKonto();
						
						if (purse > this.getTARGET_MONEY_STOCK() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() > this.getTARGET_FOOD_STOCK()) {
							var frac = 0.95;
							var random_value = js.util.Random.normal(0.0, 1.0); 
							var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1);
							var uPrice = this.getLastUtilityPrice() * factor;
							var quantity = (this.getKonto() - this.getTARGET_MONEY_STOCK()) / uPrice;
							if (quantity > 0 && uPrice > 0.0) {
								for (var d = quantity; d > 0; d--) {
									var o = new eos_economy.model.dataTypes.TradeOffer();
									o.setProduct("Utility");
									o.setQuantity(1);
									o.setPrice(uPrice);
									o.setBuy(true);
									o.setBidderIdRef(bidderIdRef);
									this.getAllUtilityBuyLists().add(o);
								}
							}
						}

						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="BuyFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.p.buyFood(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyFood" receiverIdRefs="2">
								<Slot property="buyOffers">
									<ValueExpr language="Java">this.p.getFoodBuyLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.p.getAllFoodBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.p.sellFood(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers">
									<ValueExpr language="Java">this.p.getFoodSellLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.p.getAllFoodSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellLabor_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.p.sellLabor(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellLabor" receiverIdRefs="3">
								<Slot property="sellOffers">
									<ValueExpr language="Java">this.p.getLaborSellLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.p.getAllLaborSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyUtility_Rule" agentVariable="p">
					<documentation>
						<description> The person decides how much utility he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.p.buyUtility(this.p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyUtility" receiverIdRefs="4">
								<Slot property="buyOffers">
									<ValueExpr language="Java">this.p.getUtilityBuyLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.p.getAllUtilityBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Firm" superType="EconomicAgent">
				<Attribute type="Float" name="amountProduced"/>
				<ReferenceProperty name="owner" type="Person"/>
				<ComplexDataProperty name="buyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="initializeOwnership" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Finds an owner for a firm</dc:description>
					</documentation>
					<Parameter name="firm" type="Firm"/>
					<Parameter name="owners" type="List" itemType="aors.model.envsim.Objekt"/>
					<Body language="Java"><![CDATA[
						Person person = null;
						for (Object o : owners){
							if (((Person)o).isOwner() && !((Person)o).isHasFirm()) {
								person = (Person) o;
								((Person) o).setOwner(true);  //???  why? p is owner, already!
								((Person) o).setHasFirm(true);  //???  why both hasFirm and firm?
								((Person) o).setFirm(firm);
								break;
							}
						}	
						return person;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var person = null;
						for (var i = 0; i < owners.size(); i++){
							var o = owners.get(i);
							if (o.isOwner() == true && !(o.isHasFirm())){
								person = o;
								o.setOwner(true);
								o.setHasFirm(true);
								o.setFirm(firm);
								break;
							}
						}	

						return person;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="changeOwner" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>removes an owner from a firm</dc:description>
					</documentation>
					<Body language="Java JavaScript"><![CDATA[
						this.getOwner().setOwner(false);
						this.setOwner(null);
						return this.getOwner();
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Farm" superType="Firm">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="120.0"/>
				<Attribute type="Float" name="TARGET_OWNER_FOOD_STOCK" initialValue="30.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellLists().clear();
						double productQuantity = Global.getAssetByName("Food", getAssets()).getQuantity();
						if (productQuantity == 0) {
							return false;
						} else {
            				double food = productQuantity;
            				double quantum = productQuantity /10;
							while(food > 0){
								double factor = (Math.max(Math.min(Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * 0.1 + 1;
                				double price = getLastFoodPrice() * factor;
                				for(double d = quantum; d > 0; d--){
	                				TradeOffer o = new TradeOffer();
						            o.setProduct("Food");
					            	o.setQuantity(1);
									o.setPrice(price);
					            	o.setBuy(false);
					            	o.setBidderIdRef(bidderIdRef);
					            	getSellLists().add(o);
				            	}
				            	food = food - quantum;
            				}
            			return true;
        				}
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getAllSellLists().clear();
						var assets = this.getAllAssets();
						var productQuantity = eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity();

						if (productQuantity == 0) {
							return false;
						} else {
							var food = productQuantity;
							var quantum = productQuantity / 10.0;
							while (food > 0) {
							    var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = (Math.max(Math.min(random_value, 2.0), -2.0)  / 2.0) * 0.1 + 1;
								var price = this.getLastFoodPrice() * factor;
								for (var d = quantum; d > 0; d--) {
									var o = new eos_economy.model.dataTypes.TradeOffer();
									o.setProduct("Food");
									o.setQuantity(1);
									o.setPrice(price);
									o.setBuy(false);
									o.setBidderIdRef(bidderIdRef);
									this.getAllSellLists().add(o);
								}
								food = food - quantum;
							}
						return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyLists().clear();
						double ownerfoodAmount = Global.getAssetByName("Food", getOwner().getAssets()).getQuantity();
				        if (ownerfoodAmount < 0.75 * getTARGET_OWNER_FOOD_STOCK() && Global.getAssetByName("Food", getAssets()).getQuantity() < getTARGET_FOOD_STOCK()){
				          final double quantum = getLABOR_ALLOWANCE() * 1.0;
				          double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
				          for (double x = ownerfoodAmount; x <= 1.5 * getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
				            if (x == 0.0) x = 0.00000000001;
				            double mod = 0.1 * Math.pow(getTARGET_OWNER_FOOD_STOCK() / x, 0.2) + 0.90 + Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
				            double price = mod*getLastLaborPrice();
				            price = Math.min(price, purse);
				            if (price <= 0.0) break;
				            purse -= quantum * price;
				            if (purse < 0.0) break;
				            
				            TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);        	
				          }
				        }
						double lastProduct = 0.0;
						double minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			            	
			                double marginalProduct = convertToFood(d) - lastProduct;
			                if (lastProduct + Global.getAssetByName("Food", getAssets()).getQuantity() >= getTARGET_FOOD_STOCK()) break;
			
			                double price = marginalProduct * getLastFoodPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			
			                TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(getLABOR_ALLOWANCE());
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);
			            	purse = purse - price;
			            	lastProduct = lastProduct + marginalProduct;
			            }
						return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getAllBuyLists().clear();
						var assets = this.getAllAssets();
						var ownerfoodAmount = eos_economy.controller.Global.getAssetByName("Food", this.getOwner().getAllAssets()).getQuantity();
						if (ownerfoodAmount < 0.75 * this.getTARGET_OWNER_FOOD_STOCK() && eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() < this.getTARGET_FOOD_STOCK()){
						  var quantum = this.getLABOR_ALLOWANCE() * 1.0;
						  var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
						  for (var x = ownerfoodAmount; x <= 1.5 * this.getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0); 
							var mod = 0.1 * Math.pow(this.getTARGET_OWNER_FOOD_STOCK() / x, 0.2) +  0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastLaborPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							purse -= quantum * price;
							if (purse < 0.0) break;
							
							var o = new eos_economy.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getAllBuyLists().add(o);        	
						  }
						}
						
						
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
						
							var marginalProduct = this.convertToFood(d) - lastProduct;
							if (lastProduct + eos_economy.controller.Global.getAssetByName("Food", assets).getQuantity() >= this.getTARGET_FOOD_STOCK()) break;

							var price = marginalProduct * this.getLastFoodPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;

							var o = new eos_economy.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(this.getLABOR_ALLOWANCE());
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getAllBuyLists().add(o);
							purse = purse - price;
							lastProduct = lastProduct + marginalProduct;
						}
						return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much food could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java JavaScript"><![CDATA[return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<Parameter name="ID" type="long"/>
					<Body language="Java"><![CDATA[
						double food = convertToFood(Global.getAssetByName("Labor", getAssets()).getQuantity());
						double labor = Global.getAssetByName("Labor", getAssets()).getQuantity();
						Global.getAssetByName("Labor", getAssets()).withdraw(labor);
						Global.getAssetByName("Food", getAssets()).deposit(food);
						return food;									
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						var food = this.convertToFood(eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity());
						var labor = eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
						eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(labor);
						eos_economy.controller.Global.getAssetByName("Food", assets).deposit(food);
						return food;										
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProduceFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">Global.getAssetByName("Labor", f.getAssets()).getQuantity() > 0</IF>
					<IF language="JavaScript">eos_economy.controller.Global.getAssetByName("Labor", this.f.getAllAssets()).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.f.produceFood(this.f.getId())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The farm decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.f.sellFood(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers">
									<ValueExpr language="Java">this.f.getSellLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.f.getAllSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The farm decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.f.buyLabor(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<ValueExpr language="Java">this.f.getBuyLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.f.getAllBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Factory" superType="Firm">
				<Attribute type="Float" name="TARGET_UTILITY_STOCK" initialValue="60.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellLists().clear();
						final double frac = 0.9;
			            double util = Global.getAssetByName("Utility", getAssets()).getQuantity();
			            double quantum = util / 10; 
			            while (util > 0) {
			            	for (double d = quantum; d > 0; d--) {
				            	double factor = ((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0), -2.0)/ 2) * (1 - frac) + 1); 
				            	double price = getLastUtilityPrice() * factor;
								
			            		TradeOffer o = new TradeOffer();
					            o.setProduct("Utility");
				            	o.setQuantity(1);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getSellLists().add(o);
			            	}
			            	util = util-quantum;
			            }
            			return true;		
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var assets = this.getAllAssets();
						this.getAllSellLists().clear();
						var frac = 0.9;
						var util = eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity();
						var quantum = util / 10.0; 
						while (util > 0) {
							for (var d = quantum; d > 0; d--) {
								var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1); 
								var price = this.getLastUtilityPrice() * factor;
								
								var o = new eos_economy.model.dataTypes.TradeOffer();
								o.setProduct("Utility");
								o.setQuantity(1);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getAllSellLists().add(o);
							}
							util = util - quantum;
						}
						return true;	
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyLists().clear();
						double lastProduct = 0.0, minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToUtility(d) - lastProduct;
			                if (lastProduct + Global.getAssetByName("Utility", getAssets()).getQuantity() >= getTARGET_UTILITY_STOCK()) 
								break;
			
			                double price = marginalProduct * getLastUtilityPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			                
							TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(1);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);
							purse = purse - price; 
			                lastProduct += marginalProduct;
			            }
			        	return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getAllBuyLists().clear();
						var assets = this.getAllAssets();
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = eos_economy.controller.Global.getAssetByName("Money", assets).getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
							var marginalProduct = this.convertToUtility(d) - lastProduct;
							if (lastProduct + eos_economy.controller.Global.getAssetByName("Utility", assets).getQuantity() >= this.getTARGET_UTILITY_STOCK()) 
								break;

							var price = marginalProduct * this.getLastUtilityPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;
							
							var o = new eos_economy.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(1);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getAllBuyLists().add(o);
							purse = purse - price; 
							lastProduct += marginalProduct;
						}
						return true;					
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much utility could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java"><![CDATA[
						return ((Double)(((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0)).longValue();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
					  var value = ((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0;
					  if (value > 0)
						value = Math.floor(value);
					  else
						value = Math.ceil(value);
					  return value;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>converts all labor to utility</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[					
						long utility = convertToUtility(Global.getAssetByName("Labor", getAssets()).getQuantity());
						double labor = Global.getAssetByName("Labor", getAssets()).getQuantity();
						Global.getAssetByName("Labor", getAssets()).withdraw(labor);
						Global.getAssetByName("Utility", getAssets()).deposit(utility);
						return utility;
					]]></Body>
					<Body language="JavaScript"><![CDATA[		
						var assets = this.getAllAssets(); 
						var utility = this.convertToUtility(eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity());
						var labor = eos_economy.controller.Global.getAssetByName("Labor", assets).getQuantity();
						eos_economy.controller.Global.getAssetByName("Labor", assets).withdraw(labor);
						eos_economy.controller.Global.getAssetByName("Utility", assets).deposit(utility);
						return utility;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="ProduceUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to utility</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">Global.getAssetByName("Labor", f.getAssets()).getQuantity() > 0</IF>
					<IF language="JavaScript">eos_economy.controller.Global.getAssetByName("Labor", this.f.getAllAssets()).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.f.produceUtility()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The factory decides how much utility he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.f.sellUtility(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellUtility" receiverIdRefs="4">
								<Slot property="sellOffers">
									<ValueExpr language="Java">this.f.getSellLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.f.getAllSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The factory decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.f.buyLabor(this.f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<ValueExpr language="Java">this.f.getBuyLists()</ValueExpr>
									<ValueExpr language="JavaScript">this.f.getAllBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Market">
				<!-- ============================================ -->
				<Attribute type="Float" name="lastMarketPrice" initialValue="0"/>
				<Attribute type="Float" name="lastMarketVolume" initialValue="0"/>
				<Attribute type="Float" name="buyVolume" initialValue="0"/>
				<Attribute type="Float" name="sellVolume" initialValue="0"/>
				<Attribute type="String" name="commodity" initialValue=""/>
				<Attribute type="String" name="currency" initialValue=""/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="clear" resultType="Boolean">
					<documentation>
						<dc:description>Calculates the marketprice and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					
					<Body language="Java"><![CDATA[
						getTransactions().clear();
						java.util.Comparator<TradeOffer> comparator;
						comparator = new java.util.Comparator<TradeOffer>() {
							public int compare (TradeOffer a, TradeOffer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
								            return 0;	             		
							}		
						};
						java.util.Collections.sort(getBuyOffers(), comparator);
						java.util.Collections.sort(getSellOffers(), comparator);
						
						// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        
				        if ((getBuyOffers().size() == 0) || (getSellOffers().size() == 0) || (less(getBuyOffers(getBuyOffers().size()-1).getPrice(), getSellOffers(0).getPrice()))) {
				        	setBuyVolume(getBuyOffers().size());
				        	setSellVolume(getSellOffers().size());
				        	getBuyOffers().clear();
				        	getSellOffers().clear();
				        	return false;
				        }
				        
				        // merge prices into sorted list, eliminating duplicates
        				ArrayList<Double> prices = new ArrayList<Double>(getBuyOffers().size() + getSellOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().size() && b < getBuyOffers().size()) {
				            if (equal(getSellOffers(s).getPrice(), getBuyOffers(b).getPrice())) {
				            	prices.add(getSellOffers(s++).getPrice());
				                b++;
				            } else if (getSellOffers(s).getPrice() < getBuyOffers(b).getPrice()){
                				prices.add(getSellOffers(s++).getPrice());
                			} else {
                				prices.add(getBuyOffers(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers(s).getPrice())){
                				s++;
							}
							// eliminate duplicates in buyOffers
							while (b < getBuyOffers().size() && equal(prices.get(prices.size() - 1), getBuyOffers(b).getPrice())){
                				b++;
                			}
                		}
                		// then add the remainder if there is one
        				if (s < getSellOffers().size()){
           				 	while (s < getSellOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getSellOffers(s).getPrice())){
				                	prices.add(getSellOffers(s).getPrice());
				                }
				                s++;
			            	}
			            } else if (b < getBuyOffers().size()) {
            				while (b < getBuyOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getBuyOffers(b).getPrice())){
				                    prices.add(getBuyOffers(b).getPrice());
				                }
				                b++;
				            }
            			}
            			
            			// find the price(s) at which supply and demand intersect
				        double supply = 0, demand = 0;
				        // initialize demand to be the demand at lowest demand price
				        for (TradeOffer o : getBuyOffers()){
				            demand += o.getQuantity();
				        }
							
				        // walk through prices, updating supply and demand as needed.
				        int p = 0;
				        double bestVolume = Double.NEGATIVE_INFINITY;
				        int bestP = 0;
				        for (s = -1, b = 0; s + 1 < getSellOffers().size() && b < getBuyOffers().size(); p++) {
				            // if prices[p] is the next supply price:
				            while (s + 1 < getSellOffers().size() && equal(prices.get(p), getSellOffers(s + 1).getPrice())){
				                supply += getSellOffers(++s).getQuantity();
				            }
				            // if the current demand price is less than prices[p]:
				            while (b < getBuyOffers().size() && less(getBuyOffers(b).getPrice(), prices.get(p))){
				                demand -= getBuyOffers(b++).getQuantity();
				            }
				            if (supply > demand) {
				                // volume = demand
				                if (demand > bestVolume) {
				                    bestVolume = demand;
				                    bestP = p;
				                }
				                break; // stop
				            } else if (supply > bestVolume) {
				            	// volume = supply here
				                bestVolume = supply;
				                bestP = p;
				            }
				        }
				        
			      	  	/*
				         * If the above loop broke because the final supply price was reached,
				         * then supply at Price >= prices[p-1] remains constant. Thus, it is
				         * necessary to check whether demand at higher prices will ever become
				         * less than the current supply. If so, then that will be at the market
				         * price.
				         */
				         if (s + 1 == getSellOffers().size()) {
				            for (; b < getBuyOffers().size() && p < prices.size(); p++) {
				                while (b < getBuyOffers().size() && less(getBuyOffers(b).getPrice(), prices.get(p)))
				                    demand -= getBuyOffers(b++).getQuantity();
				
				                if (supply > demand) {
				                    // volume = demand
				                    if (demand > bestVolume) {
				                        bestVolume = demand;
				                        bestP = p;
				                    }
				                    break; // stop
				                } else if (supply > bestVolume) { 
				                	// volume = supply here
				                    bestVolume = supply;
				                    bestP = p;
				                }
				            }
				        }
				        
				        /*
				         * If one of the loops broke because the next price was greater than the
				         * highest demand price, then the market price is set to the highest
				         * demand price in order to minimize shortage.
				         */
				        if (b == getBuyOffers().size()){
				            setLastMarketPrice(getBuyOffers(b - 1).getPrice());
				        }
				        /* If supply never crosses demand, set to highest supply price */
				        else if (p == prices.size()){
				            setLastMarketPrice(getBuyOffers(p - 1).getPrice());
				        }
				        /*
				         * Finally, if the loop broke because supply > demand, there are two
				         * valid prices that could be the market price: prices[p], which is the
				         * smallest price at which supply tops demand, or prices[p-1], which is
				         * the largest price at which demand tops supply. Since either price is
				         * valid, we select between them in an arbitrary, yet deterministic
				         * manner. However, if choosing between a two prices, one of which would
				         * not cause any transactions to occur, we choose the other price.
				         */
				        else {
				            if (p == 0) {
				                setLastMarketPrice(prices.get(p));
				            } else if (less(prices.get(p - 1), getSellOffers(0).getPrice())){
				                setLastMarketPrice(prices.get(p));
				            } else if (less(getBuyOffers(getBuyOffers().size() - 1).getPrice(), prices.get(p))){
				                setLastMarketPrice(prices.get(p - 1));
				            } else {
				                setLastMarketPrice(prices.get(bestP));
				            }
				        }
				        int seller = 0, buyer = getBuyOffers().size() - 1;
				        while (seller < getSellOffers().size() && buyer >= 0 && !less(getLastMarketPrice(), getSellOffers(seller).getPrice()) && !less(getBuyOffers(buyer).getPrice(), getLastMarketPrice())) 
						{	
							getSellOffers(seller).setPrice(getLastMarketPrice());
							getTransactions().add(getSellOffers(seller));
							seller++;
							getBuyOffers(buyer).setPrice(getLastMarketPrice());
							getTransactions().add(getBuyOffers(buyer));
							buyer--;
				        }
						// reset offer lists and set statistic variables
				        setLastMarketVolume(getTransactions().size());
				        setBuyVolume(getBuyOffers().size());
				        setSellVolume(getSellOffers().size());
				        getBuyOffers().clear();
				        getSellOffers().clear();
						return true;
					]]></Body>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="JavaScript"><![CDATA[
						this.getAllTransactions().clear();
						var buyOffers = this.getAllBuyOffers();
						var sellOffers = this.getAllSellOffers();
						
						var comparator = function(a, b) {
							var p1 = a.getPrice();
							var p2 = b.getPrice();
							
							if(p1 < p2) return -1;
							if(p1 > p2) return 1;
										return 0;	
						}
						
						buyOffers.sort(comparator);
						sellOffers.sort(comparator);
						
						// handle special cases
						// highest buy price < lowest sell price -> no transactions OR
						// empty offer list -> no transactions
						
						if ((buyOffers.size() == 0) || (sellOffers.size() == 0) || (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), sellOffers.get(0).getPrice()))) {
							
							this.setBuyVolume(buyOffers.size());
							this.setSellVolume(sellOffers.size());
							buyOffers.clear();
							sellOffers.clear();
							return false;
						}
						
						// merge prices into sorted list, eliminating duplicates
						var prices = new js.util.ArrayList();
						var s = 0, b = 0;
						while (s < sellOffers.size() && b < buyOffers.size()) {
							if (this.equal(sellOffers.get(s).getPrice(), buyOffers.get(b).getPrice())) {
								prices.add(sellOffers.get(s++).getPrice());
								b++;
							} else if (sellOffers.get(s).getPrice() < buyOffers.get(b).getPrice()){
								prices.add(sellOffers.get(s++).getPrice());
							} else {
								prices.add(buyOffers.get(b++).getPrice());
							}
							// eliminate duplicates in sellOffers
							while (s < sellOffers.size() && this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
								s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < buyOffers.size() && this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
								b++;
							}
						}
						// then add the remainder if there is one
						if (s < sellOffers.size()) {
								while (s < sellOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
									prices.add(sellOffers.get(s).getPrice());
								}
								s++;
							}
						} else if (b < buyOffers.size()) {
							while (b < buyOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
									prices.add(buyOffers.get(b).getPrice());
								}
								b++;
							}
						}
						// find the price(s) at which supply and demand intersect
						var supply = 0, demand = 0;
						
						// initialize demand to be the demand at lowest demand price
						for (var o = 0; o < buyOffers.size(); o++) { 
							var tradeOffer = buyOffers.get(o);
							demand += tradeOffer.getQuantity();
						}
						
						// walk through prices, updating supply and demand as needed.
						var p = 0;
						var bestVolume = Number.NEGATIVE_INFINITY;
						var bestP = 0;
						for (s = -1, b = 0; s + 1 < sellOffers.size() && b < buyOffers.size(); p++) {
							// if prices.get(p) is the next supply price:
							while (s + 1 < sellOffers.size() && this.equal(prices.get(p), sellOffers.get(s + 1).getPrice())) {
								supply += sellOffers.get(++s).getQuantity();
							}
							// if the current demand price is less than prices.get(p):
							while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p))) {
								demand -= buyOffers.get(b++).getQuantity();
							}
							if (supply > demand) {
								// volume = demand
								if (demand > bestVolume) {
									bestVolume = demand;
									bestP = p;
								}
								break; // stop
							} else if (supply > bestVolume) {
								// volume = supply here
								bestVolume = supply;
								bestP = p;
							}
						}
						/*
						 * If the above loop broke because the final supply price was reached,
						 * then supply at Price >= prices.get(p-1) remains constant. Thus, it is
						 * necessary to check whether demand at higher prices will ever become
						 * less than the current supply. If so, then that will be at the market
						 * price.
						 */
						 if (s + 1 == sellOffers.size()) {
							for (; b < buyOffers.size() && p < prices.size(); p++) {
								while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p)))
									demand -= buyOffers.get(b++).getQuantity();
				
								if (supply > demand) {
									// volume = demand
									if (demand > bestVolume) {
										bestVolume = demand;
										bestP = p;
									}
									break; // stop
								} else if (supply > bestVolume) { 
									// volume = supply here
									bestVolume = supply;
									bestP = p;
								}
							}
						}
						/*
						 * If one of the loops broke because the next price was greater than the
						 * highest demand price, then the market price is set to the highest
						 * demand price in order to minimize shortage.
						 */
						if (b == buyOffers.size()) {
							this.setLastMarketPrice(buyOffers.get(b - 1).getPrice());
						}
						/* If supply never crosses demand, set to highest supply price */
						else if (p == prices.size()) {
							this.setLastMarketPrice(buyOffers.get(p - 1).getPrice());
						}
						/*
						 * Finally, if the loop broke because supply > demand, there are two
						 * valid prices that could be the market price: prices.get(p), which is the
						 * smallest price at which supply tops demand, or prices.get(p-1), which is
						 * the largest price at which demand tops supply. Since either price is
						 * valid, we select between them in an arbitrary, yet deterministic
						 * manner. However, if choosing between a two prices, one of which would
						 * not cause any transactions to occur, we choose the other price.
						 */
						else {
							if (p == 0) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(prices.get(p - 1), sellOffers.get(0).getPrice())) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), prices.get(p))) {
								this.setLastMarketPrice(prices.get(p - 1));
							} else {
								this.setLastMarketPrice(prices.get(bestP));
							}
						}
						var seller = 0, buyer = buyOffers.size() - 1;
						while (seller < sellOffers.size() && buyer >= 0	&& !this.less(this.getLastMarketPrice(), sellOffers.get(seller).getPrice()) && !this.less(buyOffers.get(buyer).getPrice(), this.getLastMarketPrice())) 
						{	
							sellOffers.get(seller).setPrice(this.getLastMarketPrice());
							this.getAllTransactions().add(sellOffers.get(seller));
							seller++;
							buyOffers.get(buyer).setPrice(this.getLastMarketPrice());
							this.getAllTransactions().add(buyOffers.get(buyer));
							buyer--;
						}
						// reset offer lists and set statistic variables
						this.setLastMarketVolume(this.getAllTransactions().size());
						this.setBuyVolume(buyOffers.size());
						this.setSellVolume(sellOffers.size());
						buyOffers.clear();
						sellOffers.clear();
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Check if the two Inputparameters are equal</dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						if (a + 1e-5 < b) 
							return false;
						else if (a - 1e-5 > b) 
							return false;
						else
							return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>checks if a less b </dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						return (a + 1e-5 < b);
					]]></Body>
				</Function>
						
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyFood" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getBuyOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellFood" messageVariable="msg"/>
					<DO>
						
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getSellOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getBuyOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getSellOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getBuyOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">this.msg.getSellOffers()</ValueExpr>
									<ValueExpr language="JavaScript">this.msg.getAllSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<IF language="Java JavaScript">this.m.clear()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Transact" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<!--<ListExpr language="Java">this.m.getTransactions()</ListExpr> TODO problem here-->
						<ListExpr language="JavaScript">this.m.getAllTransactions()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[this.evt.getReminderMsg() == "transactions ready"]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ValueExpr language="Java JavaScript">this.o</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>	
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="ContinuousCommodityMarket" superType="Market"></AgentType>
			<AgentType name="DiscreteCommodityMarket" superType="Market"></AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- ============================= -->
		<EnvironmentRule name="InitializeOwnership">
			<!-- ============================= -->
			<documentation>
				<dc:description>Finds an owner for all firms</dc:description>
			</documentation>
			<WHEN eventType="Init"/>
			<FOR objectVariable="f" objectType="Firm" />
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
					<Slot property="owner">
						<ValueExpr language="Java">this.f.initializeOwnership(this.f, getEnvironmentSimulator().getObjectsByType(Person.class))</ValueExpr>
						<ValueExpr language="JavaScript">this.f.initializeOwnership(this.f, this.getEnvironmentSimulator().getObjectsByType("Person"))</ValueExpr>
					 </Slot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		
		<!-- ============================= -->
		<EnvironmentRule name="AtStartOfDayEat_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Every person tries to eat, if he can't then he dies</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="p" objectType="Person" />
			<IF language="Java"><![CDATA[Global.getAssetByName("Food", this.p.getAssets()).withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT()]]></IF>
			<IF language="JavaScript"><![CDATA[eos_economy.controller.Global.getAssetByName("Food", this.p.getAllAssets()).withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT()]]></IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject objectVariable="p"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="CheckBankrupt_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>If a farm  has no more money, food and labor it is shut down</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="f" objectType="Farm" />
			<IF language="Java"><![CDATA[Global.getAssetByName("Food", f.getAssets()).getQuantity() == 0.0d && Global.getAssetByName("Labor", f.getAssets()).getQuantity() == 0.0d && Global.getAssetByName("Money", f.getAssets()).getQuantity() == 0.0d]]></IF>
			<IF language="JavaScript"><![CDATA[eos_economy.controller.Global.getAssetByName("Food", this.f.getAllAssets()).getQuantity() == 0.0 && eos_economy.controller.Global.getAssetByName("Labor", this.f.getAllAssets()).getQuantity() == 0.0 && eos_economy.controller.Global.getAssetByName("Money", this.f.getAllAssets()).getQuantity() == 0.0]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner">
							<ValueExpr language="Java JavaScript">this.f.changeOwner()</ValueExpr>
						</Slot>
					</UpdateObject>
					<DestroyObject objectVariable="f"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule_ER">
			<!-- ====================================== -->
			<documentation>
				<dc:description>
				 For all markets that exist, the market price of the last day is send to every person
				</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay"/>
			<FOR objectVariable="m" objectType="Market" />
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="StartOfDay_Notification">
					    <SenderIdRef language="Java JavaScript">this.m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java JavaScript">this.p.getId()</ReceiverIdRef>
						<Slot property="price">
							<ValueExpr language="Java JavaScript">this.m.getLastMarketPrice()</ValueExpr>
						</Slot>
						<Slot property="marketType">
							<ValueExpr language="Java JavaScript">this.m.getCommodity()</ValueExpr>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="StartWork_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Act_msg is sent to every person</dc:description>
			</documentation>
			<WHEN eventType="StartWork"/>
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.p.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>	
		<!-- ===================================== -->
		<EnvironmentRule name="CloseMarket_ER">
		<!-- ===================================== -->
			<documentation>
				<dc:description>ClearMarket is send to every market</dc:description>
			</documentation>
			<WHEN eventType="CloseMarket"/>
			<FOR objectVariable="m" objectType="Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
	</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<Agent name="FoodMarket" id="2" type="ContinuousCommodityMarket">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.2" />
			<Slot property="commodity" value="Food"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agent name="LaborMarket" id="3" type="ContinuousCommodityMarket">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.4" />
			<Slot property="commodity" value="Labor"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agent name="UtilityMarket" id="4" type="DiscreteCommodityMarket">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="1.0" />
			<Slot property="commodity" value="Utility"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agent>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agents type="Person" rangeStartID="1000" rangeEndID="1174">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(33.0d, "Food", "Stk", this);
				            Global.addContinuous(60.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(eos_economy.controller.Global.getContinuous(33.0, "Food", "Stk"), 
							eos_economy.controller.Global.getContinuous(60.0, "Money", "Stk"), 
							eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"), 
							eos_economy.controller.Global.getDiscrete(0, "Utility"))]]>
				</ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="false"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="60" />
			<Slot property="utilityAmount" value="0" />
			<Slot property="laborAmount" value="0" />
		</Agents>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agents type="Person" rangeStartID="2000" rangeEndID="2009">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(33.0d, "Food", "Stk", this);
				            Global.addContinuous(90.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(eos_economy.controller.Global.getContinuous(33.0, "Food", "Stk"), 
							eos_economy.controller.Global.getContinuous(90.0, "Money", "Stk"), 
							eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"), 
							eos_economy.controller.Global.getDiscrete(0, "Utility"))]]>
				</ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="true"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="90" />
			<Slot property="utilityAmount" value="0" />
			<Slot property="laborAmount" value="0" />
		</Agents>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agents type="Farm" rangeStartID="3000" rangeEndID="3004">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(20.0d, "Food", "Stk", this);
				            Global.addContinuous(100.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(eos_economy.controller.Global.getContinuous(20.0, "Food", "Stk"),
							eos_economy.controller.Global.getContinuous(100.0, "Money", "Stk"), 
							eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"), 
							eos_economy.controller.Global.getDiscrete(0, "Utility"))]]>
				</ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="foodAmount" value="20" /> 
			<Slot property="goldAmount" value="100" />
			<Slot property="utilityAmount" value="0" />
			<Slot property="laborAmount" value="0" />
		</Agents>
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<Agents type="Factory" rangeStartID="4000" rangeEndID="4004">
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[
					new ArrayList<aors.util.economics.Quantity>(){
					  {	
						Global.addContinuous(0.0d, "Food", "Stk", this);
						Global.addContinuous(100.0d, "Money", "Stk", this);
						Global.addContinuous(0.0d, "Labor", "Stk", this);
						Global.addDiscrete(5.0d, "Utility", this);
					  }
				    }]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList(eos_economy.controller.Global.getContinuous(0.0, "Food", "Stk"), 
						eos_economy.controller.Global.getContinuous(100.0, "Money", "Stk"), 
						eos_economy.controller.Global.getContinuous(0.0, "Labor", "Stk"), 
						eos_economy.controller.Global.getDiscrete(5, "Utility"))]]>
				</ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="goldAmount" value="100" />
			<Slot property="utilityAmount" value="5" />
			<Slot property="laborAmount" value="0" />
			<Slot property="foodAmount" value="0" />
		</Agents>
		<ExogenousEvent type="Init" occurrenceTime="1" />
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<ExogenousEvent occurrenceTime="3" type="StartWork" />
		<ExogenousEvent occurrenceTime="6" type="CloseMarket" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">FoodPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the foodmarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">LaborPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the labormarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
				</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">UtilityPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the utilitymarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for utility</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			
		</StatisticsUI>
		<AnimationUI>
			<DisplayDescription>
				<HtmlText></HtmlText>
			</DisplayDescription>
			
			<Views></Views>
		</AnimationUI>
		
	</UserInterface>
</SimulationScenario>
