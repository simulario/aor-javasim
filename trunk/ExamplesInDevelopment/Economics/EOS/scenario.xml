<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.8.4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/" 
	scenarioName="EOS_Economy"
	scenarioTitle="EOS Economy"
	simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0"/>
	<SimulationModel modelName="Gold_Food_Economy">
		<documentation>
			<dc:modified>20100306</dc:modified>
			<dc:source>"A computational market model based on individual action", by Ken Steiglitz, Michael L. Honig and Leonard M. Cohen, 1996. URL: http://www.cs.princeton.edu/~ken/scott.pdf</dc:source>
			<aors:description xmlns="http://www.w3.org/1999/xhtml">The "Gold Food Economy" is an example of an agent-based simulation of a relatively basic economy that does not directly model a real economy, but attempts to explain the macroeconomy through simulation of a minimal economy. It is one of the simplest models wherein zero-intelligence agents produce, consume and trade in an economy with only two goods: gold and food. The model simulates the actions of independent "worker" agents, each with his own inventory and skills (at producing food and gold), interacting through an auction market agent that establishes a commonly accepted transaction price. Workers must consume a unit of food every period, and each worker tries to maintain a minimum inventory of food to guarantee consumption. For the system to survive the production of food must be greater than the total food consumption per period, but this leads to a surplus of food in the economy. The market allows agents to sell their surplus food for gold that can be used to purchase food in the same market later on. Agents more skilled in the production of gold might decide to mine gold and trade it for food at every period.</aors:description>
		</documentation>
		
		<Statistics>
			<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="PriceLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="SellOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="4"/>
				</Source>
				</Variable>
		</Statistics>
		
		<DataTypes>
			<!--====================================-->
			<ComplexDataType name="TradeOffer">
				<!--====================================-->
				<Attribute type="String" name="product"/>
				<Attribute type="Float" name="price"/>
				<Attribute type="Float" name="Quantity"/>
				<Attribute type="Boolean" name="buy"/>
				<Attribute type="Integer" name="bidderIdRef"/>
				<!--<ReferenceProperty name="bidder" type="EconomicAgent"/>-->
			</ComplexDataType>
		</DataTypes>
		
		<Globals>
			<!--====================================-->
			<GlobalFunction name="getAssetByName" resultType="aors.util.economics.Quantity">
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					int i;
					for(i=0; i < assets.size(); i++){
						if(!assets.get(i).isDiscrete()){
							if(((aors.util.economics.ContinuousQuantity)assets.get(i)).getContinuousQuantityType().getName().equals(name)){
								break;
							}
						}else{
							if(((aors.util.economics.DiscreteQuantity)assets.get(i)).getType().equals(name)){
								break;
							}
						}
					}
					return assets.get(i);
					]]></Body>	
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addContinuous" resultType="Double">
				<Parameter name="quantity" type="Double"/>
				<Parameter name="name" type="String"/>
				<Parameter name="unit" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.ContinuousQuantityType assetType = new aors.util.economics.ContinuousQuantityType(name, unit);
				  	aors.util.economics.ContinuousQuantity asset = new aors.util.economics.ContinuousQuantity(quantity, assetType);
				  	assets.add(asset);
				  	return quantity;
				]]></Body>
			</GlobalFunction>
			<!--====================================-->
			<GlobalFunction name="addDiscrete" resultType="Long">
				<Parameter name="quantity" type="Integer"/>
				<Parameter name="name" type="String"/>
				<Parameter name="assets" type="List" itemType="aors.util.economics.Quantity"/>
				<Body language="Java"><![CDATA[
					aors.util.economics.DiscreteQuantity asset = new aors.util.economics.DiscreteQuantity(name, (int)quantity);
				  	assets.add(asset);
				  	return quantity;
				]]></Body>
			</GlobalFunction>
		</Globals>
		
		<EntityTypes>
			<!--====================================-->
			<MessageType name="StartOfDay_msg">
				<!--====================================-->
				<Attribute name="price" type="Float"/>
				<Attribute name="marketType" type="String" />
			</MessageType>
			<!--====================================-->
			<MessageType name="Act_msg" />
			<!--====================================-->
			<MessageType name="OfferToBuyFood">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellFood">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyLabor">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellLabor">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyUtility">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellUtility">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="ClearMarket" />
			<!--====================================-->
			<MessageType name="MatchingOffer" >
				<!--====================================-->
				<ComplexDataProperty name="offer" type="TradeOffer"/>
			</MessageType>
			<!--=======================================================-->
			<ExogenousEventType name="StartOfDay" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="StartWork" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="CloseMarket" periodicity="9" />
			<!--=======================================================-->
			<!--=======================================================-->
			<ExogenousEventType name="Init" />
			<!-- ============================================ -->
			<AgentType name="EconomicAgent">
				<!-- ============================================ -->
				<ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded" />
				<Attribute type="Float" name="LABOR_ALLOWANCE" initialValue="1.0"/>
				<Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
				<Attribute type="Float" name="lastFoodPrice"/>
				<Attribute type="Float" name="lastLaborPrice"/>
				<Attribute type="Float" name="lastUtilityPrice"/>
				<Attribute type="Float" name="foodAmount"/>
				<Attribute type="Float" name="goldAmount"/>
				<Attribute type="Float" name="laborAmount"/>
				<Attribute type="Float" name="utilityAmount"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if(offer.getProduct().equals("Food")){
							if(offer.isBuy()){
								Global.getAssetByName("Food", getAssets()).deposit(offer.getQuantity());	
							}else{
								Global.getAssetByName("Food", getAssets()).withdraw(offer.getQuantity());
							}
						}
						return Global.getAssetByName("Food", getAssets()).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateGold" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the goldamount by the quantity*price of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if(offer.isBuy()){
							Global.getAssetByName("Money",getAssets()).withdraw(offer.getQuantity()*offer.getPrice());					
						}else{
							Global.getAssetByName("Money",getAssets()).deposit(offer.getQuantity()*offer.getPrice());
						}
						return Global.getAssetByName("Money",getAssets()).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateLabor" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the goldamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if(offer.getProduct().equals("Labor")){
							if(offer.isBuy()){
								Global.getAssetByName("Labor",getAssets()).deposit(offer.getQuantity());
							}else{
								Global.getAssetByName("Labor",getAssets()).withdraw(offer.getQuantity());
							}
						}
						return Global.getAssetByName("Labor",getAssets()).getQuantity();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="updateUtility" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the foodamount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="offer" type="TradeOffer"/>
					<Body language="Java"><![CDATA[
						if(offer.getProduct().equals("Utility")){
							if(offer.isBuy()){
								Global.getAssetByName("Utility",getAssets()).deposit(offer.getQuantity());
							}else{
								Global.getAssetByName("Utility",getAssets()).withdraw(offer.getQuantity());
							}
						}
						return Global.getAssetByName("Utility",getAssets()).getQuantity();										
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Food_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>price is updated and decides to produce food or gold</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_msg" messageVariable="msg"/>
					<IF language="Java">msg.getMarketType().equals("Food")</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastFoodPrice">
								<ValueExpr language="Java">msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Labor_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>price is updated and decides to produce food or gold</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_msg" messageVariable="msg"/>
					<IF language="Java">msg.getMarketType().equals("Labor")</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastLaborPrice">
								<ValueExpr language="Java">msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Utility_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>price is updated and decides to produce food or gold</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_msg" messageVariable="msg"/>
					<IF language="Java">msg.getMarketType().equals("Utility")</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastUtilityPrice">
								<ValueExpr language="Java">msg.getPrice()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Update_Rule" agentVariable="p">	
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>succesfull transactions are receiverd from the market, food and gold is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="goldAmount">
								<ValueExpr language="Java">p.updateGold(msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="foodAmount">
								<ValueExpr language="Java">p.updateFood(msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="laborAmount">
								<ValueExpr language="Java">p.updateLabor(msg.getOffer())</ValueExpr>
							</Slot>
							<Slot property="utilityAmount">
								<ValueExpr language="Java">p.updateUtility(msg.getOffer())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="30.0"/>
				<Attribute type="Float" name="TARGET_MONEY_STOCK" initialValue="60.0"/>
				<Attribute type="Float" name="TARGET_FIRM_MONEY_STOCK" initialValue="100"/>
				<Attribute type="Float" name="EAT_AMOUNT" initialValue="1.0"/>
				<Attribute type="Boolean" name="owner"/>
				<Attribute type="Boolean" name="hasFirm" initialValue="false"/>
				<Attribute type="Float" name="konto"/>
				<ReferenceProperty name="firm" type="Firm"/>
				<ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the buyofferlist</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						if(isOwner()){
							double firmMoney = Global.getAssetByName("Money",getFirm().getAssets()).getQuantity();
							double moneyToWithdraw = Math.max(getTARGET_MONEY_STOCK() - Global.getAssetByName("Money", getAssets()).getQuantity()
															  , firmMoney - getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0){
								Global.getAssetByName("Money", getAssets()).deposit(Global.getAssetByName("Money", getFirm().getAssets()).withdraw(moneyToWithdraw));
	                    	}
                    	}
                    	setKonto(Global.getAssetByName("Money", getAssets()).getQuantity());
						getFoodBuyLists().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			          	for (double x = Global.getAssetByName("Food", getAssets()).getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if(x == 0.0){
			            		x = .00000000001;
			            	} 
			            	double mod = 0.1*Math.pow(getTARGET_FOOD_STOCK()/x, 0.2) +0.90+Random.uniform(0.0, 1.0)*getRANDOM_FACTOR();
			            	double price = mod*getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			              	
			            	if(purse < 0.0) break;
			            	
			            	TradeOffer o = new TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyLists().add(o);
			            	setKonto(getKonto()-price);
			          	}
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getFoodSellLists().clear();
						if(Global.getAssetByName("Food", getAssets()).getQuantity() > 1.5*getTARGET_FOOD_STOCK()){
				        	final double quantum = getEAT_AMOUNT() * 1.0;
				          	for (double x = Global.getAssetByName("Food", getAssets()).getQuantity(); x > 1.5*getTARGET_FOOD_STOCK(); x -= quantum) {
					            if(x == 0.0){
					            	x = .00000000001;
					            }
					            double mod = .1*Math.pow(getTARGET_FOOD_STOCK()/(x - getTARGET_FOOD_STOCK()), .2) +.90/*5*/+Random.uniform(0.0, 1.0)*getRANDOM_FACTOR();
					            double price = mod*getLastFoodPrice();
					            if (price <= 0.0){
					            	break;
					            }
					            
					            TradeOffer o = new TradeOffer();
					            o.setProduct("Food");
				            	o.setQuantity(quantum);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getFoodSellLists().add(o);
				          }
						return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						if(isOwner() == false){
							double price;
							getLaborSellLists().clear();
							if(getLastLaborPrice() > getLastFoodPrice() && Global.getAssetByName("Food", getAssets()).getQuantity() < getTARGET_FOOD_STOCK()){
					        	price = (getLastLaborPrice() - getLastFoodPrice()) * ((Global.getAssetByName("Food", getAssets()).getQuantity()*Global.getAssetByName("Food", getAssets()).getQuantity()) / (getTARGET_FOOD_STOCK()*getTARGET_FOOD_STOCK())) + getLastFoodPrice();
					        	price = Math.min(price, getLastLaborPrice()*1.1);
					        	//price = getLastLaborPrice()*1.1;
					        }else{
					            price = getLastLaborPrice();
					            final double frac = 0.95;
					            double mod =((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0),-2.0)/2)*(1 - frac) + 1);
					        	price *= mod;
					        }
								TradeOffer o = new TradeOffer();
					            o.setProduct("Labor");
				            	o.setQuantity(getLABOR_ALLOWANCE());
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getLaborSellLists().add(o);
				            	return true;
				            
				      }
				      return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getUtilityBuyLists().clear();
						double purse = getKonto();
						if (purse > getTARGET_MONEY_STOCK() && Global.getAssetByName("Food", getAssets()).getQuantity() > getTARGET_FOOD_STOCK()) {
					      	final double frac = 0.95;
					      	double factor = ((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0),-2.0)/2)*(1 - frac) + 1);
					      	double uPrice = getLastUtilityPrice() * factor;
					      	double quantity = (getKonto() - getTARGET_MONEY_STOCK())/uPrice;
					      	if(quantity > 0 && uPrice > 0.0){
					      		for(double d = quantity;d>0;d--){
						        	TradeOffer o = new TradeOffer();
					            	o.setProduct("Utility");
				            		o.setQuantity(1);
				            		o.setPrice(uPrice);
				            		o.setBuy(true);
				            		o.setBidderIdRef(bidderIdRef);
				            		getUtilityBuyLists().add(o);
			            		}
			            	}
			            }
			            return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="BuyFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">buyFood(p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyFood" receiverIdRefs="2">
								<Slot property="BuyOffers">
									<ValueExpr language="Java">getFoodBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">sellFood(p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="SellOffers">
									<ValueExpr language="Java">getFoodSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellLabor_Rule" agentVariable="p">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">sellLabor(p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellLabor" receiverIdRefs="3">
								<Slot property="SellOffers">
									<ValueExpr language="Java">getLaborSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyUtility_Rule" agentVariable="p">
					<documentation>
						<description> The person decides how much utility he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">buyUtility(p.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyUtility" receiverIdRefs="4">
								<Slot property="BuyOffers">
									<ValueExpr language="Java">getUtilityBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Firm" superType="EconomicAgent">
				<Attribute type="Float" name="amountProduced"/>
				<ReferenceProperty name="owner" type="Person"/>
				<ComplexDataProperty name="buyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="initializeOwnership" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description></dc:description>
					</documentation>
					<Parameter name="firm" type="Firm"/>
					<Parameter name="owners" type="List" itemType="aors.model.envsim.Objekt"/>
					<Body language="Java"><![CDATA[
						Person person = null;
						for(Object o : owners){
							if((((Person)o).isOwner() == true) && !(((Person)o).isHasFirm())){
								person = (Person) o;
								((Person) o).setOwner(true);
								((Person) o).setHasFirm(true);
								((Person) o).setFirm(firm);
								break;
							}
						}	
						return person;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="changeOwner" resultType="Person">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description></dc:description>
					</documentation>
					<Body language="Java"><![CDATA[
						getOwner().setOwner(false);
						setOwner(null);
						return getOwner();
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Farm" superType="Firm">
				<!-- ============================================ -->
				<Attribute type="Float" name="TARGET_FOOD_STOCK" initialValue="120.0"/>
				<Attribute type="Float" name="TARGET_OWNER_FOOD_STOCK" initialValue="30.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellLists().clear();
						double productQuantity = Global.getAssetByName("Food", getAssets()).getQuantity();
						if(productQuantity == 0){
							return false;
						}else{
            				double food = productQuantity;
            				double quantum = productQuantity /10;
							while(food > 0){
								double factor = (Math.max(Math.min(Random.normal(0.0, 1.0), 2.0),-2.0)/2)*0.1 + 1;
                				double price = getLastFoodPrice() * factor;
                				for(double d=quantum;d > 0;d--){
	                				TradeOffer o = new TradeOffer();
						            o.setProduct("Food");
					            	o.setQuantity(1);
									o.setPrice(price);
					            	o.setBuy(false);
					            	o.setBidderIdRef(bidderIdRef);
					            	getSellLists().add(o);
				            	}
				            	food = food - quantum;
            				}
            			return true;
        				}
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyLists().clear();
						double ownerfoodAmount = Global.getAssetByName("Food", getOwner().getAssets()).getQuantity();
				        if(ownerfoodAmount < 0.75*getTARGET_OWNER_FOOD_STOCK() && Global.getAssetByName("Food", getAssets()).getQuantity() < getTARGET_FOOD_STOCK()){
				          final double quantum = getLABOR_ALLOWANCE() * 1.0;
				          double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
				          for (double x = ownerfoodAmount; x <= 1.5 * getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
				            if(x == 0.0) x = .00000000001;
				            double mod = .1*Math.pow(getTARGET_OWNER_FOOD_STOCK()/x, .2) +.90+Random.uniform(0.0, 1.0)*getRANDOM_FACTOR();
				            double price = mod*getLastLaborPrice();
				            price = Math.min(price, purse);
				            if (price <= 0.0) break;
				            purse -= quantum*price;
				            if(purse < 0.0) break;
				            
				            TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);        	
				          }
				        }
						double lastProduct = 0.0;
						double minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			            	
			                double marginalProduct = convertToFood(d) - lastProduct;
			                if (lastProduct + Global.getAssetByName("Food", getAssets()).getQuantity() >= getTARGET_FOOD_STOCK()) break;
			
			                double price = marginalProduct * getLastFoodPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			
			                TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(getLABOR_ALLOWANCE());
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);
			            	purse = purse - price;
			            	lastProduct = lastProduct + marginalProduct;
			            }
						return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java"><![CDATA[
						return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the laboramount by the quantity of the offer</dc:description>
					</documentation>
					<Parameter name="ID" type="long"/>
					<Body language="Java"><![CDATA[
							double food = convertToFood(Global.getAssetByName("Labor", getAssets()).getQuantity());
							double labor = Global.getAssetByName("Labor", getAssets()).getQuantity();
							Global.getAssetByName("Labor", getAssets()).withdraw(labor);
							Global.getAssetByName("Food", getAssets()).deposit(food);
							return food;									
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProduceFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">Global.getAssetByName("Labor", f.getAssets()).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java">produceFood(f.getId())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The farm decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">sellFood(f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="SellOffers">
									<ValueExpr language="Java">getSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">buyLabor(f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="BuyOffers">
									<ValueExpr language="Java">getBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Factory" superType="Firm">
				<Attribute type="Float" name="TARGET_UTILITY_STOCK" initialValue="60.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellLists().clear();
						final double frac = 0.9;
			            double util = Global.getAssetByName("Utility", getAssets()).getQuantity();
			            double quantum = util /10; 
			            while(util > 0){
			            	for(double d=quantum;d>0;d--){
				            	double factor = ((Math.max(Math.min(Random.normal(0.0, 1.0), 2.0),-2.0)/2)*(1 - frac) + 1); 
				            	double price = getLastUtilityPrice() * factor;
			            		TradeOffer o = new TradeOffer();
					            o.setProduct("Utility");
				            	o.setQuantity(1);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getSellLists().add(o);
			            	}
			            	util = util-quantum;
			            }
            			return true;		
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyLists().clear();
						double lastProduct = 0.0, minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = Global.getAssetByName("Money", getAssets()).getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToUtility(d) - lastProduct;
			                if (lastProduct + Global.getAssetByName("Utility", getAssets()).getQuantity() >= getTARGET_UTILITY_STOCK()) break;
			
			                double price = marginalProduct * getLastUtilityPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			                
							TradeOffer o = new TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(1);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyLists().add(o);
							purse = purse - price; 
			                lastProduct += marginalProduct;
			            }
			        	return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java"><![CDATA[
						return ((Double)(((-0.0652 * laborQuantity * laborQuantity) + 4.0652* laborQuantity)/2.0)).longValue();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Updates the laboramount by the quantity of the offer</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[					
							long utility = convertToUtility(Global.getAssetByName("Labor", getAssets()).getQuantity());
							double labor = Global.getAssetByName("Labor", getAssets()).getQuantity();
							Global.getAssetByName("Labor", getAssets()).withdraw(labor);
							Global.getAssetByName("Utility", getAssets()).deposit(utility);
							return utility;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="ProduceUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">Global.getAssetByName("Labor", f.getAssets()).getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java">produceUtility()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellUtility_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The farm decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">sellUtility(f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellUtility" receiverIdRefs="4">
								<Slot property="SellOffers">
									<ValueExpr language="Java">getSellLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="f">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">buyLabor(f.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="BuyOffers">
									<ValueExpr language="Java">getBuyLists()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Market">
				<!-- ============================================ -->
				<Attribute type="Float" name="lastMarketPrice"/>
				<Attribute type="Float" name="lastMarketVolume"/>
				<Attribute type="Float" name="buyVolume"/>
				<Attribute type="Float" name="sellVolume"/>
				<Attribute type="String" name="commodity"/>
				<Attribute type="String" name="currency"/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="clear" resultType="Boolean">
					<documentation>
						<dc:description>Calculates the marketprice and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="Java"><![CDATA[
						
						getTransactions().clear();
						
				        java.util.Comparator<TradeOffer> comparator;
				        comparator = new java.util.Comparator<TradeOffer>() {
							public int compare (TradeOffer a, TradeOffer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if(p1 < p2) return -1;
								if(p1 > p2) return 1;
								            return 0;	             		
							}		
						};
						
						java.util.Collections.shuffle(getBuyOffers());
						java.util.Collections.shuffle(getSellOffers());
						java.util.Collections.sort(getBuyOffers(), comparator);
						java.util.Collections.sort(getSellOffers(), comparator);
						
						// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        
				        if ((getBuyOffers().size() == 0) || (getSellOffers().size() == 0) || (less(getBuyOffers(getBuyOffers().size()-1).getPrice(), getSellOffers(0).getPrice()))) {
				        	setBuyVolume(getBuyOffers().size());
				        	setSellVolume(getSellOffers().size());
				        	getBuyOffers().clear();
				        	getSellOffers().clear();
				        	return false;
				        }
				        
				        // merge prices into sorted list, eliminating duplicates
        				ArrayList<Double> prices = new ArrayList<Double>(getBuyOffers().size() + getSellOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().size() && b < getBuyOffers().size()) {
				            if (equal(getSellOffers(s).getPrice(), getBuyOffers(b).getPrice())) {
				            	prices.add(getSellOffers(s++).getPrice());
				                b++;
				            } else if(getSellOffers(s).getPrice() < getBuyOffers(b).getPrice()){
                				prices.add(getSellOffers(s++).getPrice());
                			} else{
                				prices.add(getBuyOffers(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers(s).getPrice())){
                				s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < getBuyOffers().size()
                    			   && equal(prices.get(prices.size() - 1),getBuyOffers(b).getPrice())){
                				b++;
                			}
                		}
                		// then add the remainder if there is one
        				if (s < getSellOffers().size()){
           				 	while (s < getSellOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getSellOffers(s).getPrice())){
				                	prices.add(getSellOffers(s).getPrice());
				                }
				                s++;
			            	}
			            }else if (b < getBuyOffers().size()){
            				while (b < getBuyOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getBuyOffers(b).getPrice())){
				                    prices.add(getBuyOffers(b).getPrice());
				                }
				                b++;
				            }
            			}
            			
            			// find the price(s) at which supply and demand intersect
				        double supply = 0, demand = 0;
				        // initialize demand to be the demand at lowest demand price
				        for (TradeOffer o : getBuyOffers()){
				            demand += o.getQuantity();
				            }
				        // walk through prices, updating supply and demand as needed.
				        int p = 0;
				        double bestVolume = Double.NEGATIVE_INFINITY;
				        int bestP = 0;
				        for (s = -1, b = 0; s + 1 < getSellOffers().size() && b < getBuyOffers().size(); p++) {
				            // if prices[p] is the next supply price:
				            while (s + 1 < getSellOffers().size() && equal(prices.get(p), getSellOffers(s + 1).getPrice())){
				                supply += getSellOffers(++s).getQuantity();
				            }
				            // if the current demand price is less than prices[p]:
				            while (b < getBuyOffers().size() && less(getBuyOffers(b).getPrice(), prices.get(p))){
				                demand -= getBuyOffers(b++).getQuantity();
				            }
				            if (supply > demand) {
				                // volume = demand
				                if (demand > bestVolume) {
				                    bestVolume = demand;
				                    bestP = p;
				                }
				                break; // stop
				            } else if (supply > bestVolume) {
				            	// volume = supply here
				                bestVolume = supply;
				                bestP = p;
				            }
				        }
				        
			      	  	/*
				         * If the above loop broke because the final supply price was reached,
				         * then supply at Price >= prices[p-1] remains constant. Thus, it is
				         * necessary to check whether demand at higher prices will ever become
				         * less than the current supply. If so, then that will be at the market
				         * price.
				         */
				         if (s + 1 == getSellOffers().size()) {
				            for (; b < getBuyOffers().size() && p < prices.size(); p++) {
				                while (b < getBuyOffers().size() && less(getBuyOffers(b).getPrice(), prices.get(p)))
				                    demand -= getBuyOffers(b++).getQuantity();
				
				                if (supply > demand) {
				                    // volume = demand
				                    if (demand > bestVolume) {
				                        bestVolume = demand;
				                        bestP = p;
				                    }
				                    break; // stop
				                } else if (supply > bestVolume) { 
				                	// volume = supply here
				                    bestVolume = supply;
				                    bestP = p;
				                }
				            }
				        }
				        
				        /*
				         * If one of the loops broke because the next price was greater than the
				         * highest demand price, then the market price is set to the highest
				         * demand price in order to minimize shortage.
				         */
				        if (b == getBuyOffers().size()){
				            setLastMarketPrice(getBuyOffers(b - 1).getPrice());
				        }
				        /* If supply never crosses demand, set to highest supply price */
				        else if (p == prices.size()){
				            setLastMarketPrice(getBuyOffers(p - 1).getPrice());
				        }
				        /*
				         * Finally, if the loop broke because supply > demand, there are two
				         * valid prices that could be the market price: prices[p], which is the
				         * smallest price at which supply tops demand, or prices[p-1], which is
				         * the largest price at which demand tops supply. Since either price is
				         * valid, we select between them in an arbitrary, yet deterministic
				         * manner. However, if choosing between a two prices, one of which would
				         * not cause any transactions to occur, we choose the other price.
				         */
				        else {
				            if (p == 0){
				                setLastMarketPrice(prices.get(p));
				            }else if (less(prices.get(p - 1), getSellOffers(0).getPrice())){
				                setLastMarketPrice(prices.get(p));
				            }else if (less(getBuyOffers(getBuyOffers().size() - 1).getPrice(), prices.get(p))){
				                setLastMarketPrice(prices.get(p - 1));
				            }else {
				                setLastMarketPrice(prices.get(bestP));
				            }
				        }
				        int seller = 0, buyer = getBuyOffers().size() - 1;
				        while (seller < getSellOffers().size() && buyer >= 0
				                && !less(getLastMarketPrice(), getSellOffers(seller).getPrice()) // sP <= mP
				                && !less(getBuyOffers(buyer).getPrice(), getLastMarketPrice()))  // bP >= mP
						{	
				            	getSellOffers(seller).setPrice(getLastMarketPrice());
				            	getTransactions().add(getSellOffers(seller));
				                seller++;
				                getBuyOffers(buyer).setPrice(getLastMarketPrice());
				            	getTransactions().add(getBuyOffers(buyer));
				                buyer--;
				        }
						// reset offer lists and set statistic variables
				        setLastMarketVolume(getTransactions().size());
				        setBuyVolume(getBuyOffers().size());
				        setSellVolume(getSellOffers().size());
				        getBuyOffers().clear();
				        getSellOffers().clear();
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Check if the two Inputparameters are equal</dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java"><![CDATA[
						double eps = 1e-5;
						if (a + eps < b){
            				return false;
            			}
       					if (a - eps > b){
            				return false;
            			}
        				return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>checks if a less b </dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java"><![CDATA[
						double eps = 1e-5;
						if (a + eps < b){
				            return true;
				        }
				        return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="addSellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Adds the selloffer to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="offers" type="ArrayList"/>
					<Body language="Java"><![CDATA[
						getSellOffers().addAll(offers);
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="addBuyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Adds the selloffer to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="offers" type="ArrayList"/>
					<Body language="Java"><![CDATA[
						getBuyOffers().addAll(offers);
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="addSellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Adds the selloffer to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="offers" type="ArrayList"/>
					<Body language="Java"><![CDATA[
						getSellOffers().addAll(offers);
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="addBuyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Adds the selloffer to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="offers" type="ArrayList"/>
					<Body language="Java"><![CDATA[
						getBuyOffers().addAll(offers);
						return true;
					]]></Body>
				</Function>	
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="addSellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Adds the selloffer to the sellofferlist</dc:description>
					</documentation>
					<Parameter name="offers" type="ArrayList"/>
					<Body language="Java"><![CDATA[
						getSellOffers().addAll(offers);
						return true;
					]]></Body>
				</Function>		
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyFood" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellFood" messageVariable="msg"/>
					<DO>
						
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getBuyOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ValueExpr language="Java">msg.getSellOffers()</ValueExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<IF language="Java">m.clear()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Transact" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are reurned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="Java">getTransactions()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[evt.getReminderMsg().equals("transactions ready")]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java">o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ValueExpr language="Java">o</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>	
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="ContinuousCommodityMarket" superType="Market"></AgentType>
			<AgentType name="DiscreteCommodityMarket" superType="Market"></AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- ============================= -->
		<EnvironmentRule name="InitializeOwnership">
			<!-- ============================= -->
			<WHEN eventType="Init"/>
			<FOR objectVariable="f" objectType="Firm" />
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner">
							<ValueExpr language="Java">f.initializeOwnership(f, getEnvironmentSimulator().getObjectsByType(Person.class))</ValueExpr>
						</Slot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="AtStartOfDayEat_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Every person tries to eat, if he can't he dies</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="p" objectType="Person" />
			<IF language="Java"><![CDATA[
				Global.getAssetByName("Food", p.getAssets()).withdraw(p.getEAT_AMOUNT()) < p.getEAT_AMOUNT() 
			]]></IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject objectVariable="p"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="CheckBankrupt_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>If a farm  has no more money and food and labor it is shutdown</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR objectVariable="f" objectType="Farm" />
			<IF language="Java"><![CDATA[
				Global.getAssetByName("Food", f.getAssets()).getQuantity() == 0.0d && Global.getAssetByName("Labor", f.getAssets()).getQuantity() == 0.0d && Global.getAssetByName("Money", f.getAssets()).getQuantity() == 0.0d
			]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="Owner">
							<ValueExpr language="Java">f.changeOwner()</ValueExpr>
						</Slot>
					</UpdateObject>
					<DestroyObject objectVariable="f"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule_ER">
			<!-- ====================================== -->
			<documentation>
				<dc:description>For all markets that exist, the marketprice of the last day is send to every person</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay"/>
			<FOR objectVariable="m" objectType="Market" />
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="StartOfDay_msg">
					    <SenderIdRef language="Java">m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java">p.getId()</ReceiverIdRef>
						<Slot property="price">
							<ValueExpr language="Java">m.getLastMarketPrice()</ValueExpr>
						</Slot>
						<Slot property="marketType">
							<ValueExpr language="Java">m.getCommodity()</ValueExpr>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="StartWork_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Act_msg is send to every person</dc:description>
			</documentation>
			<WHEN eventType="StartWork"/>
			<FOR objectVariable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="Java">p.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>	
		<!-- ===================================== -->
		<EnvironmentRule name="CloseMarket_ER">
		<!-- ===================================== -->
			<documentation>
				<dc:description>ClearMarket is send to every market</dc:description>
			</documentation>
			<WHEN eventType="CloseMarket"/>
			<FOR objectVariable="m" objectType="Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
						<ReceiverIdRef language="Java">m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
	</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<Agent type="ContinuousCommodityMarket" id="2">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.2" />
			<Slot property="commodity" value="Food"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent type="ContinuousCommodityMarket" id="3">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="0.4" />
			<Slot property="commodity" value="Labor"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent type="DiscreteCommodityMarket" id="4">
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->			
			<Slot property="lastMarketPrice" value="1.0" />
			<Slot property="commodity" value="Utility"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
		</Agent>
		<Agents type="Person" rangeStartID="1000" rangeEndID="1174">
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(33.0d, "Food", "Stk", this);
				            Global.addContinuous(60.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="false"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="60" />
		</Agents>
		<Agents type="Person" rangeStartID="2000" rangeEndID="2009">
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(33.0d, "Food", "Stk", this);
				            Global.addContinuous(90.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="owner" value="true"></Slot>
			<Slot property="foodAmount" value="33" />
			<Slot property="goldAmount" value="90" />
		</Agents>
		<Agents type="Farm" rangeStartID="3000" rangeEndID="3004">
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[new ArrayList<aors.util.economics.Quantity>(){
				        {
				            Global.addContinuous(20.0d, "Food", "Stk", this);
				            Global.addContinuous(100.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="foodStock" value="20" />
			<Slot property="goldAmount" value="100" />
		</Agents>
		<Agents type="Factory" rangeStartID="4000" rangeEndID="4004">
			<Slot property="assets">
				<ValueExpr language="Java"><![CDATA[new ArrayList<aors.util.economics.Quantity>(){
				        {	
				        	Global.addContinuous(0.0d, "Food", "Stk", this);
				            Global.addContinuous(100.0d, "Money", "Stk", this);
				            Global.addContinuous(0.0d, "Labor", "Stk", this);
				            Global.addDiscrete(0, "Utility", this);
				        }
				    }]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
			</Slot>
			<Slot property="goldAmount" value="100" />
			<Slot property="utilityAmount" value="5" />
		</Agents>
		<ExogenousEvent type="Init" occurrenceTime="1" />
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<ExogenousEvent occurrenceTime="3" type="StartWork" />
		<ExogenousEvent occurrenceTime="6" type="CloseMarket" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface>
		<StatisticsUI>
			<StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">FoodPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market price?</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<!--<StatisticsVariableUI variable="MarketVolumeFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">number of Transactions</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>-->
			<StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">LaborPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market price?</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
				</StatisticsVariableUI>
			<!--<StatisticsVariableUI variable="MarketVolumeLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">number of Transactions</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>-->
			<StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">UtilityPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<!--<StatisticsVariableUI variable="MarketVolumeUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">number of Transactions</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyLaborFarm" comparisonGroup="person">
				<Label>
					<Text xml:lang="en">BuyLaborFarm</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyLaborFactory" comparisonGroup="person">
				<Label>
					<Text xml:lang="en">BuyLaborFactory</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>
				</StatisticsVariableUI>
			<StatisticsVariableUI variable="foodPerson">
				<Label>
					<Text xml:lang="en">Food Person</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">What is the average market volume?</Text>
				</Hint>				
			</StatisticsVariableUI>-->
			
		</StatisticsUI>
	</UserInterface>
</SimulationScenario>
