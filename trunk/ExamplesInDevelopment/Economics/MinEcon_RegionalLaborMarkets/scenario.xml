<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario version="0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://aor-simulation.org ../../../ext/AORSL/AORSL_0-9.xsd"
	xmlns="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	scenarioName="Regional_Labor_Markets"
	scenarioTitle="Regional Labor Markets"
	simulationManagerDirectory="../../..">
	
	<SimulationParameters simulationSteps="5000" timeUnit="D" stepTimeDelay="0"/>
	<SimulationModel modelName="Regional_Labor_Markets" modelTitle="Regional Labor Markets">
		<documentation>
			<dc:created>20100601</dc:created>
			<dc:creator>Xi Niu</dc:creator>
			<dc:contributor>Prof. Dr. Gerd Wagner</dc:contributor>
			<dc:source>
				The agent-based macroeconomic model was developed by Herbert Dawid, Simon Gemkow, Philipp Harting and Michael Neugart (see http://jasss.soc.surrey.ac.uk/12/4/5.html).
			</dc:source>
			<aors:shortDescription xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				The model consists of a capital good, a consumption good, and a labor market, and four types of agents: households, consumption goods producer, malls, and capital goods producer. 
			</aors:shortDescription>
			<aors:shortDescription xml:lang="zh" xmlns="http://www.w3.org/1999/xhtml">
				
			</aors:shortDescription>
			<aors:description xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				
			</aors:description>
			<aors:description xml:lang="zh" xmlns="http://www.w3.org/1999/xhtml">
				
			</aors:description>
			<informationModelDiagram></informationModelDiagram>
			<dc:license>Creative Commons Attribution-NonCommercial-ShareAlike 3.0, 
				see http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:license>
		</documentation>
		
		<Statistics>
			<Variable name="outputLowSkillRegion" dataType="Float"/>
			<Variable name="outputHighSkillRegion" dataType="Float"/>
			<Variable name="totalOutput" dataType="Float"/>
			<Variable name="numberOfCasesWithZeroProduction" dataType="Integer"/>
		</Statistics>
		
		<DataTypes>
			<ComplexDataType name="ProductInStock">
				<Attribute name="firmId" type="Integer"/>
				<Attribute name="price" type="Float"/>
				<Attribute name="quantity" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="ProductListItem">
				<Attribute name="firmId" type="Integer"/>
				<Attribute name="consumptionValue" type="Float"/>
				<Attribute name="selectionProbability" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="ProductDemandRecord">
				<Attribute name="mallId" type="Integer"/>
				<Attribute name="demand" type="Float"/>
				<Attribute name="maximumDemand" type="Float"/>
				<Attribute name="optimalStockLevel" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="InventoryPosition">
				<Attribute name="mallId" type="Integer"/>
				<Attribute name="quantity" type="Float"/>
				<Attribute name="adjustmentFactor" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="WorkerInFirm">
				<Attribute name="householdId" type="Integer"/>
				<Attribute name="wage" type="Float"/>
				<Attribute name="generalSkillLevel" type="Integer"/>
				<Attribute name="specificSkillLevel" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="JobApplicationRecord">
				<Attribute name="householdId" type="Integer"/>
				<Attribute name="generalSkillLevel" type="Integer"/>
				<Attribute name="specificSkillLevel" type="Float"/>
			</ComplexDataType>
			
			<ComplexDataType name="JobOfferRecord">
				<Attribute name="firmId" type="Integer"/>
				<Attribute name="wageOffer" type="Float"/>
				<Attribute name="netWageOffer" type="Float"/>
			</ComplexDataType>
		</DataTypes>
		
		<Globals>
			<GlobalVariable name="period" dataType="Integer"/>
			<GlobalVariable name="comm" dataType="Float"/>
			<GlobalVariable name="investmentSalesPrice" dataType="Float"/>
			<GlobalVariable name="qualityOfInvestment" dataType="Float"/>
			<GlobalVariable name="innovationProbability" dataType="Float"/>
			
			<GlobalVariable name="producedQuantityLowSkillRegion" dataType="Float"/><!--abstract definition-->
			<GlobalVariable name="producedQuantityHighSkillRegion" dataType="Float"/><!--abstract definition-->
			
			<GlobalFunction name="wouldInnovate" resultType="Float">
				<documentation>
					<description xml:lang="en">Every month the quality of the investment good is increased with probability 10% where with probability 90% there is no change of quality.</description>
				</documentation>
				<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 10) return 0.05;
					else return 0.0;
					]]></Body>
			</GlobalFunction>
			
			<GlobalFunction name="wouldBeJobSeeker" resultType="Boolean">
				<documentation>
					<description xml:lang="en">A randomly determined fraction 10% of employed workers who do an on-the-job search.</description>
					<description xml:lang="zh">随机选取10%的在业人员作为求职者。</description>
				</documentation>
				<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 10) return true;
					else return false;
					]]></Body>
			</GlobalFunction>
			
			<!--<GlobalFunction name="determineInitialWage" resultType="Float">
				<documentation>
					<description xml:lang="en">The initial wage of a worker can be determined according to his general skill level.</description>
					<description xml:lang="zh">工人的初始工资是由其一般技能水平确定。</description>
				</documentation>
				<Parameter name="generalSkillLevel" type="Integer"/>
				<Body language="Java"><![CDATA[
					if (generalSkillLevel == 1) return 1.0;
					else if (generalSkillLevel == 2) return 1.02;
					else if (generalSkillLevel == 3) return 1.04;
					else if (generalSkillLevel == 4) return 1.06;
					else return 1.08;
					]]></Body>
					</GlobalFunction>-->
			
			<GlobalFunction name="lowSkillRegion" resultType="Integer">
				<documentation>
					<description xml:lang="en">In a low skill region the skill distribution is such that 80% of workers have the lowest general skill level, whereas the remaining workers are equally distributed across the other four levels of general skills.</description>
				</documentation>
				<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 80) return 1;					// with probability 0.80
					else if (r < 85) return 2;		// with probability 0.05
					else if (r < 90) return 3;		// with probability 0.05
					else if (r < 95) return 4;		// with probability 0.05
					else return 5;								// with probability 0.05
					]]></Body>
			</GlobalFunction>
			
			<GlobalFunction name="mediumSkillRegion" resultType="Integer">
				<documentation>
					<description xml:lang="en">In a medium skill region the skill distribution is such that 80% of workers have the general skill level 3, whereas the remaining workers are equally distributed across the other four levels of general skills.</description>
				</documentation>
				<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 5) return 1;					// with probability 0.05
					else if (r < 10) return 2;		// with probability 0.05
					else if (r < 90) return 3;		// with probability 0.80
					else if (r < 95) return 4;		// with probability 0.05
					else return 5;								// with probability 0.05
					]]></Body>
			</GlobalFunction>
			
			<GlobalFunction name="highSkillRegion" resultType="Integer">
				<documentation>
					<description xml:lang="en">In a high skill region the skill distribution is such that 80% of workers have the highest general skill level, whereas the remaining workers are equally distributed across the other four levels of general skills.</description>
				</documentation>
				<Body language="Java"><![CDATA[
					int r = Random.uniformInt(0, 99);
					if (r < 5) return 1;					// with probability 0.05
					else if (r < 10) return 2;		// with probability 0.05
					else if (r < 15) return 3;		// with probability 0.05
					else if (r < 20) return 4;		// with probability 0.05
					else return 5;								// with probability 0.80
					]]></Body>
			</GlobalFunction>
		</Globals>
		
		<EntityTypes>
			<MessageType name="TellCurrentStockLevel"><!-- at step 3 -->
				<Attribute name="quantity" type="Float"/>
			</MessageType>
			
			<MessageType name="TellSalesRevenue"><!-- at step 4 -->
				<Attribute name="revenue" type="Float"/>
				<Attribute name="quantity" type="Float"/>
			</MessageType>
			
			<MessageType name="TellDismissal"/><!-- at step 6 -->
			
			<MessageType name="TellVacancy"><!-- at step 8 -->
				<Attribute name="generalSkillLevel" type="Integer"/>
				<Attribute name="specificSkillLevel" type="Float"/>
			</MessageType>
			
			<MessageType name="JobOffer"><!-- at step 11 -->
				<Attribute name="wageOffer" type="Float"/>
				<Attribute name="region" type="Integer"/>
			</MessageType>
			
			<MessageType name="AcceptJob"><!-- at step 13 -->
				<Attribute name="wage" type="Float"/>
				<Attribute name="generalSkillLevel" type="Integer"/>
				<Attribute name="specificSkillLevel" type="Float"/>
			</MessageType>
			
			<MessageType name="ResignJob"/><!-- at step 13 -->
			
			<MessageType name="DeliverProduct"><!-- at step 25 -->
				<Attribute name="quantity" type="Float"/>
			</MessageType>
			
			<MessageType name="TellWage"><!-- at step 25 -->
				<Attribute name="wage" type="Float"/>
				<Attribute name="region" type="Integer"/>
			</MessageType>
			
			<MessageType name="TellSpecificSkillLevel"><!-- at step 25 -->
				<Attribute name="specificSkillLevel" type="Float"/>
			</MessageType>
			
			<ActionEventType name="BuyNewInvestment"/><!-- at step 5 -->
			
			<ActionEventType name="DismissWorker"/><!-- at step 5 -->
			
			<ActionEventType name="PostVacancyInformation"><!-- at step 7 -->
				<Attribute name="firmId" type="Integer"/>
				<Attribute name="wageOffer" type="Float"/>
			</ActionEventType>
			
			<ActionEventType name="InFirstIterationOfferJob"/><!-- at step 10 -->
			
			<ActionEventType name="DistributeProduct"/><!-- at step 24 -->
			
			<ActionEventType name="PayWage"/><!-- at step 24 -->
			
			<ActionEventType name="IncreaseSpecificSkillLevel"/><!-- at step 24 -->
			
			<ActionEventType name="PayEqualShare"><!-- at step 25 -->
				<Attribute name="share" type="Float"/>
			</ActionEventType>
			
			<ActionEventType name="PayDividend"><!-- at step 25 -->
				<Attribute name="dividend" type="Float"/>
			</ActionEventType>
			
			<ActionEventType name="SetNewPrice"><!-- at step 25 -->
				<Attribute name="price" type="Float"/>
			</ActionEventType>
			
			<ExogenousEventType name="Init"/>
			<ExogenousEventType name="StartOfMonth" periodicity="24"/>
			<ExogenousEventType name="AtWeeklyIndividualConsumption" periodicity="6"/>
			<ExogenousEventType name="EndFirstIterationLaborSupply" periodicity="24"/>
			<ExogenousEventType name="EndSecondIterationLaborSupply" periodicity="24"/>
			<ExogenousEventType name="EndOfMonth" periodicity="24"/>
			
			<AgentType name="IGFirm">
				<documentation>
					<description xml:lang="en">Capital goods producer supplies investment goods infinitely at an exogenously given price. The quality of supplied investment goods increases randomly over time. Profit of capital goods producer is uniformly distributed to all households.</description>
				</documentation>
				<Attribute name="test" type="Float"/><!--!!!test!!!-->
				
				<Attribute name="investmentSalesRevenue" type="Float"/>
				<Attribute name="equalShare" type="Float"/>
				
				<PeriodicTimeEventType name="CalculateEqualShare" periodicity="24"/>
				
				<ReactionRule name="CalculateEqualShare_Rule" agentVariable="i">
					<documentation>
						<description xml:lang="en"><!-- at step 24 -->Revenues accruing with the investment good producer are distributed in equal shares among all households.</description>
					</documentation>
					<WHEN eventType="CalculateEqualShare"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="equalShare">
								<ValueExpr language="Java"><![CDATA[ i.getInvestmentSalesRevenue() / 400 ]]></ValueExpr>
							</Slot>
							<Slot property="investmentSalesRevenue" value="0.0"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="PayEqualShare">
								<Slot property="share">
									<ValueExpr language="Java"><![CDATA[ i.getEqualShare() ]]></ValueExpr>
								</Slot>
							</ActionEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
			
			<AgentType name="Mall">
				<documentation>
					<description xml:lang="en">Consumption goods are sold at malls. Malls are treated as local market platforms where CGPs store and offer their products and consumers come to buy goods at posted prices.</description>
				</documentation>
				<Attribute name="test" type="Float"/><!--!!!test!!!-->
				
				<ComplexDataProperty name="productsInStock" type="ProductInStock" upperMultiplicity="unbounded"/>
				
				<Function name="updateInventory" resultType="void">
					<documentation>
						<description xml:lang="en">The local stock levels at the malls are updated.</description>
					</documentation>
					<Parameter name="firmId" type="Integer"/>
					<Parameter name="quantity" type="Float"/>
					<Body language="Java"><![CDATA[
						for (ProductInStock p : getProductsInStock()) {
							if (p.getFirmId() == firmId) {
								p.setQuantity(p.getQuantity() + quantity);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="updatePrice" resultType="void">
					<documentation>
						<description xml:lang="en">The prices of consumption goods are updated.</description>
					</documentation>
					<Parameter name="firmId" type="Integer"/>
					<Parameter name="price" type="Float"/>
					<Body language="Java"><![CDATA[
						int i;
						for (ProductInStock p : getProductsInStock()) {
							if (p.getFirmId() == firmId) {
								p.setPrice(price);
							}
						}
						]]></Body>
				</Function>
				
				<PeriodicTimeEventType name="AtStartOfMonthCheckStockLevel" periodicity="24"/>
				
				<ReactionRule name="AtStartOfMonthCheckStockLevel_Rule" agentVariable="m">
					<documentation>
						<description xml:lang="en">Reporting the current stock level.</description>
					</documentation>
					<WHEN eventType="AtStartOfMonthCheckStockLevel"/>
					<FOR-ListItemVariable variable="p" listItemType="ProductInStock">
						<ListExpr language="Java"><![CDATA[ m.getProductsInStock() ]]></ListExpr>
					</FOR-ListItemVariable>
					<DO>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="TellCurrentStockLevel">
								<ReceiverIdRef language="Java"><![CDATA[ p.getFirmId() ]]></ReceiverIdRef>
								<Slot property="quantity">
									<ValueExpr language="Java"><![CDATA[ p.getQuantity() ]]></ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="DeliverProduct_Rule" agentVariable="m">
					<documentation>
						<description xml:lang="en"><!-- at step 25 -->When the produced quantities are delivered, the local stock levels at the malls are updated.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="DeliverProduct" messageVariable="msg" eventVariable="evt"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="updateInventory" contextObjectVariable="m">
								<Argument parameter="firmId">
									<ValueExpr language="Java"><![CDATA[ evt.getSenderIdRef() ]]></ValueExpr>
								</Argument>
								<Argument parameter="quantity">
									<ValueExpr language="Java"><![CDATA[ msg.getQuantity() ]]></ValueExpr>
								</Argument>
							</Call>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
			
			<AgentType name="Firm">
				<documentation>
					<description xml:lang="en">CGPs use a vintage capital stock and labor to produce the consumption good on a monthly basis. The consumption good is then distributed to the different regions this producer serves. For simplicity it is assumed that all producers offer their products in all regions. Each producer keeps a stock of its products at each of the regional malls and offers the good at a posted price that is updated once a month at the point in time when the stock is replenished.</description>
				</documentation>
				<Attribute name="test" type="Float"/><!--!!!test!!!-->
				
				<Attribute name="region" type="Integer"/>
				<Attribute name="productSalesPrice" type="Float"/>
				<Attribute name="productSalesRevenue" type="Float"/>
				<Attribute name="productSalesQuantity" type="Float"/>
				<Attribute name="grossInvestment" type="Float"/>
				<Attribute name="physicalCapitalStock" type="Float"/>
				<Attribute name="newInvestment" type="Float"/>
				<Attribute name="totalQualityOfCapitalStock" type="Float"/>
				<Attribute name="averageQualityOfCapitalStock" type="Float"/>
				<Attribute name="producedQuantity" type="Float"/>
				<Attribute name="costOfProduction" type="Float"/>
				<Attribute name="unitCostOfProduction" type="Float"/>
				<Attribute name="monthlyRealizedProfit" type="Float"/>
				<Attribute name="currentBalanceOfSavingAccount" type="Float"/>
				<Attribute name="equalDividend" type="Float"/>
				<Attribute name="optimalStockLevel" type="Float"/><!--abstract definition-->
				<Attribute name="laborSupplyQuantity" type="Integer"/>
				<Attribute name="wageOffer" type="Float"/>
				
				<Attribute name="lastFourProducedQuantities" type="Float" upperMultiplicity="unbounded"/>
				
				<ComplexDataProperty name="productDemands" type="ProductDemandRecord" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="inventoryPositions" type="InventoryPosition" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="workersInFirm" type="WorkerInFirm" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="dismissalsList" type="WorkerInFirm" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="jobApplications" type="JobApplicationRecord" upperMultiplicity="unbounded"/>
				
				<Function name="updateDemand" resultType="void">
					<documentation>
						<description></description>
					</documentation>
					<Parameter name="mallId" type="Integer"/>
					<Parameter name="demand" type="Float"/>
					<Body language="Java"><![CDATA[
						for (ProductDemandRecord p : getProductDemands()) {
							if (p.getMallId() == mallId) {
								p.setDemand(p.getDemand() + demand);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="updateOptimalStockLevel" resultType="void">
					<documentation>
						<description></description>
					</documentation>
					<Body language="Java"><![CDATA[
						for (ProductDemandRecord p : getProductDemands()) {
							if (p.getDemand() > p.getMaximumDemand()) {
								p.setMaximumDemand(p.getDemand());
							}
							p.setOptimalStockLevel((getProductSalesPrice() - (1 - 0.95) * getUnitCostOfProduction()) / (getProductSalesPrice() + 0.1) * p.getMaximumDemand());
							p.setDemand(0.0);
						}
						]]></Body>
				</Function>
				
				<Function name="getDemandRecordFromListWithId" resultType="ProductDemandRecord">
					<documentation>
						<description></description>
					</documentation>
					<Parameter name="mallId" type="Integer"/>
					<Body language="Java"><![CDATA[
						for (ProductDemandRecord p : getProductDemands()) {
							if (p.getMallId() == mallId) {
								return p;
							}
						}
						return null;
						]]></Body>
				</Function>
				
				<Function name="desireProductionQuantity" resultType="Float">
					<documentation>
						<description xml:lang="en">In order to smooth the simulation and to avoid excessive oscillations, the final planned production quantity is a linear combination of the sum of the orders received by all malls and a mean of the certain number of previous actual production quantities.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						double sumOfOrders = 0.0;
						double sumOfLastFourProducedQuantities = 0.0;
						double meanOfLastFourProducedQuantities = 0.0;
						double plannedOutput = 0.0;
						int i, j, k, l;
						
						for (i = 0; i < getInventoryPositions().size(); i++) {
							sumOfOrders += getInventoryPositions().get(i).getQuantity();
						}
						
						if (sumOfOrders == 0.0) {
							for (j = 0; j < getInventoryPositions().size(); j++) {
								getInventoryPositions().get(j).setAdjustmentFactor(1 / getInventoryPositions().size());
							}
						}
						else {
							for (k = 0; k < getInventoryPositions().size(); k++) {
								getInventoryPositions().get(k).setAdjustmentFactor(getInventoryPositions().get(k).getQuantity() / sumOfOrders);
							}
						}
						
						for (l = 0; l < getLastFourProducedQuantities().size(); l++) {
							sumOfLastFourProducedQuantities += getLastFourProducedQuantities().get(l);
						}
						meanOfLastFourProducedQuantities = sumOfLastFourProducedQuantities / 4;
						
						plannedOutput = 0.5 * sumOfOrders + (1 - 0.5) * meanOfLastFourProducedQuantities;
						
						return plannedOutput;
						]]></Body>
				</Function>
				
				<Function name="determineLaborCost" resultType="Float">
					<documentation>
						<description xml:lang="en">Get the total labor cost of every CGP.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						double sumOfWages = 0.0;
						
						int i;
						for (i = 0; i < getWorkersInFirm().size(); i++) {
							sumOfWages += getWorkersInFirm().get(i).getWage();
						}
						
						return sumOfWages;
						]]></Body>
				</Function>
				
				<Function name="determineAverageSpecificSkillLevel" resultType="Float">
					<documentation>
						<description xml:lang="en">Get the average specific skill level in CGP.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						double sumOfSpecificSkillLevels = 0.0;
						
						int i;
						for (i = 0; i < getWorkersInFirm().size(); i++) {
							sumOfSpecificSkillLevels += getWorkersInFirm().get(i).getSpecificSkillLevel();
						}
						
						return sumOfSpecificSkillLevels / getWorkersInFirm().size();
						]]></Body>
				</Function>
				
				<Function name="determineProductionPlan" resultType="void">
					<documentation>
						<description xml:lang="en">CGPs aim to realize a capital to labor ratio according to the standard rule for CES production functions.</description>
					</documentation>
					<Parameter name="laborPrice" type="Float"/>
					<Parameter name="investmentPrice" type="Float"/>
					<Parameter name="plannedProductionQuantity" type="Float"/>
					<Parameter name="averageSpecificSkillLevel" type="Float"/>
					<Parameter name="averageCapitalStockQuality" type="Float"/>
					<Body language="Java"><![CDATA[
						double plannedInvestmentInput = Math.pow((0.338 * laborPrice), (0.662)) * plannedProductionQuantity / (Math.pow((0.662 * investmentPrice), (0.662)) * Math.min(averageCapitalStockQuality, averageSpecificSkillLevel));
						double plannedLaborInput = Math.pow((0.662 * investmentPrice), (0.338)) * plannedProductionQuantity / (Math.pow((0.338 * laborPrice), (0.338)) * Math.min(averageCapitalStockQuality, averageSpecificSkillLevel));
						
						if (plannedInvestmentInput >= getGrossInvestment()) {
							setNewInvestment(plannedInvestmentInput - getGrossInvestment());
						}
						else {
							setNewInvestment(0.0);
							plannedLaborInput = Math.pow((plannedProductionQuantity / (Math.pow((getGrossInvestment()), (0.338)) * Math.min(averageCapitalStockQuality, averageSpecificSkillLevel))), (1 / 0.662));
						}
						
						setLaborSupplyQuantity((int)Math.ceil(plannedLaborInput) - getWorkersInFirm().size());
						]]></Body>
				</Function>
				
				<Function name="downsizingIncumbentWorkforce" resultType="Boolean">
					<documentation>
						<description xml:lang="en">In case of downsizing the incumbent workforce, the firm dismisses workers with lowest general skill levels first.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						java.util.Comparator<sim.model.dataTypes.WorkerInFirm> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.WorkerInFirm>() {
							public int compare(sim.model.dataTypes.WorkerInFirm a, sim.model.dataTypes.WorkerInFirm b) {
								double p1 = a.getGeneralSkillLevel();
								double p2 = b.getGeneralSkillLevel();
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
		         		return 0;
							}
						};
						
						java.util.Collections.shuffle(getWorkersInFirm());
						java.util.Collections.sort(getWorkersInFirm(), comparator);
						
						if (getDismissalsList().size() > 0) {
							getDismissalsList().clear();
						}
						
						int i;
						if (getLaborSupplyQuantity() >= 0) {
							return false;
						}
						else {
							for (i = 0; i < Math.abs(getLaborSupplyQuantity()); i++) {
								getDismissalsList().add(getWorkersInFirm().get(i));
							}
							return true;
						}
						]]></Body>
				</Function>
				
				<Function name="deleteWorkerRecordFromList" resultType="void">
					<documentation>
						<description xml:lang="en">When a worker resigns or is dismissed, he is dropped from the list of workers.</description>
					</documentation>
					<Parameter name="householdId" type="Integer"/>
					<Body language="Java"><![CDATA[
						int i;
						for (i = 0; i < getWorkersInFirm().size(); i++) {
							if (getWorkersInFirm().get(i).getHouseholdId() == householdId) {
								getWorkersInFirm().remove(i);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="determineJobOffer" resultType="void">
					<documentation>
						<description xml:lang="en">Every CGP ranks the applicants. Applicants with higher general skill levels are ranked higher. If there are two or more applicants with equal general skill levels, but different specific skill levels, the applicant with the higher specific skill level is ranked higher. Based on their ranking CGPs send job offers to as many applicants as they have vacancies to fill.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						java.util.Comparator<sim.model.dataTypes.JobApplicationRecord> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.JobApplicationRecord>() {
							public int compare(sim.model.dataTypes.JobApplicationRecord a, sim.model.dataTypes.JobApplicationRecord b) {
								Double p1 = new Double(- a.getGeneralSkillLevel());
								Double p2 = new Double(- b.getGeneralSkillLevel());
								Double p3 = new Double(- a.getSpecificSkillLevel());
								Double p4 = new Double(- b.getSpecificSkillLevel());
								int i = p1.compareTo(p2);
								if (i == 0) {
									return p3.compareTo(p4);
								}
								else {
									return i;
								}
							}
						};
						
						java.util.Collections.shuffle(getJobApplications());
						java.util.Collections.sort(getJobApplications(), comparator);
						
						int j = (int)getLaborSupplyQuantity();
						while (j < getJobApplications().size()) {
							getJobApplications().remove(j);
						}
						]]></Body>
				</Function>
				
				<Function name="clearJobApplications" resultType="void">
					<documentation>
						<description xml:lang="en">Clear the list of applicants.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						getJobApplications().clear();
						]]></Body>
				</Function>
				
				<Function name="productionProgress" resultType="void">
					<documentation>
						<description xml:lang="en">The production technology in the consumption goods sector is represented by a Cobb-Douglas type production function with complementarities between the quality of the investment good and the specific skills of employees for using that type of technology. Factor productivity is determined by the minimum of the average quality of physical capital and the average level of relevant specific skills of the workers. Capital and labor input is substitutable with a constant elasticity and we assume constant returns to scale.</description>
					</documentation>
					<Parameter name="averageSpecificSkillLevel" type="Float"/>
					<Parameter name="averageCapitalStockQuality" type="Float"/>
					<Parameter name="labor" type="Float"/>
					<Parameter name="investment" type="Float"/>
					<Body language="Java"><![CDATA[
						setProducedQuantity(Math.min(averageSpecificSkillLevel, averageCapitalStockQuality) * Math.pow((labor), (0.662)) * Math.pow((investment), (0.338)));
						]]></Body>
				</Function>
				
				<Function name="updateSpecificSkillLevel" resultType="void">
					<documentation>
						<description xml:lang="en">The specific skill level of a worker is updated.</description>
					</documentation>
					<Parameter name="householdId" type="Integer"/>
					<Parameter name="specificSkillLevel" type="Float"/>
					<Body language="Java"><![CDATA[
						int i;
						for (i = 0; i < getWorkersInFirm().size(); i++) {
							if (getWorkersInFirm().get(i).getHouseholdId() == householdId) {
								getWorkersInFirm().get(i).setSpecificSkillLevel(specificSkillLevel);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="determineDividend" resultType="void">
					<documentation>
						<description xml:lang="en">Similar to the capital goods producer, we assume that all households hold equal shares in all consumption goods producers, consequently the dividends are equally distributed to the households. In order to avoid exceeding accumulations of savings as well as excessive indebtedness, we employ a simple dividend policy that provides different dividend rates depending on the current balance of saving account. The rule states that a firm pays no dividends, if the balance is negative and the debt is on a scale above the last monthly revenue. If the balance is positive and savings are above the monthly revenue, the firm disburses all profits. In the remaining case, if the balance is between these critical levels, a fixed proportion div ∈ [0,1] of profits is paid out.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						setCostOfProduction(getGrossInvestment() + determineLaborCost());
						if (getProducedQuantity() > 0.0) {
							setUnitCostOfProduction(getCostOfProduction() / getProducedQuantity());
							setProductSalesPrice((1 + 0.2) * getUnitCostOfProduction());
						}
						setMonthlyRealizedProfit(getProductSalesRevenue() - getCostOfProduction());
						
						if (getMonthlyRealizedProfit() <= 0.0) {
							setEqualDividend(0.0);
							setCurrentBalanceOfSavingAccount(getCurrentBalanceOfSavingAccount() + getMonthlyRealizedProfit());
							setProductSalesRevenue(0.0);
							setProductSalesQuantity(0.0);
						}
						else {
							if (getCurrentBalanceOfSavingAccount() < 0.0 && Math.abs(getCurrentBalanceOfSavingAccount()) > getProductSalesRevenue()) {
								setEqualDividend(0.0);
								setCurrentBalanceOfSavingAccount(getCurrentBalanceOfSavingAccount() + getMonthlyRealizedProfit());
								setProductSalesRevenue(0.0);
								setProductSalesQuantity(0.0);
							}
							else if (getCurrentBalanceOfSavingAccount() > 0.0 && getCurrentBalanceOfSavingAccount() > getProductSalesRevenue()) {
								setEqualDividend(getMonthlyRealizedProfit() / 400);
								setProductSalesRevenue(0.0);
								setProductSalesQuantity(0.0);
							}
							else {
								setEqualDividend(0.9 * getMonthlyRealizedProfit() / 400);
								setCurrentBalanceOfSavingAccount(getCurrentBalanceOfSavingAccount() + (1 - 0.9) * getMonthlyRealizedProfit());
								setProductSalesRevenue(0.0);
								setProductSalesQuantity(0.0);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="clearInventoryPositions" resultType="void">
					<documentation>
						<description xml:lang="en">Clear the list of inventory positions.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						getInventoryPositions().clear();
						]]></Body>
				</Function>
				
				<Function name="updateLastFourProducedQuantities" resultType="void">
					<documentation>
						<description xml:lang="en">Update the last 4 production quantities.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						getLastFourProducedQuantities().remove(0);
						getLastFourProducedQuantities().add(getProducedQuantity());
						]]></Body>
				</Function>
				
				<PeriodicTimeEventType name="MakeProductionPlan" periodicity="24"/>
				<PeriodicTimeEventType name="InFirstIterationRankApplicant" periodicity="24"/>
				<PeriodicTimeEventType name="StartSecondIterationLaborSupply" periodicity="24"/>
				<PeriodicTimeEventType name="InSecondIterationRankApplicant" periodicity="24"/>
				<PeriodicTimeEventType name="StartOfProduction" periodicity="24"/>
				<PeriodicTimeEventType name="CalculateDividend" periodicity="24"/>
				
				<ReactionRule name="TellCurrentStockLevel_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 3 -->Every CGP receives messages from all the malls it serves reporting the current stock level and checks once every period whether any of the stocks it keeps at different malls have to be refilled.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellCurrentStockLevel" messageVariable="msg" eventVariable="evt"/>
					<IF language="Java"><![CDATA[ msg.getQuantity() >= f.getOptimalStockLevel() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<MultiValuedSlot property="inventoryPositions">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new InventoryPosition() {
											{
												setMallId(evt.getSenderIdRef());
												setQuantity(0.0);
												setAdjustmentFactor(0.0);
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<MultiValuedSlot property="inventoryPositions">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new InventoryPosition() {
											{
												setMallId(evt.getSenderIdRef());
												setQuantity(f.getOptimalStockLevel() - msg.getQuantity());
												setAdjustmentFactor(0.0);
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</ELSE>
				</ReactionRule>
				
				<ReactionRule name="MakeProductionPlan_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 4 -->The CGP implements its production plan.</description>
					</documentation>
					<WHEN eventType="MakeProductionPlan"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="determineProductionPlan" contextObjectVariable="f">
								<Argument parameter="laborPrice">
									<ValueExpr language="Java"><![CDATA[ f.determineLaborCost() / f.getWorkersInFirm().size() ]]></ValueExpr>
								</Argument>
								<Argument parameter="investmentPrice">
									<ValueExpr language="Java"><![CDATA[ Global.getInvestmentSalesPrice() ]]></ValueExpr>
								</Argument>
								<Argument parameter="plannedProductionQuantity">
									<ValueExpr language="Java"><![CDATA[ f.desireProductionQuantity() ]]></ValueExpr>
								</Argument>
								<Argument parameter="averageSpecificSkillLevel">
									<ValueExpr language="Java"><![CDATA[ f.determineAverageSpecificSkillLevel() ]]></ValueExpr>
								</Argument>
								<Argument parameter="averageCapitalStockQuality">
									<ValueExpr language="Java"><![CDATA[ f.getAverageQualityOfCapitalStock() ]]></ValueExpr>
								</Argument>
							</Call>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="BuyNewInvestment">
								<Condition language="Java"><![CDATA[ f.getNewInvestment() > 0.0 ]]></Condition>
							</ActionEventExpr>
							<ActionEventExpr actionEventType="DismissWorker">
								<Condition language="Java"><![CDATA[ f.downsizingIncumbentWorkforce() ]]></Condition>
							</ActionEventExpr>
							<ActionEventExpr actionEventType="PostVacancyInformation">
								<Condition language="Java"><![CDATA[ f.getLaborSupplyQuantity() > 0 ]]></Condition>
								<Delay>
									<ValueExpr language="Java"><![CDATA[ 3 ]]></ValueExpr>
								</Delay>
								<Slot property="firmId">
									<ValueExpr language="Java"><![CDATA[ f.getId() ]]></ValueExpr>
								</Slot>
								<Slot property="wageOffer">
									<ValueExpr language="Java"><![CDATA[ f.getWageOffer() ]]></ValueExpr>
								</Slot>
							</ActionEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="TellSalesRevenue_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 4 -->The CGP receives sales revenue from every regional mall it serves.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellSalesRevenue" messageVariable="msg" eventVariable="evt"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="productSalesRevenue">
								<ValueExpr language="Java"><![CDATA[ f.getProductSalesRevenue() + msg.getRevenue() ]]></ValueExpr>
							</Slot>
							<Slot property="productSalesQuantity">
								<ValueExpr language="Java"><![CDATA[ f.getProductSalesQuantity() + msg.getQuantity() ]]></ValueExpr>
							</Slot>
							<Call procedure="updateDemand" contextObjectVariable="f">
								<Argument parameter="mallId">
									<ValueExpr language="Java"><![CDATA[ evt.getSenderIdRef() ]]></ValueExpr>
								</Argument>
								<Argument parameter="demand">
									<ValueExpr language="Java"><![CDATA[ msg.getQuantity() ]]></ValueExpr>
								</Argument>
							</Call>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="TellVacancy_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 8, 17 -->The CGP receives informations from the applicants about their general as well as his specific skill levels.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellVacancy" messageVariable="msg" eventVariable="evt"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="jobApplications">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new JobApplicationRecord() {
											{
												setHouseholdId(evt.getSenderIdRef());
												setGeneralSkillLevel(msg.getGeneralSkillLevel());
												setSpecificSkillLevel(msg.getSpecificSkillLevel());
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="InFirstIterationRankApplicant_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 9 -->Every CGP ranks the applicants. Applicants with higher general skill levels are ranked higher. If there are two or more applicants with equal general skill levels, but different specific skill levels, the applicant with the higher specific skill level is ranked higher. Based on their ranking firms send job offers to as many applicants as they have vacancies to fill.</description>
					</documentation>
					<WHEN eventType="InFirstIterationRankApplicant"/>
					<IF language="Java"><![CDATA[ f.getJobApplications().size() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="determineJobOffer" contextObjectVariable="f"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="InFirstIterationOfferJob"/>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="AcceptJob_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 13, 22 -->The CGP receives acceptances from the applicants and adds them to the list of workers.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="AcceptJob" messageVariable="msg" eventVariable="evt"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="laborSupplyQuantity">
								<ValueExpr language="Java"><![CDATA[ f.getLaborSupplyQuantity() - 1 ]]></ValueExpr>
							</Slot>
							<MultiValuedSlot property="workersInFirm">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new WorkerInFirm() {
											{
												setHouseholdId(evt.getSenderIdRef());
												setWage(msg.getWage());
												setGeneralSkillLevel(msg.getGeneralSkillLevel());
												setSpecificSkillLevel(msg.getSpecificSkillLevel());
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="ResignJob_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 13, 22 -->The CGP receives resignation from its employee and drops him from the list of workers.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ResignJob" messageVariable="msg" eventVariable="evt"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="laborSupplyQuantity">
								<ValueExpr language="Java"><![CDATA[ f.getLaborSupplyQuantity() + 1 ]]></ValueExpr>
							</Slot>
							<Call procedure="deleteWorkerRecordFromList" contextObjectVariable="f">
								<Argument parameter="householdId">
									<ValueExpr language="Java"><![CDATA[ evt.getSenderIdRef() ]]></ValueExpr>
								</Argument>
							</Call>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="StartSecondIterationLaborSupply_Rule" agentVariable="f">
					<documentation>
						<description><!-- at step 15 --></description>
					</documentation>
					<WHEN eventType="StartSecondIterationLaborSupply"/>
					<IF language="Java"><![CDATA[ f.getLaborSupplyQuantity() > 0 ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="PostVacancyInformation">
								<Slot property="firmId">
									<ValueExpr language="Java"><![CDATA[ f.getId() ]]></ValueExpr>
								</Slot>
								<Slot property="wageOffer">
									<ValueExpr language="Java"><![CDATA[ f.getWageOffer() ]]></ValueExpr>
								</Slot>
							</ActionEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="InSecondIterationRankApplicant_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 18 -->Every CGP ranks the applicants. Applicants with higher general skill levels are ranked higher. If there are two or more applicants with equal general skill levels, but different specific skill levels, the applicant with the higher specific skill level is ranked higher. Based on their ranking firms send job offers to as many applicants as they have vacancies to fill.</description>
					</documentation>
					<WHEN eventType="InSecondIterationRankApplicant"/>
					<IF language="Java"><![CDATA[ f.getJobApplications().size() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="determineJobOffer" contextObjectVariable="f"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="InFirstIterationOfferJob"/>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="StartOfProduction_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 23 -->Production takes place.</description>
					</documentation>
					<WHEN eventType="StartOfProduction"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="productionProgress" contextObjectVariable="f">
								<Argument parameter="averageSpecificSkillLevel">
									<ValueExpr language="Java"><![CDATA[ f.determineAverageSpecificSkillLevel() ]]></ValueExpr>
								</Argument>
								<Argument parameter="averageCapitalStockQuality">
									<ValueExpr language="Java"><![CDATA[ f.getAverageQualityOfCapitalStock() ]]></ValueExpr>
								</Argument>
								<Argument parameter="labor">
									<ValueExpr language="Java"><![CDATA[ f.getWorkersInFirm().size() ]]></ValueExpr>
								</Argument>
								<Argument parameter="investment">
									<ValueExpr language="Java"><![CDATA[ f.getGrossInvestment() ]]></ValueExpr>
								</Argument>
							</Call>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="DistributeProduct"/>
							<ActionEventExpr actionEventType="PayWage"/>
							<ActionEventExpr actionEventType="IncreaseSpecificSkillLevel"/>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="CalculateDividend_Rule" agentVariable="f">
					<documentation>
						<description xml:lang="en"><!-- at step 24 -->The CGP calculates the dividends according to its monthly realized profit.</description>
					</documentation>
					<WHEN eventType="CalculateDividend"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="determineDividend" contextObjectVariable="f"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ActionEventExpr actionEventType="PayDividend">
								<Condition language="Java"><![CDATA[ f.getEqualDividend() > 0.0 ]]></Condition>
								<Slot property="dividend">
									<ValueExpr language="Java"><![CDATA[ f.getEqualDividend() ]]></ValueExpr>
								</Slot>
							</ActionEventExpr>
							<ActionEventExpr actionEventType="SetNewPrice">
								<Slot property="price">
									<ValueExpr language="Java"><![CDATA[ f.getProductSalesPrice() ]]></ValueExpr>
								</Slot>
							</ActionEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
			
			<AgentType name="Household">
				<documentation>
					<description xml:lang="en">Each household determines once a month the budget which it will spend for consumption based on its income and its assets carried over from the previous period. Once a week the household then visits the (regional) mall to purchase consumption goods. When visiting the mall each consumer collects information about the range of goods provided and about the prices and inventories of the different goods.</description>
				</documentation>
				<Attribute name="test" type="Float"/><!--!!!test!!!-->
				
				<Attribute name="region" type="Integer"/>
				<Attribute name="firm" type="Integer"/>
				<Attribute name="lastFirm" type="Integer"/>
				<Attribute name="jobSeeker" type="Boolean"/>
				<Attribute name="generalSkillLevel" type="Integer"/>
				<Attribute name="specificSkillLevel" type="Float"/>
				<Attribute name="currentWage" type="Float"/>
				<Attribute name="totalIncome" type="Float"/>
				<Attribute name="meanIncome" type="Float"/>
				<Attribute name="currentIncome" type="Float"/>
				<Attribute name="savingAccount" type="Float"/>
				<Attribute name="cashOnHand" type="Float"/>
				<Attribute name="consumptionBudget" type="Float"/>
				<Attribute name="weekConsumptionBudget" type="Float"/>
				<Attribute name="remainingConsumptionBudget" type="Float"/>
				<Attribute name="selectFirstProductId" type="Integer"/>
				<Attribute name="selectSecondProductId" type="Integer"/>
				<Attribute name="spendBudgetForFirstProduct" type="Float"/>
				<Attribute name="spendBudgetForSecondProduct" type="Float"/>
				<Attribute name="purchaseQuantityForFirstProduct" type="Float"/>
				<Attribute name="purchaseQuantityForSecondProduct" type="Float"/>
				
				<ComplexDataProperty name="availableProducts" type="ProductListItem" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="jobOffers" type="JobOfferRecord" upperMultiplicity="unbounded"/>
				
				<Function name="determineConsumptionBudget" resultType="void">
					<documentation>
						<description xml:lang="en">Our decision rule for determining the savings is based on the work of Deaton (1991). Deaton examines the saving behavior of impatient consumers when they are not permitted to borrow. In a scenario with independent and identically distributed income draws, he obtains a consumption function depending on cash on hand, which has the following characteristics: There exists a critical value of cash on hand. When the available liquidity is below this critical value the whole cash on hand will be spent. In the opposite case the agent will save a part of his cash on hand. The assets act like a buffer stock which protect consumption against bad income draws.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						setTotalIncome(getTotalIncome() + getCurrentIncome());
						setMeanIncome(getTotalIncome() / Global.getPeriod());
						setCashOnHand(getSavingAccount() + getRemainingConsumptionBudget() + getCurrentIncome());
						setRemainingConsumptionBudget(0.0);
						setCurrentIncome(0.0);
						
						if (getCashOnHand() > 0.9 * getMeanIncome()) {
							setConsumptionBudget(getCashOnHand() - 0.1 * (getCashOnHand() - 0.9 * getMeanIncome()));
							setSavingAccount(getCashOnHand() - getConsumptionBudget());
						}
						else {
							setConsumptionBudget(getCashOnHand());
							setSavingAccount(0.0);
						}
						]]></Body>
				</Function>
				
				<Function name="consumptionDecision" resultType="void">
					<documentation>
						<description xml:lang="en">At the weekly visit to the mall in his region each consumer collects information about the range of goods provided and about the prices and inventories of the different goods. Once the consumer has selected a good he spends his entire budget for that good if the stock at the mall is sufficiently large. In case the consumer cannot spend all his budget on the product selected first, he spends as much as possible, removes that product from the list, updates the logit values and selects another product to spend the remaining consumption budget there. If he is rationed again, he spends as much as possible on the second selected product, rolls over the remaining budget to the following week and finishes the visit to the mall.</description>
					</documentation>
					<Parameter name="productsCollection" type="List" itemType="ProductInStock"/>
					<Body language="Java"><![CDATA[
						int i, j, k;
						
						for (i = 0; i < productsCollection.size(); i++) {
							if (productsCollection.get(i).getQuantity() > 0.0) {
								sim.model.dataTypes.ProductListItem p = new sim.model.dataTypes.ProductListItem();
								p.setFirmId(productsCollection.get(i).getFirmId());
								p.setConsumptionValue(Math.pow((productsCollection.get(i).getPrice()), (-1 * 8.5)));
								p.setSelectionProbability(0.0);
								getAvailableProducts().add(p);
							}
						}
						
						setWeekConsumptionBudget(getConsumptionBudget() / 4 + getRemainingConsumptionBudget());
						setSelectFirstProductId(productSelection());
						if (getSelectFirstProductId() == 0) {
							setSpendBudgetForFirstProduct(0.0);
							setPurchaseQuantityForFirstProduct(0.0);
							setSelectSecondProductId(0);
							setSpendBudgetForSecondProduct(0.0);
							setPurchaseQuantityForSecondProduct(0.0);
							setRemainingConsumptionBudget(getWeekConsumptionBudget());
							setWeekConsumptionBudget(0.0);
						}
						else {
							for (j = 0; j < productsCollection.size(); j++) {
								if (productsCollection.get(j).getFirmId() == getSelectFirstProductId()) {
									if (productsCollection.get(j).getQuantity() >= getWeekConsumptionBudget() / productsCollection.get(j).getPrice()) {
										setSpendBudgetForFirstProduct(getWeekConsumptionBudget());
										setPurchaseQuantityForFirstProduct(getWeekConsumptionBudget() / productsCollection.get(j).getPrice());
										productsCollection.get(j).setQuantity(productsCollection.get(j).getQuantity() - getPurchaseQuantityForFirstProduct());
										setSelectSecondProductId(0);
										setSpendBudgetForSecondProduct(0.0);
										setPurchaseQuantityForSecondProduct(0.0);
										setRemainingConsumptionBudget(0.0);
										setWeekConsumptionBudget(0.0);
										getAvailableProducts().clear();
									}
									else {
										setSpendBudgetForFirstProduct(productsCollection.get(j).getQuantity() * productsCollection.get(j).getPrice());
										setPurchaseQuantityForFirstProduct(productsCollection.get(j).getQuantity());
										productsCollection.get(j).setQuantity(0.0);
										setWeekConsumptionBudget(getWeekConsumptionBudget() - getSpendBudgetForFirstProduct());
										deleteProductRecordFromList(getSelectFirstProductId());
										setSelectSecondProductId(productSelection());
										if (getSelectSecondProductId() == 0) {
											setSpendBudgetForSecondProduct(0.0);
											setPurchaseQuantityForSecondProduct(0.0);
											setRemainingConsumptionBudget(getWeekConsumptionBudget());
											setWeekConsumptionBudget(0.0);
										}
										else {
											for (k = 0; k < productsCollection.size(); k++) {
												if (productsCollection.get(k).getFirmId() == getSelectSecondProductId()) {
													if (productsCollection.get(k).getQuantity() >= getWeekConsumptionBudget() / productsCollection.get(k).getPrice()) {
														setSpendBudgetForSecondProduct(getWeekConsumptionBudget());
														setPurchaseQuantityForSecondProduct(getWeekConsumptionBudget() / productsCollection.get(k).getPrice());
														productsCollection.get(k).setQuantity(productsCollection.get(k).getQuantity() - getPurchaseQuantityForSecondProduct());
														setRemainingConsumptionBudget(0.0);
														setWeekConsumptionBudget(0.0);
														getAvailableProducts().clear();
													}
													else {
														setSpendBudgetForSecondProduct(productsCollection.get(k).getQuantity() * productsCollection.get(k).getPrice());
														setPurchaseQuantityForSecondProduct(productsCollection.get(k).getQuantity());
														productsCollection.get(k).setQuantity(0.0);
														setRemainingConsumptionBudget(getWeekConsumptionBudget() - getSpendBudgetForSecondProduct());
														setWeekConsumptionBudget(0.0);
														getAvailableProducts().clear();
													}
												}
											}
										}
									}
								}
							}
						}
						]]></Body>
				</Function>
				
				<Function name="productSelection" resultType="Integer">
					<documentation>
						<description xml:lang="en">In the Marketing literature it is standard to describe individual consumption decisions using logit models. We assume that the decision of a consumer which good to buy is random, where purchasing probabilities are based on the logit values he attaches to the different choices he is aware of.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						double r = Math.random();
						double sumOfValues = 0.0;
						int productSelectId = 0;
						int i, j;
						
						if (getAvailableProducts().size() == 0) {
							productSelectId = 0;
						}
						else {
							for (i = 0; i < getAvailableProducts().size(); i++) {
								sumOfValues += getAvailableProducts().get(i).getConsumptionValue();
							}
							for (j = 0; j < getAvailableProducts().size(); j++) {
								if (j == 0) {
									getAvailableProducts().get(j).setSelectionProbability(getAvailableProducts().get(j).getConsumptionValue() / sumOfValues);
									if (r < getAvailableProducts().get(j).getSelectionProbability()) {
										productSelectId = (int)getAvailableProducts().get(j).getFirmId();
									}
								}
								else {
									getAvailableProducts().get(j).setConsumptionValue(getAvailableProducts().get(j).getConsumptionValue() + getAvailableProducts().get(j - 1).getConsumptionValue());
									getAvailableProducts().get(j).setSelectionProbability(getAvailableProducts().get(j).getConsumptionValue() / sumOfValues);
									if (r < getAvailableProducts().get(j).getSelectionProbability() && r >= getAvailableProducts().get(j - 1).getSelectionProbability()) {
										productSelectId = (int)getAvailableProducts().get(j).getFirmId();
									}
								}
							}
						}
						
						return productSelectId;
						]]></Body>
				</Function>
				
				<Function name="deleteProductRecordFromList" resultType="void">
					<documentation>
						<description xml:lang="en">In case the consumer cannot spend all his budget on the product selected first, he spends as much as possible, removes that product from the list.</description>
					</documentation>
					<Parameter name="firmId" type="Integer"/>
					<Body language="Java"><![CDATA[
						int i;
						for (i = 0; i < getAvailableProducts().size(); i++) {
							if (getAvailableProducts().get(i).getFirmId() == firmId) {
								getAvailableProducts().remove(i);
							}
						}
						]]></Body>
				</Function>
				
				<Function name="determineJobAcceptance" resultType="void">
					<documentation>
						<description xml:lang="en">Each worker ranks the incoming job offers according to the wages net of commuting costs (comm > 0) that may arise if he was to accept a job in the region where he does not live. Each worker accepts the highest ranked job offer at the advertised wage rate.</description>
					</documentation>
					<Body language="Java"><![CDATA[
						java.util.Comparator<sim.model.dataTypes.JobOfferRecord> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.JobOfferRecord>() {
							public int compare(sim.model.dataTypes.JobOfferRecord a, sim.model.dataTypes.JobOfferRecord b) {
								double p1 = - a.getNetWageOffer();
								double p2 = - b.getNetWageOffer();
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
								return 0;
							}
						};
						
						java.util.Collections.shuffle(getJobOffers());
						java.util.Collections.sort(getJobOffers(), comparator);
						
						setLastFirm(getFirm());
						setFirm(getJobOffers().get(0).getFirmId());
						setCurrentWage(getJobOffers().get(0).getWageOffer());
						setJobSeeker(false);
						
						getJobOffers().clear();
						]]></Body>
				</Function>
				
				<PeriodicTimeEventType name="AtStartOfMonthDetermineConsumptionBudget" periodicity="24"/>
				<PeriodicTimeEventType name="InFirstIterationAcceptJob" periodicity="24"/>
				<PeriodicTimeEventType name="InSecondIterationAcceptJob" periodicity="24"/>
				
				<ReactionRule name="AtStartOfMonthDetermineConsumptionBudget_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en">Once a month households receive their income. Depending on the available cash, that is the current income from factor markets (i.e. labor income and dividends distributed by capital and consumption goods producers) plus assets carried over from the previous period, the household sets the budget which it will spend for consumption and consequently determines the remaining part which is saved.</description>
					</documentation>
					<WHEN eventType="AtStartOfMonthDetermineConsumptionBudget"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="determineConsumptionBudget" contextObjectVariable="h"/>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="TellDismissal_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 6 -->A worker gets a notice that he is dismissed.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellDismissal"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="lastFirm">
								<ValueExpr language="Java"><![CDATA[ h.getFirm() ]]></ValueExpr>
							</Slot>
							<Slot property="firm" value="100"/>
							<Slot property="jobSeeker" value="true"/>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				
				<ReactionRule name="JobOffer_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 11, 20 -->The job seeker receives the incoming job offers.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="JobOffer" messageVariable="msg" eventVariable="evt"/>
					<IF language="Java"><![CDATA[ msg.getRegion() == h.getRegion() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<MultiValuedSlot property="jobOffers">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new JobOfferRecord() {
											{
												setFirmId(evt.getSenderIdRef());
												setWageOffer(msg.getWageOffer());
												setNetWageOffer(msg.getWageOffer());
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<MultiValuedSlot property="jobOffers">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new JobOfferRecord() {
											{
												setFirmId(evt.getSenderIdRef());
												setWageOffer(msg.getWageOffer());
												setNetWageOffer(msg.getWageOffer() - Global.getComm());
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</ELSE>
				</ReactionRule>
				
				<ReactionRule name="InFirstIterationAcceptJob_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 12 -->The job seeker accepts the highest ranked job offer.</description>
					</documentation>
					<WHEN eventType="InFirstIterationAcceptJob"/>
					<IF language="Java"><![CDATA[ h.getJobOffers().size() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="determineJobAcceptance" contextObjectVariable="h"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="AcceptJob">
								<ReceiverIdRef language="Java"><![CDATA[ h.getFirm() ]]></ReceiverIdRef>
								<Slot property="wage">
									<ValueExpr language="Java"><![CDATA[ h.getCurrentWage() ]]></ValueExpr>
								</Slot>
								<Slot property="generalSkillLevel">
									<ValueExpr language="Java"><![CDATA[ h.getGeneralSkillLevel() ]]></ValueExpr>
								</Slot>
								<Slot property="specificSkillLevel">
									<ValueExpr language="Java"><![CDATA[ h.getSpecificSkillLevel() ]]></ValueExpr>
								</Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="ResignJob">
								<Condition language="Java"><![CDATA[ h.getLastFirm() != 100 ]]></Condition>
								<ReceiverIdRef language="Java"><![CDATA[ h.getLastFirm() ]]></ReceiverIdRef>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="InSecondIterationAcceptJob_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 21 -->The job seeker accepts the highest ranked job offer.</description>
					</documentation>
					<WHEN eventType="InSecondIterationAcceptJob"/>
					<IF language="Java"><![CDATA[ h.getJobOffers().size() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="determineJobAcceptance" contextObjectVariable="h"/>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="AcceptJob">
								<ReceiverIdRef language="Java"><![CDATA[ h.getFirm() ]]></ReceiverIdRef>
								<Slot property="wage">
									<ValueExpr language="Java"><![CDATA[ h.getCurrentWage() ]]></ValueExpr>
								</Slot>
								<Slot property="generalSkillLevel">
									<ValueExpr language="Java"><![CDATA[ h.getGeneralSkillLevel() ]]></ValueExpr>
								</Slot>
								<Slot property="specificSkillLevel">
									<ValueExpr language="Java"><![CDATA[ h.getSpecificSkillLevel() ]]></ValueExpr>
								</Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="ResignJob">
								<Condition language="Java"><![CDATA[ h.getLastFirm() != 100 ]]></Condition>
								<ReceiverIdRef language="Java"><![CDATA[ h.getLastFirm() ]]></ReceiverIdRef>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="TellWage_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 25 -->All workers receive the wages for the full month from his employer.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellWage" messageVariable="msg"/>
					<IF language="Java"><![CDATA[ msg.getRegion() == h.getRegion() ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="currentIncome">
								<ValueExpr language="Java"><![CDATA[ h.getCurrentIncome() + msg.getWage() ]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<Slot property="currentIncome">
								<ValueExpr language="Java"><![CDATA[ h.getCurrentIncome() + msg.getWage() - Global.getComm() ]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</ELSE>
				</ReactionRule>
				
				<ReactionRule name="TellSpecificSkillLevel_Rule" agentVariable="h">
					<documentation>
						<description xml:lang="en"><!-- at step 25 -->All workers increase his specific skill level from his employer.</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="TellSpecificSkillLevel" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="specificSkillLevel">
								<ValueExpr language="Java"><![CDATA[ msg.getSpecificSkillLevel() ]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
		</EntityTypes>
		
		<EnvironmentRules>
			<EnvironmentRule name="Create_InitialProductsInStock_Rule">
				<documentation>
					<description xml:lang="en">Every CGP keeps a stock of its products at every regional mall.</description>
				</documentation>
				<WHEN eventType="Init"/>
				<FOR-ObjectVariable variable="m" objectType="Mall"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="m">
							<MultiValuedSlot property="productsInStock">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new ProductInStock() {
											{
												setFirmId(f.getId());
												setPrice(f.getProductSalesPrice());
												setQuantity(8.0);
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UpdateObject>
						<UpdateObject objectVariable="f">
							<MultiValuedSlot property="productDemands">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new ProductDemandRecord() {
											{
												setMallId(m.getId());
												setDemand(0.0);
												setMaximumDemand(0.0);
												setOptimalStockLevel(0.0);
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<!--<EnvironmentRule name="Create_InitialReservationWage_Rule">
		    <documentation>
		    	<description xml:lang="en">Get an initial reservation wage of every household on the basis of his general skill level.</description>
		    </documentation>
		    <WHEN eventType="Init"/>
		    <FOR-ObjectVariable variable="h" objectType="Household"/>
		    <DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="currentWage">
								<ValueExpr language="Java"><![CDATA[ Global.determineInitialWage(h.getGeneralSkillLevel()) ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
				</EnvironmentRule>-->
			
			<EnvironmentRule name="Create_InitialUnemployedWorkerAsJobSeeker_Rule">
				<documentation>
					<description xml:lang="en">Set the unemployed workers as job seekers.</description>
				</documentation>
				<WHEN eventType="Init"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ h.getFirm() == 100 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="jobSeeker" value="true"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="Create_InitialWorkersInFirm_Rule">
				<documentation>
					<description xml:lang="en">Confirm the incumbent workforce of Every CGP.</description>
				</documentation>
				<WHEN eventType="Init"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ f.getId() == h.getFirm() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="f">
							<MultiValuedSlot property="workersInFirm">
								<AddLast>
									<ItemExpr language="Java"><![CDATA[
										new WorkerInFirm() {
											{
												setHouseholdId(h.getId());
												setWage(h.getCurrentWage());
												setGeneralSkillLevel(h.getGeneralSkillLevel());
												setSpecificSkillLevel(h.getSpecificSkillLevel());
											}
										}
										]]></ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="AtStartOfMonthDetermineEmployedWorkerAsJobSeeker_Rule">
				<documentation>
					<description xml:lang="en">A randomly determined fraction (10%) of employed workers who search on-the-job.</description>
				</documentation>
				<WHEN eventType="StartOfMonth"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ h.getFirm() != 100 && Global.wouldBeJobSeeker() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="jobSeeker" value="true"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="AtWeeklyIndividualConsumption_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 3 -->On a weekly basis, sampling prices at the (regional) mall the consumer decides which goods to buy.</description>
				</documentation>
				<WHEN eventType="AtWeeklyIndividualConsumption"/>
				<FOR-ObjectVariable variable="m" objectType="Mall"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ m.getId() == h.getRegion() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<Call procedure="consumptionDecision" contextObjectVariable="h">
							<Argument parameter="productsCollection">
								<ValueExpr language="Java"><![CDATA[ m.getProductsInStock() ]]></ValueExpr>
							</Argument>
						</Call>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="TellSalesRevenue">
							<Condition language="Java"><![CDATA[ h.getSelectFirstProductId() != 0 ]]></Condition>
							<SenderIdRef language="Java"><![CDATA[ m.getId() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ h.getSelectFirstProductId() ]]></ReceiverIdRef>
							<Slot property="revenue">
								<ValueExpr language="Java"><![CDATA[ h.getSpendBudgetForFirstProduct() ]]></ValueExpr>
							</Slot>
							<Slot property="quantity">
								<ValueExpr language="Java"><![CDATA[ h.getPurchaseQuantityForFirstProduct() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
						<InMessageEventExpr messageType="TellSalesRevenue">
							<Condition language="Java"><![CDATA[ h.getSelectSecondProductId() != 0 ]]></Condition>
							<SenderIdRef language="Java"><![CDATA[ m.getId() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ h.getSelectSecondProductId() ]]></ReceiverIdRef>
							<Slot property="revenue">
								<ValueExpr language="Java"><![CDATA[ h.getSpendBudgetForSecondProduct() ]]></ValueExpr>
							</Slot>
							<Slot property="quantity">
								<ValueExpr language="Java"><![CDATA[ h.getPurchaseQuantityForSecondProduct() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmBuyNewInvestment_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 5 -->A CGP purchases the needed investments from the (unique) capital goods producer thereby improving the quality of its capital stock. The quality of the capital stock of a CGP is updated as old capital is replaced by new investments.</description>
				</documentation>
				<WHEN eventType="BuyNewInvestment" eventVariable="e"/>
				<FOR objectVariable="i" objectType="IGFirm" objectIdRef="11"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="i">
							<Slot property="investmentSalesRevenue">
								<ValueExpr language="Java"><![CDATA[ i.getInvestmentSalesRevenue() + f.getNewInvestment() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
						<UpdateObject objectVariable="f">
							<Slot property="grossInvestment">
								<ValueExpr language="Java"><![CDATA[ f.getGrossInvestment() + f.getNewInvestment() ]]></ValueExpr>
							</Slot>
							<Slot property="physicalCapitalStock">
								<ValueExpr language="Java"><![CDATA[ f.getPhysicalCapitalStock() + f.getNewInvestment() / Global.getInvestmentSalesPrice() ]]></ValueExpr>
							</Slot>
							<Slot property="totalQualityOfCapitalStock">
								<ValueExpr language="Java"><![CDATA[ f.getTotalQualityOfCapitalStock() + f.getNewInvestment() / Global.getInvestmentSalesPrice() * Global.getQualityOfInvestment() ]]></ValueExpr>
							</Slot>
							<Slot property="averageQualityOfCapitalStock">
								<ValueExpr language="Java"><![CDATA[ f.getTotalQualityOfCapitalStock() / f.getPhysicalCapitalStock() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmDismissWorker_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 5 -->The CGP dismisses workers.</description>
				</documentation>
				<WHEN eventType="DismissWorker" eventVariable="e"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<FOR-ListItemVariable variable="w" listItemType="WorkerInFirm">
					<ListExpr language="Java"><![CDATA[ f.getDismissalsList() ]]></ListExpr>
				</FOR-ListItemVariable>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="f">
							<Slot property="laborSupplyQuantity">
								<ValueExpr language="Java"><![CDATA[ f.getLaborSupplyQuantity() + 1 ]]></ValueExpr>
							</Slot>
						</UpdateObject>
						<Call procedure="deleteWorkerRecordFromList" contextObjectVariable="f">
							<Argument parameter="householdId">
								<ValueExpr language="Java"><![CDATA[ w.getHouseholdId() ]]></ValueExpr>
							</Argument>
						</Call>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="TellDismissal">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ w.getHouseholdId() ]]></ReceiverIdRef>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmPostVacancyInformation_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 7, 16 -->The CGPs post vacancies including wage offers.</description>
				</documentation>
				<WHEN eventType="PostVacancyInformation" eventVariable="e"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ e.getFirmId() != h.getFirm() && e.getWageOffer() >= h.getCurrentWage() && h.isJobSeeker() ]]></IF>
				<THEN>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="TellVacancy">
							<SenderIdRef language="Java"><![CDATA[ h.getId() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></ReceiverIdRef>
							<Slot property="generalSkillLevel">
								<ValueExpr language="Java"><![CDATA[ h.getGeneralSkillLevel() ]]></ValueExpr>
							</Slot>
							<Slot property="specificSkillLevel">
								<ValueExpr language="Java"><![CDATA[ h.getSpecificSkillLevel() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="InFirstIterationFirmOfferJob_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 10, 19 -->CGPs send job offers to as many applicants as they have vacancies to fill.</description>
				</documentation>
				<WHEN eventType="InFirstIterationOfferJob" eventVariable="e"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<FOR-ListItemVariable variable="a" listItemType="JobApplicationRecord">
					<ListExpr language="Java"><![CDATA[ f.getJobApplications() ]]></ListExpr>
				</FOR-ListItemVariable>
				<DO>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="JobOffer">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ a.getHouseholdId() ]]></ReceiverIdRef>
							<Slot property="wageOffer">
								<ValueExpr language="Java"><![CDATA[ f.getWageOffer() ]]></ValueExpr>
							</Slot>
							<Slot property="region">
								<ValueExpr language="Java"><![CDATA[ f.getRegion() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndFirstIterationFirmClearJobApplications_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 14 -->After an iteration CGPs clear the list of applicants.</description>
				</documentation>
				<WHEN eventType="EndFirstIterationLaborSupply"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<IF language="Java"><![CDATA[ f.getJobApplications().size() > 0 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<Call procedure="clearJobApplications" contextObjectVariable="f"/>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndFirstIterationFirmRaiseWageOffer_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 14 -->If the number of vacancies after first iteration not filled exceeds some threshold, the CGP raises the wage offer.</description>
				</documentation>
				<WHEN eventType="EndFirstIterationLaborSupply"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<IF language="Java"><![CDATA[ f.getLaborSupplyQuantity() > 2 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="f">
							<Slot property="wageOffer">
								<ValueExpr language="Java"><![CDATA[ (1 + 0.02) * f.getWageOffer() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndFirstIterationJobSeekerReduceReservationWage_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 14 -->If an unemployed job seeker after first iteration did not find a job he reduces his reservation wage, there exists a lower bound to the reservation wage (1.0).</description>
				</documentation>
				<WHEN eventType="EndFirstIterationLaborSupply"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ h.getFirm() == 100 && (1 - 0.02) * h.getCurrentWage() >= 1.0 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="currentWage">
								<ValueExpr language="Java"><![CDATA[ (1 - 0.02) * h.getCurrentWage() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndSecondIterationFirmClearJobApplications_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 23 -->After an iteration CGPs clear the list of applicants.</description>
				</documentation>
				<WHEN eventType="EndSecondIterationLaborSupply"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<IF language="Java"><![CDATA[ f.getJobApplications().size() > 0 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<Call procedure="clearJobApplications" contextObjectVariable="f"/>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmDistributeProduct_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 24 -->The produced quantities are delivered by the CGP to the malls it serves.</description>
				</documentation>
				<WHEN eventType="DistributeProduct" eventVariable="e"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<FOR-ListItemVariable variable="o" listItemType="InventoryPosition">
					<ListExpr language="Java"><![CDATA[ f.getInventoryPositions() ]]></ListExpr>
				</FOR-ListItemVariable>
				<IF language="Java"><![CDATA[ o.getMallId() == 1 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateGlobalVariable name="producedQuantityLowSkillRegion">
							<ValueExpr language="Java"><![CDATA[ Global.getProducedQuantityLowSkillRegion() + o.getAdjustmentFactor() * f.getProducedQuantity() ]]></ValueExpr>
						</UpdateGlobalVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="DeliverProduct">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ o.getMallId() ]]></ReceiverIdRef>
							<Slot property="quantity">
								<ValueExpr language="Java"><![CDATA[ o.getAdjustmentFactor() * f.getProducedQuantity() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</THEN>
				<ELSE>
					<UPDATE-ENV>
						<UpdateGlobalVariable name="producedQuantityHighSkillRegion">
							<ValueExpr language="Java"><![CDATA[ Global.getProducedQuantityHighSkillRegion() + o.getAdjustmentFactor() * f.getProducedQuantity() ]]></ValueExpr>
						</UpdateGlobalVariable>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="DeliverProduct">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ o.getMallId() ]]></ReceiverIdRef>
							<Slot property="quantity">
								<ValueExpr language="Java"><![CDATA[ o.getAdjustmentFactor() * f.getProducedQuantity() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</ELSE>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmPayWage_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 24 -->Wages for the full month are paid to all workers.</description>
				</documentation>
				<WHEN eventType="PayWage" eventVariable="e"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<FOR-ListItemVariable variable="w" listItemType="WorkerInFirm">
					<ListExpr language="Java"><![CDATA[ f.getWorkersInFirm() ]]></ListExpr>
				</FOR-ListItemVariable>
				<DO>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="TellWage">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ w.getHouseholdId() ]]></ReceiverIdRef>
							<Slot property="wage">
								<ValueExpr language="Java"><![CDATA[ w.getWage() ]]></ValueExpr>
							</Slot>
							<Slot property="region">
								<ValueExpr language="Java"><![CDATA[ f.getRegion() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmIncreaseSpecificSkillLevel_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 24 -->The specific skill levels of workers are updated.</description>
				</documentation>
				<WHEN eventType="IncreaseSpecificSkillLevel" eventVariable="e"/>
				<FOR objectVariable="f" objectType="Firm">
					<ObjectRef language="Java"><![CDATA[ e.getActor() ]]></ObjectRef>
				</FOR>
				<FOR-ListItemVariable variable="w" listItemType="WorkerInFirm">
					<ListExpr language="Java"><![CDATA[ f.getWorkersInFirm() ]]></ListExpr>
				</FOR-ListItemVariable>
				<DO>
					<UPDATE-ENV>
						<Call procedure="updateSpecificSkillLevel" contextObjectVariable="f">
							<Argument parameter="householdId">
								<ValueExpr language="Java"><![CDATA[ w.getHouseholdId() ]]></ValueExpr>
							</Argument>
							<Argument parameter="specificSkillLevel">
								<ValueExpr language="Java"><![CDATA[ w.getSpecificSkillLevel() + (1 - Math.pow((0.5), (1 / (20 + 0.25 * (w.getGeneralSkillLevel() - 1) * (4 - 20))))) * (f.getAverageQualityOfCapitalStock() - w.getSpecificSkillLevel()) ]]></ValueExpr>
							</Argument>
						</Call>
					</UPDATE-ENV>
					<SCHEDULE-EVT>
						<InMessageEventExpr messageType="TellSpecificSkillLevel">
							<SenderIdRef language="Java"><![CDATA[ e.getActorIdRef() ]]></SenderIdRef>
							<ReceiverIdRef language="Java"><![CDATA[ w.getHouseholdId() ]]></ReceiverIdRef>
							<Slot property="specificSkillLevel">
								<ValueExpr language="Java"><![CDATA[ w.getSpecificSkillLevel() ]]></ValueExpr>
							</Slot>
						</InMessageEventExpr>
					</SCHEDULE-EVT>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndOfMonth_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->Every month the quality and the price of the investment good are increased.</description>
				</documentation>
				<WHEN eventType="EndOfMonth"/>
				<DO>
					<UPDATE-ENV>
						<IncrementGlobalVariable name="period" value="1"/>
						<UpdateGlobalVariable name="innovationProbability">
							<ValueExpr language="Java"><![CDATA[ Global.wouldInnovate() ]]></ValueExpr>
						</UpdateGlobalVariable>
						<UpdateGlobalVariable name="qualityOfInvestment">
							<ValueExpr language="Java"><![CDATA[ (1 + Global.getInnovationProbability()) * Global.getQualityOfInvestment() ]]></ValueExpr>
						</UpdateGlobalVariable>
						<UpdateGlobalVariable name="investmentSalesPrice">
							<ValueExpr language="Java"><![CDATA[ (1 + Global.getInnovationProbability()) * Global.getInvestmentSalesPrice() ]]></ValueExpr>
						</UpdateGlobalVariable>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="EndOfMonthStatistics_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->Make statistics.</description>
				</documentation>
				<WHEN eventType="EndOfMonth"/>
				<DO>
					<UPDATE-ENV>
						<UpdateStatisticsVariable variable="outputLowSkillRegion">
							<ValueExpr language="Java"><![CDATA[ Global.getProducedQuantityLowSkillRegion() ]]></ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="outputHighSkillRegion">
							<ValueExpr language="Java"><![CDATA[ Global.getProducedQuantityHighSkillRegion() ]]></ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateStatisticsVariable variable="totalOutput">
							<ValueExpr language="Java"><![CDATA[ Global.getProducedQuantityLowSkillRegion() + Global.getProducedQuantityHighSkillRegion() ]]></ValueExpr>
						</UpdateStatisticsVariable>
						<UpdateGlobalVariable name="producedQuantityLowSkillRegion" value="0.0"/>
						<UpdateGlobalVariable name="producedQuantityHighSkillRegion" value="0.0"/>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="AtEndOfMonthFirmClearInventoryPositions_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->CGPs clear the list of inventory positions.</description>
				</documentation>
				<WHEN eventType="EndOfMonth"/>
				<FOR-ObjectVariable variable="f" objectType="Firm"/>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="f">
							<Slot property="grossInvestment">
								<ValueExpr language="Java"><![CDATA[ (1 - 0.01) * f.getGrossInvestment() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
						<Call procedure="updateOptimalStockLevel" contextObjectVariable="f"/>
						<Call procedure="clearInventoryPositions" contextObjectVariable="f"/>
						<Call procedure="updateLastFourProducedQuantities" contextObjectVariable="f"/>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="AtEndOfMonthPayWage_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->The unemployed workers get the unemployment benefits.</description>
				</documentation>
				<WHEN eventType="EndOfMonth"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ h.getFirm() == 100 ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="currentIncome">
								<ValueExpr language="Java"><![CDATA[ h.getCurrentIncome() + 1.0 ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="AtEndOfMonthDetermineEmployedWorkerNotAsJobSeeker_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->Reset the value of "jobSeeker" of a job seeker, who actually has a job.</description>
				</documentation>
				<WHEN eventType="EndOfMonth"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<IF language="Java"><![CDATA[ h.getFirm() != 100 && h.isJobSeeker() ]]></IF>
				<THEN>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="jobSeeker" value="false"/>
						</UpdateObject>
					</UPDATE-ENV>
				</THEN>
			</EnvironmentRule>
			
			<EnvironmentRule name="IGFirmPayEqualShare_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->All households hold equal shares in capital goods producer.</description>
				</documentation>
				<WHEN eventType="PayEqualShare" eventVariable="e"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="currentIncome">
								<ValueExpr language="Java"><![CDATA[ h.getCurrentIncome() + e.getShare() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmPayDividend_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->The CGP pays dividends to all households.</description>
				</documentation>
				<WHEN eventType="PayDividend" eventVariable="e"/>
				<FOR-ObjectVariable variable="h" objectType="Household"/>
				<DO>
					<UPDATE-ENV>
						<UpdateObject objectVariable="h">
							<Slot property="currentIncome">
								<ValueExpr language="Java"><![CDATA[ h.getCurrentIncome() + e.getDividend() ]]></ValueExpr>
							</Slot>
						</UpdateObject>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
			
			<EnvironmentRule name="FirmSetNewPrice_Rule">
				<documentation>
					<description xml:lang="en"><!-- at step 25 -->Once the CGP determines to update the price for all regions where it offers its goods, the new price is sent to the regional malls and posted there for the following month.</description>
				</documentation>
				<WHEN eventType="SetNewPrice" eventVariable="e"/>
				<FOR-ObjectVariable variable="m" objectType="Mall"/>
				<DO>
					<UPDATE-ENV>
						<Call procedure="updatePrice" contextObjectVariable="m">
							<Argument parameter="firmId">
								<ValueExpr language="Java"><![CDATA[ e.getActorIdRef() ]]></ValueExpr>
							</Argument>
							<Argument parameter="price">
								<ValueExpr language="Java"><![CDATA[ e.getPrice() ]]></ValueExpr>
							</Argument>
						</Call>
					</UPDATE-ENV>
				</DO>
			</EnvironmentRule>
		</EnvironmentRules>
	</SimulationModel>
	
	<InitialState>
		<Agent type="IGFirm" id="11">
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<Slot property="investmentSalesRevenue" value="0.0"/>
			<Slot property="equalShare" value="0.0"/>
			
			<PeriodicTimeEvent type="CalculateEqualShare" occurrenceTime="24"/>
		</Agent>
		
		<Agents type="Mall" rangeStartID="1" rangeEndID="2">
			<Slot property="productsInStock">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.ProductInStock>() ]]></ValueExpr>
			</Slot>
			
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<PeriodicTimeEvent type="AtStartOfMonthCheckStockLevel" occurrenceTime="2"/>
		</Agents>
		
		<Agents type="Firm" rangeStartID="101" rangeEndID="105">
			<Slot property="productDemands">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.ProductDemandRecord>() ]]></ValueExpr>
			</Slot>
			<Slot property="inventoryPositions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.InventoryPosition>() ]]></ValueExpr>
			</Slot>
			<Slot property="workersInFirm">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.WorkerInFirm>() ]]></ValueExpr>
			</Slot>
			<Slot property="dismissalsList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.WorkerInFirm>() ]]></ValueExpr>
			</Slot>
			<Slot property="jobApplications">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.JobApplicationRecord>() ]]></ValueExpr>
			</Slot>
			<Slot property="lastFourProducedQuantities">
				<ValueExpr language="Java"><![CDATA[
					new ArrayList<Double>() {
						{
							add(new Double(16.0));
							add(new Double(16.0));
							add(new Double(16.0));
							add(new Double(16.0));
						}
					}
					]]></ValueExpr>
			</Slot>
			
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<Slot property="region" value="1"/>
			<Slot property="productSalesPrice" value="2.25"/>
			<Slot property="productSalesRevenue" value="0.0"/>
			<Slot property="productSalesQuantity" value="0.0"/>
			<Slot property="grossInvestment" value="10.0"/>
			<Slot property="physicalCapitalStock" value="10.0"/>
			<Slot property="newInvestment" value="0.0"/>
			<Slot property="totalQualityOfCapitalStock" value="10.0"/>
			<Slot property="averageQualityOfCapitalStock" value="1.0"/>
			<Slot property="producedQuantity" value="0.0"/>
			<Slot property="costOfProduction" value="0.0"/>
			<Slot property="unitCostOfProduction" value="1.0"/>
			<Slot property="monthlyRealizedProfit" value="0.0"/>
			<Slot property="currentBalanceOfSavingAccount" value="0.0"/>
			<Slot property="equalDividend" value="0.0"/>
			<Slot property="optimalStockLevel" value="20.0"/><!--abstract definition-->
			<Slot property="laborSupplyQuantity" value="0"/>
			<Slot property="wageOffer" value="1.0"/>
			
			<PeriodicTimeEvent type="MakeProductionPlan" occurrenceTime="4"/>
			<PeriodicTimeEvent type="InFirstIterationRankApplicant" occurrenceTime="9"/>
			<PeriodicTimeEvent type="StartSecondIterationLaborSupply" occurrenceTime="15"/>
			<PeriodicTimeEvent type="InSecondIterationRankApplicant" occurrenceTime="18"/>
			<PeriodicTimeEvent type="StartOfProduction" occurrenceTime="23"/>
			<PeriodicTimeEvent type="CalculateDividend" occurrenceTime="24"/>
		</Agents>
		
		<Agents type="Firm" rangeStartID="106" rangeEndID="110">
			<Slot property="productDemands">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.ProductDemandRecord>() ]]></ValueExpr>
			</Slot>
			<Slot property="inventoryPositions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.InventoryPosition>() ]]></ValueExpr>
			</Slot>
			<Slot property="workersInFirm">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.WorkerInFirm>() ]]></ValueExpr>
			</Slot>
			<Slot property="dismissalsList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.WorkerInFirm>() ]]></ValueExpr>
			</Slot>
			<Slot property="jobApplications">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.JobApplicationRecord>() ]]></ValueExpr>
			</Slot>
			<Slot property="lastFourProducedQuantities">
				<ValueExpr language="Java"><![CDATA[
					new ArrayList<Double>() {
						{
							add(new Double(16.0));
							add(new Double(16.0));
							add(new Double(16.0));
							add(new Double(16.0));
						}
					}
					]]></ValueExpr>
			</Slot>
			
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<Slot property="region" value="2"/>
			<Slot property="productSalesPrice" value="2.25"/>
			<Slot property="productSalesRevenue" value="0.0"/>
			<Slot property="productSalesQuantity" value="0.0"/>
			<Slot property="grossInvestment" value="10.0"/>
			<Slot property="physicalCapitalStock" value="10.0"/>
			<Slot property="newInvestment" value="0.0"/>
			<Slot property="totalQualityOfCapitalStock" value="10.0"/>
			<Slot property="averageQualityOfCapitalStock" value="1.0"/>
			<Slot property="producedQuantity" value="0.0"/>
			<Slot property="costOfProduction" value="0.0"/>
			<Slot property="unitCostOfProduction" value="1.0"/>
			<Slot property="monthlyRealizedProfit" value="0.0"/>
			<Slot property="currentBalanceOfSavingAccount" value="0.0"/>
			<Slot property="equalDividend" value="0.0"/>
			<Slot property="optimalStockLevel" value="20.0"/><!--abstract definition-->
			<Slot property="laborSupplyQuantity" value="0"/>
			<Slot property="wageOffer" value="1.0"/>
			
			<PeriodicTimeEvent type="MakeProductionPlan" occurrenceTime="4"/>
			<PeriodicTimeEvent type="InFirstIterationRankApplicant" occurrenceTime="9"/>
			<PeriodicTimeEvent type="StartSecondIterationLaborSupply" occurrenceTime="15"/>
			<PeriodicTimeEvent type="InSecondIterationRankApplicant" occurrenceTime="18"/>
			<PeriodicTimeEvent type="StartOfProduction" occurrenceTime="23"/>
			<PeriodicTimeEvent type="CalculateDividend" occurrenceTime="24"/>
		</Agents>
		
		<Agents type="Household" rangeStartID="1001" rangeEndID="1200">
			<Slot property="availableProducts">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.ProductListItem>() ]]></ValueExpr>
			</Slot>
			<Slot property="jobOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.JobOfferRecord>() ]]></ValueExpr>
			</Slot>
			
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<Slot property="region" value="1"/>
			<Slot property="firm">
				<RandomVariable>
					<UniformInt lowerBound="100" upperBound="110"/>
				</RandomVariable>
			</Slot>
			<Slot property="lastFirm" value="0"/>
			<Slot property="jobSeeker" value="false"/>
			<Slot property="generalSkillLevel">
				<ValueExpr language="Java"><![CDATA[ Global.lowSkillRegion() ]]></ValueExpr>
			</Slot>
			<Slot property="specificSkillLevel" value="1.0"/>
			<Slot property="currentWage" value="1.0"/>
			<Slot property="totalIncome" value="0.0"/>
			<Slot property="meanIncome" value="0.0"/>
			<Slot property="currentIncome" value="1.0"/>
			<Slot property="savingAccount" value="0.0"/>
			<Slot property="cashOnHand" value="0.0"/>
			<Slot property="consumptionBudget" value="0.0"/>
			<Slot property="weekConsumptionBudget" value="0.0"/>
			<Slot property="remainingConsumptionBudget" value="0.0"/>
			<Slot property="selectFirstProductId" value="0"/>
			<Slot property="selectSecondProductId" value="0"/>
			<Slot property="spendBudgetForFirstProduct" value="0.0"/>
			<Slot property="spendBudgetForSecondProduct" value="0.0"/>
			<Slot property="purchaseQuantityForFirstProduct" value="0.0"/>
			<Slot property="purchaseQuantityForSecondProduct" value="0.0"/>
			
			<PeriodicTimeEvent type="AtStartOfMonthDetermineConsumptionBudget" occurrenceTime="2"/>
			<PeriodicTimeEvent type="InFirstIterationAcceptJob" occurrenceTime="12"/>
			<PeriodicTimeEvent type="InSecondIterationAcceptJob" occurrenceTime="21"/>
		</Agents>
		
		<Agents type="Household" rangeStartID="1201" rangeEndID="1400">
			<Slot property="availableProducts">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.ProductListItem>() ]]></ValueExpr>
			</Slot>
			<Slot property="jobOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.JobOfferRecord>() ]]></ValueExpr>
			</Slot>
			
			<Slot property="test" value="0.0"/><!--!!!test!!!-->
			
			<Slot property="region" value="2"/>
			<Slot property="firm">
				<RandomVariable>
					<UniformInt lowerBound="100" upperBound="110"/>
				</RandomVariable>
			</Slot>
			<Slot property="lastFirm" value="0"/>
			<Slot property="jobSeeker" value="false"/>
			<Slot property="generalSkillLevel">
				<ValueExpr language="Java"><![CDATA[ Global.highSkillRegion() ]]></ValueExpr>
			</Slot>
			<Slot property="specificSkillLevel" value="1.0"/>
			<Slot property="currentWage" value="1.0"/>
			<Slot property="totalIncome" value="0.0"/>
			<Slot property="meanIncome" value="0.0"/>
			<Slot property="currentIncome" value="1.0"/>
			<Slot property="savingAccount" value="0.0"/>
			<Slot property="cashOnHand" value="0.0"/>
			<Slot property="consumptionBudget" value="0.0"/>
			<Slot property="weekConsumptionBudget" value="0.0"/>
			<Slot property="remainingConsumptionBudget" value="0.0"/>
			<Slot property="selectFirstProductId" value="0"/>
			<Slot property="selectSecondProductId" value="0"/>
			<Slot property="spendBudgetForFirstProduct" value="0.0"/>
			<Slot property="spendBudgetForSecondProduct" value="0.0"/>
			<Slot property="purchaseQuantityForFirstProduct" value="0.0"/>
			<Slot property="purchaseQuantityForSecondProduct" value="0.0"/>
			
			<PeriodicTimeEvent type="AtStartOfMonthDetermineConsumptionBudget" occurrenceTime="2"/>
			<PeriodicTimeEvent type="InFirstIterationAcceptJob" occurrenceTime="12"/>
			<PeriodicTimeEvent type="InSecondIterationAcceptJob" occurrenceTime="21"/>
		</Agents>
		
		<GlobalVariable name="period" value="1"/>
		<GlobalVariable name="comm" value="0.2"/>
		<GlobalVariable name="investmentSalesPrice" value="1.0"/>
		<GlobalVariable name="qualityOfInvestment" value="1.0"/>
		<GlobalVariable name="innovationProbability" value="0.0"/>
		
		<GlobalVariable name="producedQuantityLowSkillRegion" value="0.0"/><!--abstract definition-->
		<GlobalVariable name="producedQuantityHighSkillRegion" value="0.0"/><!--abstract definition-->
		
		<ExogenousEvent type="Init" occurrenceTime="1"/>
		<ExogenousEvent type="StartOfMonth" occurrenceTime="2"/>
		<ExogenousEvent type="AtWeeklyIndividualConsumption" occurrenceTime="3"/>
		<ExogenousEvent type="EndFirstIterationLaborSupply" occurrenceTime="14"/>
		<ExogenousEvent type="EndSecondIterationLaborSupply" occurrenceTime="23"/>
		<ExogenousEvent type="EndOfMonth" occurrenceTime="25"/>
	</InitialState>
	
	<UserInterface supportedLanguages="en">
		<StatisticsUI>
			<StatisticsVariableUI variable="outputLowSkillRegion">
				<Label>
					<Text xml:lang="en">Output in low skill region</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Production output per month of all consumption good producers in low skill region</Text>
				</Hint>
			</StatisticsVariableUI>
			
			<StatisticsVariableUI variable="outputHighSkillRegion">
				<Label>
					<Text xml:lang="en">Output in high skill region</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Production output per month of all consumption good producers in high skill region</Text>
				</Hint>
			</StatisticsVariableUI>
			
			<StatisticsVariableUI variable="totalOutput">
				<Label>
					<Text xml:lang="en">Total output</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Total production output per month of all consumption good producers</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>
	</UserInterface>
</SimulationScenario>