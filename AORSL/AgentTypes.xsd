<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="ERSL/refman/refman.xsl"?>
<xs:schema xmlns:ers="http://aor-simulation.org" xmlns:aors="http://aor-simulation.org" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://aor-simulation.org" elementFormDefault="qualified" attributeFormDefault="unqualified">
  <!-- =================================================================== -->
  <xs:include schemaLocation="ERSL/EntityTypes.xsd"/>
  <xs:include schemaLocation="AgentRules.xsd"/>
  <!-- =================================================================== -->
  <!-- *** AgentType *** -->
  <!-- =================================================================== -->
  <xs:element name="AgentType" type="aors:AgentType.type" substitutionGroup="ers:ObjectType">
  	<xs:key name="AgentType-PropertyKey">
  		<xs:selector xpath="ers:Attribute | ers:ReferenceProperty | ers:EnumerationProperty | ers:ComplexDataProperty"/>
  		<xs:field xpath="@name"/>
  	</xs:key>		
  </xs:element>
  <xs:complexType name="AgentType.type">
    <xs:complexContent>
      <xs:extension base="ers:ObjectType.type">
        <xs:sequence>
          <xs:group ref="aors:AgentType.elements"/>
        	<xs:element ref="aors:ReactionRule" minOccurs="0" maxOccurs="unbounded">
        		<xs:annotation><xs:documentation>For definiing a reactive behavior in response to an event of a certain type. </xs:documentation></xs:annotation>
        	</xs:element>
        	<xs:element ref="aors:ActionRule" minOccurs="0" maxOccurs="unbounded">
        		<xs:annotation><xs:documentation>For definiing a potentially pro-active behavior, 
        			which can also be triggered by a user action in the agent control user interface. </xs:documentation></xs:annotation>
        	</xs:element>          
        </xs:sequence>
        <xs:attributeGroup ref="aors:AgentType.attributes"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:attributeGroup name="AgentType.attributes">
    <xs:attribute name="memorySize" type="xs:integer" use="optional" default="0"/>
  	<xs:attribute name="beliefRepresentationStyle" use="optional" default="FIXED_VOCABULARY">
  		<xs:annotation><xs:documentation>NOT YET IMPLEMENTED!</xs:documentation></xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="FIXED_VOCABULARY">
          	<xs:annotation><xs:documentation>Beliefs are expressed with a fixed vocabulary defined at design time.</xs:documentation></xs:annotation>
          </xs:enumeration>
        	<xs:enumeration value="OPEN_VOCABULARY">
        		<xs:annotation><xs:documentation>Beliefs can be expressed with arbitrary names (so the vocabulary is open).</xs:documentation></xs:annotation>
        	</xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:group name="AgentType.elements">
    <xs:sequence>
      <xs:element ref="aors:SelfBeliefProperty" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="aors:BeliefEntityType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="SubjectiveFunction" type="ers:Function.type" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="aors:TimeEventType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:group>
  <!-- =================================================================== -->
  <!-- *** PhysicalAgentType *** -->
  <!-- =================================================================== -->
  <xs:element name="PhysicalAgentType" type="aors:PhysicalAgentType.type" substitutionGroup="ers:PhysicalObjectType">
    <xs:unique name="UniqueActionRule">
      <xs:selector xpath="aors:ActionRule"/>
      <xs:field xpath="@name"/>
    </xs:unique>
    <xs:key name="PhysicalAgentType-PropertyKey">
      <xs:selector xpath="aors:Attribute | aors:ReferenceProperty"/>
      <xs:field xpath="@name"/>
    </xs:key>
    <xs:key name="ActualPerceptionEventTypeKey">
      <xs:selector xpath="aors:ActualPerceptionEventType"/>
      <xs:field xpath="@name"/>
    </xs:key>
    <xs:keyref name="ActualPerceptionEventTypeReference" refer="aors:ActualPerceptionEventTypeKey">
      <xs:selector xpath="aors:ActualPerceptionRule/aors:CREATE-EVT"/>
      <xs:field xpath="@actualPercEvtType"/>
    </xs:keyref>
    <!--xs:keyref name="MessageTypeReference" refer="aors:ActualPerceptionEventTypeKey">
      <xs:selector xpath="aors:ActualPerceptionRule/aors:CREATE-EVT"/>
      <xs:field xpath="@messageType"/>
    </xs:keyref-->
  </xs:element>
  <xs:complexType name="PhysicalAgentType.type">
    <xs:complexContent>
      <xs:extension base="ers:PhysicalObjectType.type">
        <xs:sequence>
          <xs:group ref="aors:AgentType.elements"/>
          <xs:element ref="aors:ActualPerceptionEventType" minOccurs="0" maxOccurs="unbounded">
          	<xs:annotation><xs:documentation>Only relevant for modeling cognitive agents and their perception capabilities. For such agents, the actual perception event may depart from the potential perception event due to imperfect perception capabilities. This kind of distortion of a potential perception event of type ET can be modeled by defining a corresponding actual perception event type ET' with possibly different properties, and then mapping any potential perception event of type ET to a corresponding actual perception event of type ET' with the help of an actual perceptio rule. </xs:documentation></xs:annotation>
          </xs:element>
          <xs:element ref="aors:ActualPerceptionRule" minOccurs="0" maxOccurs="unbounded">
          	<xs:annotation><xs:documentation>Only relevant for modeling cognitive agents and their perception capabilities. For such agents, the actual perception event may depart from the potential perception event due to imperfect perception capabilities. This kind of distortion of a potential perception event of type ET can be modeled by defining a corresponding actual perception event type ET' with possibly different properties, and then mapping any potential perception event of type ET to a corresponding actual perception event of type ET' with the help of an actual perceptio rule. </xs:documentation></xs:annotation>
          </xs:element>
          <xs:element ref="aors:ReactionRule" minOccurs="0" maxOccurs="unbounded">
          	<xs:annotation><xs:documentation>For definiing a reactive behavior in response to an event of a certain type. </xs:documentation></xs:annotation>
          </xs:element>
          <xs:element ref="aors:ActionRule" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="autoPerception" type="xs:boolean" use="optional" default="false"/>
        <xs:attributeGroup ref="aors:AgentType.attributes"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- =================================================================== -->
  <!-- *** SelfBeliefProperty *** -->
  <!-- =================================================================== -->
  <xs:element name="SelfBeliefProperty" type="ers:Property.type" abstract="true"/>
  <xs:element name="SelfBeliefAttribute" type="ers:Attribute.type" substitutionGroup="aors:SelfBeliefProperty"/>
  <xs:element name="SelfBeliefReferenceProperty" type="ers:ReferenceProperty.type" substitutionGroup="aors:SelfBeliefProperty"/>
  <!-- =================================================================== -->
  <!-- *** SubjectiveFunction *** -->
  <!-- =================================================================== -->
  <xs:element name="SubjectiveFunction" type="ers:Function.type"/>
  <!-- =================================================================== -->
  <!-- *** BeliefEntityType *** -->
  <!-- =================================================================== -->
  <xs:element name="BeliefEntityType" type="aors:BeliefEntityType.type"/>
  <xs:complexType name="BeliefEntityType.type">
    <xs:sequence>
      <xs:element ref="aors:BeliefProperty" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" type="ers:CanonicalName" use="required"/>
    <xs:attribute name="superType" type="ers:CanonicalName" use="optional"/>
  </xs:complexType>
  <!-- =================================================================== -->
  <!-- *** BeliefProperty ** -->
  <!-- =================================================================== -->
  <xs:element name="BeliefProperty" type="ers:Property.type" abstract="true"/>
  <xs:element name="BeliefAttribute" type="ers:Attribute.type" substitutionGroup="aors:BeliefProperty"/>
  <xs:element name="BeliefReferenceProperty" type="ers:ReferenceProperty.type" substitutionGroup="aors:BeliefProperty"/>
  <!-- =================================================================== -->
  <!-- *** MessageType *** -->
  <!-- =================================================================== -->
  <xs:element name="MessageType" type="aors:MessageType.type" substitutionGroup="ers:EntityType">
    <xs:key name="MessageType-PropertyKey">
      <xs:selector xpath="aors:Attribute | aors:ReferenceProperty"/>
      <xs:field xpath="@name"/>
    </xs:key>
  </xs:element>
  <xs:complexType name="MessageType.type">
    <xs:complexContent>
      <xs:extension base="ers:EntityType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- =================================================================== -->
  <!-- *** Environment Event Types *** -->
  <!-- =================================================================== -->
  <!-- *** PerceptionEventType *** -->
  <xs:element name="PerceptionEventType" type="aors:PerceptionEventType.type" substitutionGroup="ers:CausedEventType">
    <xs:key name="PerceptionEventType-PropertyKey">
      <xs:selector xpath="aors:Attribute | aors:ReferenceProperty"/>
      <xs:field xpath="@name"/>
    </xs:key>
  </xs:element>
  <xs:complexType name="PerceptionEventType.type">
    <xs:complexContent>
      <xs:extension base="ers:CausedEventType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- *** ActionEventType *** -->
  <xs:element name="ActionEventType" type="aors:ActionEventType.type" substitutionGroup="ers:EnvironmentEventType">
    <xs:key name="ActionEventType-PropertyKey">
      <xs:selector xpath="aors:Attribute | aors:ReferenceProperty"/>
      <xs:field xpath="@name"/>
    </xs:key>
  </xs:element>
  <xs:complexType name="ActionEventType.type">
    <xs:complexContent>
      <xs:extension base="ers:EnvironmentEventType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- =================================================================== -->
  <!-- *** Internal Event Types *** -->
  <!-- =================================================================== -->
  <xs:element name="InternalEventType" type="aors:InternalEventType.type" abstract="true" substitutionGroup="ers:EventType"/>
  <xs:complexType name="InternalEventType.type">
    <xs:complexContent>
      <xs:extension base="ers:EventType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- *** ActualPerceptionEventType *** -->
  <xs:element name="ActualPerceptionEventType" type="aors:ActualPerceptionEventType.type" substitutionGroup="aors:InternalEventType"/>
  <xs:complexType name="ActualPerceptionEventType.type">
    <xs:complexContent>
      <xs:extension base="aors:InternalEventType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- *** TimeEventType *** -->
  <xs:element name="TimeEventType" type="aors:TimeEventType.type" substitutionGroup="aors:InternalEventType"/>
  <xs:complexType name="TimeEventType.type">
    <xs:complexContent>
      <xs:extension base="aors:InternalEventType.type"/>
    </xs:complexContent>
  </xs:complexType>
  <!-- *** PeriodicTimeEventType *** -->
  <xs:element name="PeriodicTimeEventType" type="aors:PeriodicTimeEventType.type" substitutionGroup="aors:TimeEventType"/>
  <xs:complexType name="PeriodicTimeEventType.type">
    <xs:complexContent>
      <xs:extension base="aors:TimeEventType.type">
        <xs:sequence>
          <xs:element ref="ers:Periodicity" minOccurs="0"/>
          <xs:element ref="ers:StopCondition" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="periodicity" type="xs:positiveInteger" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
