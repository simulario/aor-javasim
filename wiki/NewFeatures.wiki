#summary New features of recent and future release versions of AORSL and AOR-JavaSim

= New Features in AORSL 0.8.1 =

  # The `SimulationScenario/@version` attribute is mandatory and fixed to the schema version.
  # There is now a shrinked schema ("ersl/ERSL-0-8-1.xsd") for basic discrete event simulation without agents ("ER Simulation")
  # The rule language has been improved by introducing the two new elements `EnvironmentRule/DO` and `EnvironmentRule/THEN`. The new `DO` element allows to trigger `UPDATE-ENV` and `SCHEDULE-EVT` blocks without checking any further condition. The new `THEN` element is just a new container (for `UPDATE-ENV` and `SCHEDULE-EVT` blocks) for getting a nice WHEN-FOR-DO-IF-THEN-ELSE rule structure.
  # There is now a new `UPDATE-ENV/UpdateGridCells` element for allowing update loops over the entire grid in cellular automata-style models.
  # A `DataTypes/ComplexDataType` element may now have a new `Def` subelement of type `OpaqueExpression` for allowing arbitrary class definitions that can serve as data types for a `ComplexDataProperty`.
  # There is now a new `UPDATE-AGT/UpdateComplexDataPropertyValue` element with `Argument` subelements  of type `OpaqueExpression` for allowing to call an update procedure of a `ComplexDataType` for updating the value of a `ComplexDataProperty`.

= New Features Planned for AORSL 0.8.2 =

  # Improved syntax for the `SpaceModel` element  
  # Improved syntax for statistics variables (allowing to assign them one of a possible number of sources)
  # Support statistics variables representing the size of the extension of an object type
  # Support statistics variables representing the utilization of a resource object (type)
  # Introduce a special subelement `ON-EACH-SIMULATION-STEP` of !EnvironmentRule, as an alternative to `WHEN`, for rules that are executed at each step.
  # Support continuous property value changes by introducing a new Property subelement (!ContinousChangeExpr) such that the value of such a property is re-computed at each simulation step according to this expression
  # Introduce further built-in physical object properties: 
    # the orientation (angular position) in terms of `rotationAngleX` ("roll"), `rotationAngleY` ("pitch") and `rotationAngleZ` ("yaw"), see also [http://en.wikipedia.org/wiki/Yaw,_pitch_and_roll Wikipedia article]
    # the angular velocity vector omega: `omegaX`, `omegaY`, `omegaZ`
    # the angular acceleration vector alpha: `alphaX`, `alphaY`, `alphaZ`
    # material type (determining _restitution_ and _friction_)
  # Suppport FOR loops over supertypes through code generation (e.g. if Animal is the supertype of Predator and Prey, a FOR loop over Animal will create two loops: one over Predator  and another one over Prey)

= New Features Planned for the Future =

  * Introduce composite/nested views
  * Introduce component types definable for any object type
  * Support the transportation of physical objects by physical agents by introducing the following:
    * a built-in action event type `LoadTransportObject` with a reference property `transportObject`
    * a built-in action event type `UnloadTransportObject` with a reference property `transportObject`
    * a new list-valued built-in attribute `transportObjects` such that these objects are moved along with the agent (possibly by injecting code for moving them into the setX/setY methods of the physical agent object)
  * Support a new pre-defined `isAvailableAsResource` attribute for objects, such that activities requiring a resource of that type may not use it, if it is not available (they may either allocate another resource of that type or wait for the availability of one)
  * Support a distinction between _base types_ and _role types_ (according to the Unified Foundational Ontology) such that an object/agent is always of a unique base type (e.g. `Person`), but may be an instance of several role types (e.g. `Lecturer` and `Researcher`)
  * Introduce a concept of _institutional agent_ (corresponding to 'group', 'organization', 'organizational unit', and bpmn:pool) for
    * aggregating a number of agents as _subagents_
    * defining _institutional roles_ that are assigned to its subagents
    * delegating the handling of events and the performance of activities to subagents

== AORSL Schema Features ==

  * It should be possible to select among a set of supported schemas
  * Provide an extended "AORSLX" schema in addition to the standard AORSL schema. This extended schema will, for instance, include certain predefined agent types such as `TrustfulAndSincereAgent`
  * Integrate the expression language AORSEL with the extended schema