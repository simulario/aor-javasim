<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-9.xsd"
 xmlns="http://aor-simulation.org"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:aors="http://aor-simulation.org"
 version="0.9"
 scenarioName="MinEcon_LaborFoodUtility_BL4scenario"
 simulationManagerDirectory="../../..">
    <SimulationParameters simulationSteps="3000" timeUnit="h" stepTimeDelay="0" randomSeed="47" />
    <SimulationModel modelName="MinEcon_LaborFoodUtility_BL4">
        <documentation>
            <dc:title>Minimal Economy with a Labor, Food and Utility Market</dc:title>
            <dc:subject>Agent-based computational economics</dc:subject>
            <dc:creator>Lars Langjahr</dc:creator>
            <dc:created>20101031</dc:created>
            <dc:contributor>Gerd Wagner</dc:contributor>
            <dc:contributor>Gabriel Diaconita</dc:contributor>
            <dc:modified>20101203</dc:modified>
        </documentation>
        <Statistics>
          <Variable name="PriceFood" dataType="Float">
              <Source>
                  <ObjectProperty property="lastMarketPrice" objectType="Mkarket" objectIdRef="2"/>
              </Source>
          </Variable>
          <Variable name="BuyOffersFood" dataType="Float">
              <Source>
                  <ObjectProperty property="Demand" objectType="Market" objectIdRef="2"/>
              </Source>
          </Variable>
          <Variable name="SellOffersFood" dataType="Float">
              <Source>
                  <ObjectProperty property="Supply" objectType="Market" objectIdRef="2"/>
              </Source>
          </Variable>     
          <Variable name="PriceUtility" dataType="Float">
              <Source>
                  <ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
              </Source>
          </Variable>
          <Variable name="BuyOffersUtility" dataType="Float">
              <Source>
                  <ObjectProperty property="Demand" objectType="Market" objectIdRef="4"/>
              </Source>
          </Variable>            
          <Variable name="SellOffersUtility" dataType="Float">
              <Source>
                  <ObjectProperty property="Supply" objectType="Market" objectIdRef="4"/>
              </Source>
          </Variable>
          <Variable name="PriceLabor" dataType="Float">
              <Source>
                  <ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
              </Source>
          </Variable>
          <Variable name="BuyOffersLabor" dataType="Float">
              <Source>
                  <ObjectProperty property="Demand" objectType="Market" objectIdRef="3"/>
              </Source>
          </Variable>
          <Variable name="SellOffersLabor" dataType="Float">
              <Source>
                  <ObjectProperty property="Supply" objectType="Market" objectIdRef="3"/>
              </Source>
          </Variable>
        </Statistics>
        
        <DataTypes>
            <ComplexDataType name="TradeOffer">
                <Attribute type="String" name="product"/>
                <Attribute type="Float" name="price"/>
                <Attribute type="Float" name="quantity"/>
                <Attribute type="Boolean" name="buy"/>
                <Attribute type="Integer" name="bidderIdRef"/>
            </ComplexDataType>
        </DataTypes>
        <EntityTypes>
            <!--==========================================-->
            <MessageType name="StartOfDay_Notification">
                <documentation>A message of the market to announce the trading price of the last day</documentation>
                <Attribute type="Float" name="price"/>
                <Attribute type="String" name="marketType"/>
            </MessageType>
            <!--==========================================-->
            <MessageType name="Act_msg">
                <documentation>A message to an EconomicAgent, which signals them to being with their work.</documentation>
            </MessageType>
            <!--==========================================-->
            <MessageType name="ClearMarket">
                <documentation>A message to a Market, which ends the trading day.</documentation>
            </MessageType>
            <!--==========================================-->
            <MessageType name="BL4Offer">
                <documentation>A list of oofers to the market, made by a BL4Agent.</documentation>
                <ComplexDataProperty name="offers" type="TradeOffer" upperMultiplicity="unbounded" />
            </MessageType>
            <!--==========================================-->
            <MessageType name="MatchingOffer">
                <documentation>A successful trade returned from the market</documentation>
                <ComplexDataProperty name="offer" type="TradeOffer" />
            </MessageType>
            <!--==========================================-->
            <ExogenousEventType name="Init">
                <documentation>Triggers certain EnvironmentRule, needed for the initialization</documentation>
            </ExogenousEventType>
            <!--==========================================-->
            <ExogenousEventType name="StartOfDay" periodicity="9">
                <documentation>
                    Starts a new day. EnvironmentRules are triggered, which check if a person has enough food, a firm is bankrupt
                    and send the marketprices of the last day is announced to all EconomicAgents.
                </documentation>
            </ExogenousEventType>
            <!--==========================================-->
            <ExogenousEventType name="StartWork" periodicity="9">
                <documentation>Triggers the StartWork_ER-EnvironmentRule, which tells the EconomicAgents to start with their work.</documentation>
            </ExogenousEventType>
            <!--==========================================-->
            <ExogenousEventType name="CloseMarket" periodicity="9">
                <documentation>
                Ends the day, by triggering the CloseMarket_ER-EnvironmentRule.
                Which tells the Markets to end the trading day and calculate a new market price.
                </documentation>
            </ExogenousEventType>
            <!--==========================================-->
            <AgentType name="EconomicAgent">
            <!--==========================================-->
                <documentation>
                    Superclass of Person and Firm, which has the basic functionality for communicating with the market(price updates and succesfull transactions).
                    Further it adds help functions to find a specific asset or to create an offer.
                    
                    LABOR_ALLOWANCE: The amount of labor, a laborer offers every day.
                    lastFoodPrice, lastLaborPrice, lastUtilityPrice: The trading price of the last day.
                </documentation>
                <ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded" />
                <Attribute type="Float" name="LABOR_ALLOWANCE" initialValue="1.0"/>
                <Attribute type="Float" name="RANDOM_FACTOR" initialValue="0.01"/>
                <Attribute type="Float" name="lastFoodPrice" initialValue="0"/>
                <Attribute type="Float" name="lastLaborPrice" initialValue="0"/>
                <Attribute type="Float" name="lastUtilityPrice" initialValue="0"/>
                <!--======================================-->
                <Function name="getAssetByName" resultType="aors.util.economics.Quantity">
                    <documentation>
                        Finds an asset from the AssetsList by String.
                    </documentation>
					<Parameter name="name" type="String" />
                    <Body language="Java"><![CDATA[
                        int i;
                        aors.util.ArrayListInterface<aors.util.economics.Quantity> assets = getAssets();
                        for (i=0; i < assets.size(); i++){
                          if (!assets.get(i).isDiscrete()) {
                            if (((aors.util.economics.ContinuousQuantity)assets.get(i)).getContinuousQuantityType().getName().equals(name)) break;
                          } else {
                            if (((aors.util.economics.DiscreteQuantity)assets.get(i)).getType().equals(name)) break;
                          }
                        }
                        return assets.get(i);
                        ]]></Body>
                    	<Body language="JavaScript"><![CDATA[
						            var i;
						            var assets = this.getAssets();
						            for (i=0; i < assets.size(); i++){
						          	 if (!assets.get(i).isDiscrete()) {
						        		   if (assets.get(i).getContinuousQuantityType().getName() === name) break;
						            	  } else {
						        	  	    if (assets.get(i).getType() === name) break;
						            	  }
						            }
						            return assets.get(i);
					            ]]></Body>	
                </Function>
                <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <ReactionRule name="StartOfDay_Food_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the food market is updated.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Food")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Food"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastFoodPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <ReactionRule name="StartOfDay_Labor_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the labor market is updated.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Labor")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Labor"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastLaborPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <ReactionRule name="StartOfDay_Utility_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>The price of the utility market is updated.</documentation>
                    <WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
                    <IF language="Java">this.msg.getMarketType().equals("Utility")</IF>
                    <IF language="JavaScript">this.msg.getMarketType() === "Utility"</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="lastUtilityPrice">
                                <PropertyValueExpr entityVariable="msg" property="price"/>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Money_Rule" agentVariable="avt">
                    <documentation>
                        When a sell transaction was successful, the money amount is increased by the quantity times the price of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageVariable="MatchingOffer" messageType="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Money_Rule" agentVariable="agt">
                    <documentation>
                        When a buy transaction was successful, the money amount is decreased by the quantity times the of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Food_Rule" agentVariable="agt">
                    <documentation>
                        When a buyFood transaction was successful, the food amount is increased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Food_Rule" agentVariable="agt">
                    <documentation>
                        When a sellfood transaction was successful, the food amount is decreased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Labor_Rule" agentVariable="agt">
                    <documentation>
                        When a buylabor transaction was successful, the labor amount is increased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Labor_Rule" agentVariable="agt">
                    <documentation>
                        When a selllabor transaction was successful, the labor amount is decreased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Deposit_Utility_Rule" agentVariable="agt">
                    <documentation>
                        When a buyutility transaction was successful, the utility amount is increased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="deposit" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer.getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Withdraw_Utility_Rule" agentVariable="agt">
                    <documentation>
                        When a sellutility transaction was successful, the utility amount is decreased by the quantity of the offer.
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg"/>
                    <FOR-ListItemVariable variable="asset" listItemType="Quantity">
                        <ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Call procedure="withdraw" contextObjectVariable="asset">
                                <Argument parameter="q">
                                    <ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
                                </Argument>
                            </Call>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ========================================================= -->
            <AgentType name="Person" superType="EconomicAgent">
                <documentation>
                    Superclass to represent a BL4Person
                    
                    EAT_AMOUNT: The amount of food a person eats every day.
                    TARGET_FOOD_STOCK: The aimed food amount.
                    income: Amount of money a person can spend during a day.
                </documentation>
                <Attribute type="Float" name="EAT_AMOUNT"/>
                <Attribute type="Float" name="TARGET_FOOD_STOCK"/>
                <Attribute type="Float" name="income"/>
            </AgentType>
            <!-- ========================================================= -->
            <AgentType name="Firm" superType="EconomicAgent">
                <documentation>
                    Superclass to represent a BL4Firm.
                </documentation>
            </AgentType>
            <!-- ========================================================= -->
            <AgentType name="BL4Person" superType="Person">
                <documentation>
                    <description>
                        A BL4Person is either a laborer or an owner. Every day he has to consume EAT_AMOUNT units of food or he dies.
                        To earn money, a Laborer sells his labor while a owner uses the money of his firm.
                        Further a person tries to sell spare food. To survive he tries to buys food, from the rest of his money he buys utility.
                        In order that the bidding functions work correct, the BuyFood_Rule has to be executed before the BuyUtility_Rule.
                        This is because, offers are cleared after they are returned from the market, otherwise a person would spend to much money on utility.
                        
                        TARGET_MONEY_STOCK: The aimed money amount.
                        foodBuyList: Collects all buy offers for food.
                        utilityBuyList: Collects all buy offers for utility.
                        foodSellList: Collects all sell offers for food.
                    </description>
                </documentation>
                <Attribute type="Float" name="TARGET_MONEY_STOCK"/>
                <ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded" />
                <ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded" />
                <ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded" />
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="buyFood" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>Abstract function, specified in BL4Laborer and BL4Owner.</documentation>
                    <Body language="Java JavaScript">return false;</Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="sellFood" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        If a person has more than 1.5 * TARGET_FOOD_STOCK units of food, he tries to sell his spare food.
                        A new offer is made for every unit of food. The further this unit is over the target, the lower is the price.
                        All buy offers are added to the foodSellList.
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
                        getFoodSellList().clear();
                        double foodAmount = getAssetByName("Food").getQuantity();
                        if (foodAmount > 1.5 * getTARGETT_FOOD_STOCK()){
                          final double quantum = getEAT_AMOUNT() * 1.0;
                            for (double x = foodAmount; x > 1.5 * getTARGET_FOOD_STOCK(); x -= quantum) {
                              if (x == 0.0) x = 0.00000000001;
                                double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / (x - getTARGET_FOOD_STOCK()), .2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
                                double price = mod * getLastFoodPrice();
                                if (price <= 0.0) break
                                
                                sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
                                o.setProduct("Food");
                                o.setQuantity(quantum);
                                o.setPrice(price);
                                o.setBuy(false);
                                o.setBidderIdRef(bidderIdRef);
                                getFoodSellList().add(o);
                            }
                          return true;
                        }
                        return false;
                        ]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        this.getFoodSellList().clear();
                        var foodAmount = this.getAssetByName("Food").getQuantity();
                        if (foodAmount > 1.5 * this.getEAT_AMOUNT()){
                          var quantum = this.getEAT_AMOUNT() * 1.0;
                          for (var x = foodAmount; x > 1.5 * this.getTARGET_FOOD_STOCK(); x -= quantum) {
                            if (x === 0.0) x = 0.00000000001;
                            var random_value = js.util.Random.uniform(0.0, 1.0);
                            var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / (x - this.getTARGET_FOOD_STOCK()), 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
                            var price = mod * this.getLastFoodPrice();
                            if (price <= 0.0) break;
                            
                            var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
                            o.setProduct("Food");
                            o.setQuantity(quantum);
                            o.setPrice(price);
                            o.setBuy(false);
                            o.setBidderIdRef(bidderIdRef);
                            this.getFoodSellList().add(o);
                          }
                          return true;
                        }
                        return false;
                        ]]></Body>
                </Function>
                <Function name="buyUtility" resultType="Boolean">
                  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        If a person has more food than his TARGET_FOOD_STOCK and more money than his TARGET_MONEY_STOCK, he tries to buy utility.
                        All buy offers are added to the UtilityBuyList.
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
                        getUtilityBuyList().clear();
                        if (getIncome() > getTARGET_MONEY_STOCK() && getAssetByName("Food").getQuantity() > getTARGET_FOOD_STOCK()) {
                          final double frac = 0.95;
                          double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
                          double uPrice = getLastUtilityPrice() * factor;
                          double quantity = (getIncome() - getTARGET_MONEY_STOCK()) / uPrice;
                          if (quantity > 0 && uPrice>0.0) {
                            for (double d = quantity; d > 0 ; d--) {
                              sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
                              o.setProduct("Utility");
                              o.setQuantity(1);
                              o.setPrice(uPrice);
                              o.setBuy(true);
                              o.setBidderIdRef(bidderIdRef);
                              getUtilityBuyList().add(o);
                            }
                          }
                          return true;
                        }
                        return false;
                        ]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        this.getUtilityBuyList().clear();
                        var purse = this.getIncome();
                        if (purse > this.getTARGET_MONEY_STOCK() && this.getAssetByName("Food").getQuantity() > this.getTARGET_FOOD_STOCK()){
                          var frac = 0.95;
                          var random_value = js.util.Random.normal(0.0, 1.0);
                          var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1);
                          var uPrice = this.getLastUtilityPrice() * factor;
                          var quantity = (this.getIncome() - this.getTARGET_MONEY_STOCK()) / uPrice;
                          if ( quantity > 0 && uPrice > 0.0) {
                            for (var d = quantity; d > 0; d--) {
                              var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
                              o.setProduct("Utility");
                              o.setQuantity(1);
                              o.setPrice(uPrice);
                              o.setBuy(true);
                              o.setBidderIdRef(bidderIdRef);
                              this.getUtilityBuyList().add(o);
                            }
                          }
                          return true;
                        }
                        return false;
                        ]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="BuyFood_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The person decides how much food wants to buy</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.buyFood(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="2">
                                <Slot property="offers">
                                    <ValueExpr language="Java JavaScript">this.agt.getFoodBuyList()</ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="SellFood_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The person decides how much food wants to sell</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="2">
                                <Slot property="offers">
                                    <ValueExpr language="Java JavaScript">this.agt.getFoodSellList()</ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="BuyUtility_Rule">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>
                            The person decides how much utility wants to buy
                        </description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.buyUtility(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="4">
                                <Slot property="offers">
                                    <ValueExpr language="Java JavaScript">this.agt.getBuyUtilityBuyList()</ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ====================================================== -->
            <AgentType name="BL4Laborer" superType="BL4Person">
                <documentation>
                    A Laborer is a Person, who tries to sell his labor.
                    
                    laborSellList: Collects all sell offers for labor.
                </documentation>
                <ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded" />
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="buyFood" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Creates buy offers for food until the limit of 1.5 times TARGET_FOOD_STOCK is reached.
                        A new offer is made for every unit of food and the income is reduced by the price.
                        The further this unit is under the TARGET_FOOD_STOCK, the higher is the price.
                        Accordingly the further this unit is over the TARGET_FOOD_STOCK, the lower is the price.
                        All buy offers are added to the FoodBuyList.
                    </documentation>
                    <Parameter name="bidder" type="long"/>
                    <Body language="Java"><![CDATA[
                        double moneyAmount = getAssetByName("Money").getQuantity();
                        setIncome(moneyAmount);
                        getFoodBuyList().clear();
                        final double quantum = getEAT_AMOUNT() * 1.0;
                        double purse = moneyAmount;
                        for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK() x += quantum) {
                          if (x == 0.0) x = 0.00000000001;
                          double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
                          double price = mod * getLastFoodPrice();
                          price = Math.min(price, purse);
                          if (price <= 0.0) break
                          purse = purse - (quantum * price);
                          if (purse < 0.0) break;
                          
                          sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
                          o.setProduct("Food");
                          o.setQuantity(quantum);
                          o.setPrice(price);
                          o.setBuy(true);
                          o.setBidderIdRef(bidder);
                          getFoodBuyList().add(o);
                          setIncome(getIncome() - price);
                        }
                        return true;
                        ]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        var moneyAmount = this.getAssetByName("Money").getQuantity();
                        this.setIncome(moneyAmount);
                        this.getFoodBuyList().clear();
                        var quantum = this.getEAT_AMOUNT() * 1.0;
                        var purse = moneyAmount;
                        for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
                          if (x === 0.0) x = 0.00000000001;
                          var random_value = js.util.Random.uniform(0.0, 1.0);
                          var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_Factor();
                          var price = mod * this.getLastFoodPRice();
                          price = Math.min(price, purse);
                          if (price <= 0.0) break;
                          purse = purse - (quantum * price);
                          if (purse < 0.0) break; 
                          
                          var o = new minecon_laborfoodutility_bl4scenarion.model.dataTypes.TradeOffer();
                          o.setProduct("Food");
                          o.setQuantity(quantum);
                          o.setPrice(price);
                          o.setBuy(true);
                          o.setBidderIdRef(bidder);
                          this.getFoodBuyList().add(o);
                          this.setIncome(this.getIncome() - price);
                        }
                        return true;
                        ]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="sellLabor" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        If a person has less food than his TARGET_FOOD_STOCK and the LastLaborPrice is higher than the FoodLaborPrice,
                        he needs the food and is willing to work for less than the LastLaborPrice,
                        otherwise the LastLaborPrice is the lastLaborPrice times a random factor.
                        All buy offers are added to the LaborSellList.
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
                        double price;
                        double foodAmount = getAssetByName("Food").getQuantity();
                        getLaborSellList().clear();
                        if (getLaborPrice() > getLastFoodPrice() && foodAmount < getTARGET_FOOD_STOCK()) {
                          price = (getLastLaborPrice() - getLastFoodPrice()) * ((foodAmount * foodAmount) / (getTARGET_FOOD_STOCK() * getTARGET_FOOD_STOCK())) + getLastFoodPrice();
                          price = Math.min(price, getLastLaborPrice() * 1.1);
                        } else {
                            price = getLastLaborPrice();
                            final double frac = 0.95;
                            double mod = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
                            price *=mod;
                        }
                        sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
                        o.setProduct("Labor");
                        o.setQuantity(getLABOR_ALLOWANCE());
                        o.setPrice(price);
                        o.setBuy(false);
                        o.setBidderIdRef(bidderIdRef);
                        getLaborSellList().add(o);
                        return true;
                        ]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        var price = 0;
                        var foodAmount = this.getAssetByName("Food").getQuantity();
                        this.getLaborSellList().clear();
                        if (this.getLaborPrice() > this.getLastFoodPrice() && foodAmount < this.getTARGET_FOOD_STOCK()) {
                          price = (this.getLastLaborPrice() - this.getLastFoodPrice()) * ((foodAmount * foodAmount) / (this.getTARGET_FOOD_STOCK() * this.getTARGET_FOOD_STOCK())) + tgus,getLastFoodPrice();
                          price = Math.min(price, this.getLastLaborPrice() * 1.1);
                        } else {
                          price = this.getLastLaborPrice();
                          var frac = 0.95;
                          var random_value = js.util.Random.normal(0.0, 1.0);
                          var mod = Math.max(Math.min(random_value, 2.0), -2) / 2 * (1 - frac) + 1;
                          price *= mod;
                        }
                        var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
                        o.setProduct("Labor");
                        o.setQuantity(this.getLABOR_ALLOWANCE());
                        o.setPrice(price);
                        o.setBuy(false);
                        o.setBidderIdRew(bidderIdRef);
                        this.getLaborSellList().add(o);
                        return true;
                        ]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="SellLabor_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The person decides how much labor wants to sell</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.sellLabor(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="3">
                                <Slot property="offers">
                                    <ValueExpr language="Java JavaScript">this.agt.getLaborSellList()</ValueExpr>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>                
            </AgentType>
            <!-- ====================================================== -->
            <AgentType name="BL4Owner" superType="BL4Person">
                <documentation>
                    A Owner is a Person, who lives from the income of his firm.
                    
                    TARGET_FIRM_MONEY_STOCK: aimed money amount of his firm.
                    firm: the firm owned by the owner, allocated in the Initialize_Ownershil_ER EnvironmentRule.
                </documentation>
                <Attribute type="Float" name="TARGET_FIRM_MONEY_STOCK"/>
                <ReferenceProperty name="firm" type="BL4Firm" />
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="buyFood" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Like the buyFood function of the laborer, except that in the beginning the owner takes spare money from his firm.
                        All buy offers are added to the FoodBuyList.
                    </documentation>
                    <Parameter name="bidder" type="long"/>
                    <Body language="Java"><![CDATA[
                        if (getFirm() != null){
							double firmMoney = getFirm().getAssetByName("Money").getQuantity();
							double moneyToWithdraw = Math.max(getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity() , firmMoney - getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								getAssetByName("Money").deposit((getFirm().getAssetByName("Money")).withdraw(moneyToWithdraw));
	                    	}
                    	}
                    	setIncome(getAssetByName("Money").getQuantity());
						getFoodBuyList().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = getAssetByName("Money").getQuantity();
			          	for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyList().add(o);
			            	setIncome(getIncome()-price);
			          	}
						return true;
						]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        if(this.getFirm() !== null){
							var firmMoney = this.getFirm().getAssetByName("Money").getQuantity();
							var moneyToWithdraw = Math.max(this.getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity(), firmMoney - this.getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								var moneyAsset = this.getAssetByName("Money");
								var firmMoneyAsset = this.getFirm().getAssetByName("Money");
								moneyAsset.deposit(firmMoneyAsset.withdraw(moneyToWithdraw));
							}
						}
						this.setIncome(this.getAssetByName("Money").getQuantity());
						this.getFoodBuyList().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getFoodBuyList().add(o);
							this.setIncome(this.getIncome() - price);
						}
						return true;
                        ]]></Body>
                </Function>                
            </AgentType>
            <!-- ========================================================== -->
            <AgentType name="BL4Firm" superType="Firm">
                <documentation>
                    A BL4Firm is either a farm or a factory.
                    A firm buys labor from the market, converts this labor into a product and sells the product on the market.
                    
                    amountProduced: The amount a firm has produced in this day.
                    owner: The owner of this firm.
                    buyList: Collects all buy offers for labor.
                    sellList: Collects all sell offers for this firms product.
                </documentation>
                <Attribute type="Float" name="amountProduced"/>
                <ReferenceProperty name="owner" type="Person" />
                <ComplexDataProperty name="buyList" type="TradeOffer"  upperMultiplicity="unbounded"/>
                <ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded" />
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="buyLabor" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Abstract function, specified in BL4Farm and BL4Factory
                    </documentation>
                    <Body language="Java JavaScript">return false;</Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="BuyLabor_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The factory decides how much labort it wants to buy</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.buyLabor(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="3">
                                <Slot property="offers">
                                    <PropertyValueExpr entityVariable="agt" property="buyList"/>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ======================================================== -->
            <AgentType name="BL4Farm" superType="BL4Firm">
                <documentation>
                    A farm is a firm which produces food.
                    
                    TARGET_FOOD_STOCK: The aimed food amount of this farm.
                    TARGET_OWNER_FOOD_STOCK: The aimed food amount of the owner.
                </documentation>
                <Attribute type="Float" name="TARGET_FOOD_STOCK"/>
                <Attribute type="Float" name="TARGET_OWNER_FOOD_STOCK"/>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="sellFood" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        When a farm has produced food at this day, it tries to sell all of it.
                        The price is the last market price times a random factor.
                        All sell offers are added to the SellList.
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
                        getSellList().clear();
						double productQuantity = getAssetByName("Food").getQuantity();
						if (productQuantity == 0) {
							return false;
						} else {
            				double food = productQuantity;
            				double quantum = productQuantity /10;
							while (food > 0){
								double factor = (Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * 0.1 + 1;
                				double price = getLastFoodPrice() * factor;
                				for (double d = quantum; d > 0; d--){
	                				sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
						            o.setProduct("Food");
					            	o.setQuantity(1);
									o.setPrice(price);
					            	o.setBuy(false);
					            	o.setBidderIdRef(bidderIdRef);
					            	getSellList().add(o);
				            	}
				            	food = food - quantum;
            				}
            				return true;
        				}
        				]]></Body>
                    <Body language="JavaScript"><![CDATA[
                        this.getSellList().clear();
						var productQuantity = this.getAssetByName("Food").getQuantity();
						if (productQuantity === 0) {
							return false;
						} else {
							var food = productQuantity;
							var quantum = productQuantity / 10.0;
							while (food > 0) {
							    var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = (Math.max(Math.min(random_value, 2.0), -2.0)  / 2.0) * 0.1 + 1;
								var price = this.getLastFoodPrice() * factor;
								for (var d = quantum; d > 0; d--) {
									var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
									o.setProduct("Food");
									o.setQuantity(1);
									o.setPrice(price);
									o.setBuy(false);
									o.setBidderIdRef(bidderIdRef);
									this.getSellList().add(o);
								}
								food = food - quantum;
							}
							return true;
						}
                        ]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="buyLabor" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        A Farm has two diffrent bidding functions for labor. 
                        The first is only used when the food amount of the owner is less than 0.75 times the TARGET_OWNER_FOOD_STOCK 
                        and the farm is under its traget. The prices of the first bidding function is always over the market price 
                        and depend on the food amount of the owner.
                        While the second is every day. It creates offers, where the prices decrease the closer the expected food amount is to the TARGET_FOOD_STOCK.
                        When the TARGET_FOOD_STOCK is reached or the bidding prices is half of the LastLaborPrice, the farm stops bidding.
                        All buy offers are added to the BuyList.
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
						getBuyList().clear();
						double ownerfoodAmount = getOwner().getAssetByName("Food").getQuantity();
				        if (ownerfoodAmount < 0.75 * getTARGET_OWNER_FOOD_STOCK() && getAssetByName("Food").getQuantity() < getTARGET_FOOD_STOCK()){
				          final double quantum = getLABOR_ALLOWANCE() * 1.0;
				          double purse = getAssetByName("Money").getQuantity();
						  System.out.println("1");
				          for (double x = ownerfoodAmount; x <= 1.5 * getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
				            if (x == 0.0) x = 0.00000000001;
				            double mod = 0.1 * Math.pow(getTARGET_OWNER_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
				            double price = mod*getLastLaborPrice();
				            price = Math.min(price, purse);
				            if (price <= 0.0) break;
				            purse -= quantum * price;
				            if (purse < 0.0) break;
				            
				            sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);        	
				          }
				        }
						double lastProduct = 0.0;
						double minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToFood(d) - lastProduct;
			                if (lastProduct + getAssetByName("Food").getQuantity() >= getTARGET_FOOD_STOCK()) break;
			                double price = marginalProduct * getLastFoodPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			
			                sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(getLABOR_ALLOWANCE());
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
			            	purse = purse - price;
			            	lastProduct = lastProduct + marginalProduct;
			            }
						return true;						
					]]></Body>
                    <Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var ownerfoodAmount = this.getOwner().getAssetByName("Food").getQuantity();
						if (ownerfoodAmount < 0.75 * this.getTARGET_OWNER_FOOD_STOCK() && this.getAssetByName("Food").getQuantity() < this.getTARGET_FOOD_STOCK()){
						  var quantum = this.getLABOR_ALLOWANCE() * 1.0;
						  var purse = this.getAssetByName("Money").getQuantity();
						  for (var x = ownerfoodAmount; x <= 1.5 * this.getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
							if (x === 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0); 
							var mod = 0.1 * Math.pow(this.getTARGET_OWNER_FOOD_STOCK() / x, 0.2) +  0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastLaborPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							purse -= quantum * price;
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);        	
						  }
						}
						
						
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
						
							var marginalProduct = this.convertToFood(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Food").getQuantity() >= this.getTARGET_FOOD_STOCK()) break;

							var price = marginalProduct * this.getLastFoodPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;

							var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(this.getLABOR_ALLOWANCE());
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price;
							lastProduct = lastProduct + marginalProduct;
						}
						return true;						
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="convertToFood" resultType="Float">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        Calculates how much food could be produced with a specific amount of labor
                    </documentation>
                    <Parameter name="laborQuantity" type="double"/>
                    <Body language="Java JavaScript"><![CDATA[return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="produceFood" resultType="Float">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        Converts all labor to food
                    </documentation>
                    <Parameter name="ID" type="long"/>
                    <Body language="Java"><![CDATA[
						double labor = getAssetByName("Labor").getQuantity();
						double food = convertToFood(labor);
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Food").deposit(food);
						return food;									
					]]></Body>
                    <Body language="JavaScript"><![CDATA[
						var labor = this.getAssetByName("Labor").getQuantity();
						var food = this.convertToFood(labor);
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Food").deposit(food);
						return food;										
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="ProduceFood_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Converts all labor to food
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript"><![CDATA[ this.agt.getAssetByName("Labor").getQuantity() > 0 ]]></IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="amountProduced">
                                <ValueExpr language="Java JavaScript">this.agt.produceFood(this.agt.getId())</ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="SellFood_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The farm decides how much food it wants to sell</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="2">
                                <Slot property="offers">
                                    <PropertyValueExpr entityVariable="agt" property="sellList"/>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ============================================================= -->
            <AgentType name="BL4Factory" superType="BL4Firm">
                <documentation>
                    
                    A factory is a firm which produces utility.
                    
                    TARGET_UTILITY_STOCK: The aimed utility amount of this farm.
                    
                </documentation>
                <Attribute name="TARGET_UTILITY_STOCK" type="Float" initialValue="60.0"/>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="sellUtility" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        When a factory has produced utility at this day, it tries to sell all of it.
                        The price is the last market price times a random factor.
                        All sell offers are added to the SellList.	
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
						getSellList().clear();
						final double frac = 0.9;
			            double util = getAssetByName("Utility").getQuantity();
			            double quantum = util / 10; 
			            while (util > 0) {
			            	for (double d = quantum; d > 0; d--) {
				            	double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0)/ 2) * (1 - frac) + 1); 
				            	double price = getLastUtilityPrice() * factor;
								
			            		sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Utility");
				            	o.setQuantity(1);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getSellList().add(o);
			            	}
			            	util = util-quantum;
			            }
            			return true;		
					]]></Body>
                    <Body language="JavaScript"><![CDATA[
						this.getSellList().clear();
						var frac = 0.9;
						var util = this.getAssetByName("Utility").getQuantity();
						var quantum = util / 10.0; 
						while (util > 0) {
							for (var d = quantum; d > 0; d--) {
								var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1); 
								var price = this.getLastUtilityPrice() * factor;
								
								var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
								o.setProduct("Utility");
								o.setQuantity(1);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getSellList().add(o);
							}
							util = util - quantum;
						}
						return true;	
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="buyLabor" resultType="Boolean">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        Creates offers, where the prices decrease the closer the expected utility amount is to the TARGET_UTILITY_STOCK.
                        When the TARGET_UTILITY_STOCK is reached or the bidding prices is half of the LastLaborPrice, the factory stops bidding.
                        All buy offers are added to the BuyList
                    </documentation>
                    <Parameter name="bidderIdRef" type="long"/>
                    <Body language="Java"><![CDATA[
						getBuyList().clear();
						double lastProduct = 0.0, minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToUtility(d) - lastProduct;
			                if (lastProduct + getAssetByName("Utility").getQuantity() >= getTARGET_UTILITY_STOCK()) 
								break;
			
			                double price = marginalProduct * getLastUtilityPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			                
							sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(1);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
							purse = purse - price; 
			                lastProduct += marginalProduct;
			            }
			        	return true;						
					]]></Body>
                    <Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
							var marginalProduct = this.convertToUtility(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Utility").getQuantity() >= this.getTARGET_UTILITY_STOCK()) 
								break;

							var price = marginalProduct * this.getLastUtilityPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;
							
							var o = new minecon_laborfoodutility_bl4scenario.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(1);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price; 
							lastProduct += marginalProduct;
						}
						return true;					
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="convertToUtility" resultType="Integer">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        Calculates how much utility could be produced with a specific amount of labor
                    </documentation>
                    <Parameter name="laborQuantity" type="double"/>
                    <Body language="Java"><![CDATA[
						return ((Double)(((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0)).longValue();
					]]></Body>
                    <Body language="JavaScript"><![CDATA[
					  var value = ((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0;
					  if (value > 0)
						value = Math.floor(value);
					  else
						value = Math.ceil(value);
					  return value;
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <Function name="produceUtility" resultType="Integer">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                    <documentation>
                        converts all labor to utility
                    </documentation>
                    <Body language="Java"><![CDATA[	
						long utility = convertToUtility(getAssetByName("Labor").getQuantity());
						double labor = getAssetByName("Labor").getQuantity();
						getAssetByName("Labor").withdraw(labor);
						getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
                    <Body language="JavaScript"><![CDATA[ 
						var utility = this.convertToUtility(this.getAssetByName("Labor").getQuantity());
						var labor = this.getAssetByName("Labor").getQuantity();
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                <ReactionRule name="ProduceUtility_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Converts all labor to utility
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
                    <IF language="JavaScript">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <Slot property="amountProduced">
                                <ValueExpr language="Java JavaScript">this.agt.produceUtility()</ValueExpr>
                            </Slot>
                        </UPDATE-AGT>
                    </THEN>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="SellUtility_Rule" agentVariable="agt">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        <description>The factory decides how much utility it wants to sell</description>
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="Act_msg"/>
                    <IF language="Java JavaScript">this.agt.sellUtility(this.agt.getId())</IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="BL4Offer" receiverIdRefs="4">
                                <Slot property="offers">
                                    <PropertyValueExpr entityVariable="agt" property="sellList"/>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- ===================================================== -->
            <AgentType name="Market">
                <documentation>
                    
                    Collects offers made by Firms and Persons and tries to match buy and sell offers.
                    
                </documentation>
                <Attribute type="String" name="commodity"/>
                <Attribute name="currency" type="String" />
                <Attribute type="Float" name="supply"/>
                <Attribute type="Float" name="demand"/>
                <Attribute type="Float" name="lastMarketPrice"/>
                <ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
                <ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
                <ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <Function name="clear" resultType="void">
                    <documentation>
                        abstract function
                    </documentation>
                    <Body language="Java JavaScript"></Body>
                </Function>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Accept_BL4Offer" agentVariable="m">
                    <documentation>
                        BL4Offers are stored
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="BL4Offer" messageVariable="msg"/>
                    <IF language="Java JavaScript">this.msg.getOffers().get(0).isBuy()</IF>
                    <THEN>
                        <UPDATE-AGT>
                            <MultiValuedSlot property="buyOffers">
                                <AddAll>
                                    <ListExpr language="Java JavaScript">this.msg.getOffers()</ListExpr>
                                </AddAll>
                            </MultiValuedSlot>
                        </UPDATE-AGT>
                    </THEN>
                    <ELSE>
                        <UPDATE-AGT>
                            <MultiValuedSlot property="sellOffers">
                                <AddAll>
                                    <ListExpr language="Java JavaScript">this.msg.getOffers()</ListExpr>
                                </AddAll>
                            </MultiValuedSlot>
                        </UPDATE-AGT>
                    </ELSE>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Clear" agentVariable="m">
                    <documentation>
                        The market gets cleared
                    </documentation>
                    <WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
                    <DO>
                        <UPDATE-AGT>
                            <Call procedure="clear" contextObjectVariable="m">
                            </Call>
                        </UPDATE-AGT>
                        <SCHEDULE-EVT>
                            <ReminderEventExpr>
                                <ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
                            </ReminderEventExpr>
                        </SCHEDULE-EVT>
                    </DO>
                </ReactionRule>
                <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                <ReactionRule name="Return_TradeOffers" agentVariable="m">
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <documentation>
                        Done trades are returned to the persons and firms
                    </documentation>
                    <WHEN eventType="ReminderEvent" eventVariable="evt" />
                    <FOR-ListItemVariable variable="o" listItemType="TradeOffer">
                        <ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
                    </FOR-ListItemVariable>
                    <IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
                    <IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
                    <THEN>
                        <SCHEDULE-EVT>
                            <OutMessageEventExpr messageType="MatchingOffer">
                                <ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
                                <Slot property="offer">
                                    <ObjectValueExpr objectVariable="o"/>
                                </Slot>
                            </OutMessageEventExpr>
                        </SCHEDULE-EVT>
                    </THEN>
                </ReactionRule>
            </AgentType>
            <!-- =========================================================== -->
            <AgentType name="BL4Market" superType="Market">
				<documentation>
					The baseline4 implementation of a market
				</documentation>
				<Function name="clear" resultType="void">
					<documentation>
						Calculates the market price and adds the corresponding buy- and selloffers to the transactionlist
					</documentation>
					<Body language="Java"><![CDATA[
						System.out.println("Com: " + getCommodity());
						getTransactions().clear();
						java.util.Comparator<sim.model.dataTypes.TradeOffer> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.TradeOffer>() {
							public int compare (sim.model.dataTypes.TradeOffer a, sim.model.dataTypes.TradeOffer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
								            return 0;	             		
							}		
						};
						java.util.Collections.sort(getBuyOffers(), comparator);
						java.util.Collections.sort(getSellOffers(), comparator);
						
						// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        
				        if ((getBuyOffers().size() == 0) || (getSellOffers().size() == 0) || (less(getBuyOffers().get(getBuyOffers().size()-1).getPrice(), getSellOffers().get(0).getPrice()))) {
				        	setDemand(getBuyOffers().size());
				        	setSupply(getSellOffers().size());
				        	getBuyOffers().clear();
				        	getSellOffers().clear();
				        	return;
				        }	        
				        // merge prices into sorted list, eliminating duplicates
        				java.util.ArrayList<Double> prices = new java.util.ArrayList<Double>(getBuyOffers().size() + getSellOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().size() && b < getBuyOffers().size()) {
				            if (equal(getSellOffers().get(s).getPrice(), getBuyOffers().get(b).getPrice())) {
				            	prices.add(getSellOffers().get(s++).getPrice());
				                b++;
				            } else if (getSellOffers().get(s).getPrice() < getBuyOffers().get(b).getPrice()){
                				prices.add(getSellOffers().get(s++).getPrice());
                			} else {
                				prices.add(getBuyOffers().get(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
                				s++;
							}
							// eliminate duplicates in buyOffers
							while (b < getBuyOffers().size() && equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
                				b++;
                			}
                		}
                		// then add the remainder if there is one
        				if (s < getSellOffers().size()){
           				 	while (s < getSellOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
				                	prices.add(getSellOffers().get(s).getPrice());
				                }
				                s++;
			            	}
			            } else if (b < getBuyOffers().size()) {
            				while (b < getBuyOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
				                    prices.add(getBuyOffers().get(b).getPrice());
				                }
				                b++;
				            }
            			}    			
            			// find the price(s) at which supply and demand intersect
				        double supply = 0, demand = 0;
				        // initialize demand to be the demand at lowest demand price
				        for (sim.model.dataTypes.TradeOffer o : getBuyOffers()){
				            demand += o.getQuantity();
				        }
				        // walk through prices, updating supply and demand as needed.
				        int p = 0;
				        double bestVolume = Double.NEGATIVE_INFINITY;
				        int bestP = 0;
				        for (s = -1, b = 0; s + 1 < getSellOffers().size() && b < getBuyOffers().size(); p++) {
				            // if prices[p] is the next supply price:
				            while (s + 1 < getSellOffers().size() && equal(prices.get(p), getSellOffers().get(s + 1).getPrice())){
				                supply += getSellOffers().get(++s).getQuantity();
				            }
				            // if the current demand price is less than prices[p]:
				            while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p))){
				                demand -= getBuyOffers().get(b++).getQuantity();
				            }
				            if (supply > demand) {
				                // volume = demand
				                if (demand > bestVolume) {
				                    bestVolume = demand;
				                    bestP = p;
				                }
				                break; // stop
				            } else if (supply > bestVolume) {
				            	// volume = supply here
				                bestVolume = supply;
				                bestP = p;
				            }
				        }
			      	  	/*
				         * If the above loop broke because the final supply price was reached,
				         * then supply at Price >= prices[p-1] remains constant. Thus, it is
				         * necessary to check whether demand at higher prices will ever become
				         * less than the current supply. If so, then that will be at the market
				         * price.
				         */
				         if (s + 1 == getSellOffers().size()) {
				            for (; b < getBuyOffers().size() && p < prices.size(); p++) {
				                while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p)))
				                    demand -= getBuyOffers().get(b++).getQuantity();
				
				                if (supply > demand) {
				                    // volume = demand
				                    if (demand > bestVolume) {
				                        bestVolume = demand;
				                        bestP = p;
				                    }
				                    break; // stop
				                } else if (supply > bestVolume) { 
				                	// volume = supply here
				                    bestVolume = supply;
				                    bestP = p;
				                }
				            }
				        }
				        /*
				         * If one of the loops broke because the next price was greater than the
				         * highest demand price, then the market price is set to the highest
				         * demand price in order to minimize shortage.
				         */
				        if (b == getBuyOffers().size()){
				            setLastMarketPrice(getBuyOffers().get(b - 1).getPrice());
				        }
				        /* If supply never crosses demand, set to highest supply price */
				        else if (p == prices.size()){
				            setLastMarketPrice(getBuyOffers().get(p - 1).getPrice());
				        }
				        /*
				         * Finally, if the loop broke because supply > demand, there are two
				         * valid prices that could be the market price: prices[p], which is the
				         * smallest price at which supply tops demand, or prices[p-1], which is
				         * the largest price at which demand tops supply. Since either price is
				         * valid, we select between them in an arbitrary, yet deterministic
				         * manner. However, if choosing between a two prices, one of which would
				         * not cause any transactions to occur, we choose the other price.
				         */
				        else {
				            if (p == 0) {
				                setLastMarketPrice(prices.get(p));
				            } else if (less(prices.get(p - 1), getSellOffers().get(0).getPrice())){
				                setLastMarketPrice(prices.get(p));
				            } else if (less(getBuyOffers().get(getBuyOffers().size() - 1).getPrice(), prices.get(p))){
				                setLastMarketPrice(prices.get(p - 1));
				            } else {
				                setLastMarketPrice(prices.get(bestP));
				            }
				        }
				        int seller = 0, buyer = getBuyOffers().size() - 1;
				        while (seller < getSellOffers().size() && buyer >= 0 && !less(getLastMarketPrice(), getSellOffers().get(seller).getPrice()) && !less(getBuyOffers().get(buyer).getPrice(), getLastMarketPrice())) 
						{	
							getSellOffers().get(seller).setPrice(getLastMarketPrice());
							getTransactions().add(getSellOffers().get(seller));
							seller++;
							getBuyOffers().get(buyer).setPrice(getLastMarketPrice());
							getTransactions().add(getBuyOffers().get(buyer));
							buyer--;
				        }
						// reset offer lists and set statistic variables
				        setDemand(getBuyOffers().size());
				        setSupply(getSellOffers().size());
				        getBuyOffers().clear();
				        getSellOffers().clear();
				        System.out.println("demand: " + getDemand());
				        System.out.println("supply: " + getSupply());
				        System.out.println("trans: " + getTransactions().size());
				        System.out.println("price: " + getLastMarketPrice());
					]]></Body>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="JavaScript"><![CDATA[
						this.getTransactions().clear();
						var buyOffers = this.getBuyOffers();
						var sellOffers = this.getSellOffers();
						
						var comparator = function(a, b) {
							var p1 = a.getPrice();
							var p2 = b.getPrice();
							
							if (p1 < p2) return -1;
							if (p1 > p2) return 1;
										return 0;	
						}
						
						buyOffers.sort(comparator);
						sellOffers.sort(comparator);
						
						// handle special cases
						// highest buy price < lowest sell price -> no transactions OR
						// empty offer list -> no transactions
						
						if ((buyOffers.size() == 0) || (sellOffers.size() == 0) || (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), sellOffers.get(0).getPrice()))) {
							this.setDemand(buyOffers.size());
							this.setSupply(sellOffers.size());
							buyOffers.clear();
							sellOffers.clear();
							return;
						}
						
						// merge prices into sorted list, eliminating duplicates
						var prices = new js.util.ArrayList();
						var s = 0, b = 0;
						while (s < sellOffers.size() && b < buyOffers.size()) {
							if (this.equal(sellOffers.get(s).getPrice(), buyOffers.get(b).getPrice())) {
								prices.add(sellOffers.get(s++).getPrice());
								b++;
							} else if (sellOffers.get(s).getPrice() < buyOffers.get(b).getPrice()){
								prices.add(sellOffers.get(s++).getPrice());
							} else {
								prices.add(buyOffers.get(b++).getPrice());
							}
							// eliminate duplicates in sellOffers
							while (s < sellOffers.size() && this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
								s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < buyOffers.size() && this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
								b++;
							}
						}
						// then add the remainder if there is one
						if (s < sellOffers.size()) {
								while (s < sellOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
									prices.add(sellOffers.get(s).getPrice());
								}
								s++;
							}
						} else if (b < buyOffers.size()) {
							while (b < buyOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
									prices.add(buyOffers.get(b).getPrice());
								}
								b++;
							}
						}
						// find the price(s) at which supply and demand intersect
						var supply = 0, demand = 0;
						
						// initialize demand to be the demand at lowest demand price
						for (var o = 0; o < buyOffers.size(); o++) { 
							var tradeOffer = buyOffers.get(o);
							demand += tradeOffer.getQuantity();
						}
						
						// walk through prices, updating supply and demand as needed.
						var p = 0;
						var bestVolume = Number.NEGATIVE_INFINITY;
						var bestP = 0;
						for (s = -1, b = 0; s + 1 < sellOffers.size() && b < buyOffers.size(); p++) {
							// if prices.get(p) is the next supply price:
							while (s + 1 < sellOffers.size() && this.equal(prices.get(p), sellOffers.get(s + 1).getPrice())) {
								supply += sellOffers.get(++s).getQuantity();
							}
							// if the current demand price is less than prices.get(p):
							while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p))) {
								demand -= buyOffers.get(b++).getQuantity();
							}
							if (supply > demand) {
								// volume = demand
								if (demand > bestVolume) {
									bestVolume = demand;
									bestP = p;
								}
								break; // stop
							} else if (supply > bestVolume) {
								// volume = supply here
								bestVolume = supply;
								bestP = p;
							}
						}
						/*
						 * If the above loop broke because the final supply price was reached,
						 * then supply at Price >= prices.get(p-1) remains constant. Thus, it is
						 * necessary to check whether demand at higher prices will ever become
						 * less than the current supply. If so, then that will be at the market
						 * price.
						 */
						 if (s + 1 == sellOffers.size()) {
							for (; b < buyOffers.size() && p < prices.size(); p++) {
								while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p)))
									demand -= buyOffers.get(b++).getQuantity();
				
								if (supply > demand) {
									// volume = demand
									if (demand > bestVolume) {
										bestVolume = demand;
										bestP = p;
									}
									break; // stop
								} else if (supply > bestVolume) { 
									// volume = supply here
									bestVolume = supply;
									bestP = p;
								}
							}
						}
						/*
						 * If one of the loops broke because the next price was greater than the
						 * highest demand price, then the market price is set to the highest
						 * demand price in order to minimize shortage.
						 */
						if (b == buyOffers.size()) {
							this.setLastMarketPrice(buyOffers.get(b - 1).getPrice());
						}
						/* If supply never crosses demand, set to highest supply price */
						else if (p == prices.size()) {
							this.setLastMarketPrice(buyOffers.get(p - 1).getPrice());
						}
						/*
						 * Finally, if the loop broke because supply > demand, there are two
						 * valid prices that could be the market price: prices.get(p), which is the
						 * smallest price at which supply tops demand, or prices.get(p-1), which is
						 * the largest price at which demand tops supply. Since either price is
						 * valid, we select between them in an arbitrary, yet deterministic
						 * manner. However, if choosing between a two prices, one of which would
						 * not cause any transactions to occur, we choose the other price.
						 */
						else {
							if (p == 0) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(prices.get(p - 1), sellOffers.get(0).getPrice())) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), prices.get(p))) {
								this.setLastMarketPrice(prices.get(p - 1));
							} else {
								this.setLastMarketPrice(prices.get(bestP));
							}
						}
						var seller = 0, buyer = buyOffers.size() - 1;
						while (seller < sellOffers.size() && buyer >= 0	&& !this.less(this.getLastMarketPrice(), sellOffers.get(seller).getPrice()) && !this.less(buyOffers.get(buyer).getPrice(), this.getLastMarketPrice())) 
						{	
							sellOffers.get(seller).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(sellOffers.get(seller));
							seller++;
							buyOffers.get(buyer).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(buyOffers.get(buyer));
							buyer--;
						}
						// reset offer lists and set statistic variables
						this.setDemand(buyOffers.size());
						this.setSupply(sellOffers.size());
						buyOffers.clear();
						sellOffers.clear();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						Check if the two Inputparameters are equal
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						if (a + 1e-5 < b) 
							return false;
						else if (a - 1e-5 > b) 
							return false;
						else
							return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						checks if a less b 
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						return (a + 1e-5 < b);
					]]></Body>
				</Function>
            </AgentType>
            <!-- ============================================ -->
            <AgentType name="BL4ContinuousCommodityMarket" superType="BL4Market">
                <documentation>
                    The baseline4 market for continuous commodities
                </documentation>
            </AgentType>
            <!-- ============================================ -->
            <AgentType name="BL4DiscreteCommodityMarket" superType="BL4Market">
                <documentation>
                    The baseline4 market for discrete commodities
                </documentation>
            </AgentType>
        </EntityTypes>
        
        <EnvironmentRules>
            <EnvironmentRule name="Initialize_Ownership_ER">
            <documentation>
                Finds an owner for every firm(BL4 only)
            </documentation>
            <WHEN eventType="Init"/>
            <FOR-ObjectVariable variable="f" objectType="BL4Firm" />
            <FOR-ObjectVariable variable="o" objectType="BL4Owner" />
            <IF language="Java JavaScript"><![CDATA[ (this.o.getFirm() == null) && (this.f.getOwner() == null) ]]></IF>
            <THEN>
                <UPDATE-ENV>
                    <UpdateObject objectVariable="f">
                        <Slot property="owner"><ObjectValueExpr objectVariable="o"/></Slot>
                    </UpdateObject>
                    <UpdateObject objectVariable="o">
                        <Slot property="firm"><ObjectValueExpr objectVariable="f"/></Slot>
                    </UpdateObject>
                </UPDATE-ENV>
            </THEN>
            </EnvironmentRule>
            <!-- Day -->
            <EnvironmentRule name="AtStartOfDayEat_ER">
                <!-- ============================= -->
                <documentation>
                    Every person tries to eat, if he can't then he dies
                </documentation>
                <WHEN eventType="StartOfDay" eventVariable="evt" />
                <FOR-ObjectVariable variable="p" objectType="Person" />
                <IF language="Java JavaScript"><![CDATA[ this.p.getAssetByName("Food").withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT() ]]></IF>
                <THEN>
                    <UPDATE-ENV>
                        <DestroyObject><ObjectIdRef language="Java JavaScript">this.p.getId()</ObjectIdRef></DestroyObject>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ============================= -->
            <EnvironmentRule name="CheckBankrupt_ER">
                <documentation>
                    If a farm has no more money, food and labor or a factory has no more money, utility and labor , it is shut down(BL4 only)
                </documentation>
                <WHEN eventType="StartOfDay" eventVariable="evt" />
                <FOR-ObjectVariable variable="f" objectType="Firm" />
                <IF language="Java"><![CDATA[ ( ( this.f.getClass() == BL4Farm.class && this.f.getAssetByName("Food").getQuantity() == 0.0) 
												|| (this.f.getClass() == BL4Factory.class && this.f.getAssetByName("Utility").getQuantity() == 0.0)
											) && this.f.getAssetByName("Labor").getQuantity() == 0.0 && this.f.getAssetByName("Money").getQuantity() == 0.0 ]]></IF>
                <IF language="JavaScript">false</IF>
                <THEN>
                    <UPDATE-ENV>
                        <DestroyObject objectVariable="f"/>
                    </UPDATE-ENV>
                </THEN>
            </EnvironmentRule>
            <!-- ====================================== -->
            <EnvironmentRule name="StartOfDay_Rule_ER">
                <!-- ====================================== -->
                <documentation>
                    
                    For all markets that exist, the market price of the last day is send to every person and firm
                    
                </documentation>
                <WHEN eventType="StartOfDay"/>
                <FOR-ObjectVariable variable="m" objectType="Market" />
                <FOR-ObjectVariable variable="e" objectType="EconomicAgent" />
                <DO>
                    <SCHEDULE-EVT>
                        <InMessageEventExpr messageType="StartOfDay_Notification">
                            <SenderIdRef language="Java JavaScript">this.m.getId()</SenderIdRef>
                            <ReceiverIdRef language="Java JavaScript">this.e.getId()</ReceiverIdRef>
                            <Slot property="price">
                                <PropertyValueExpr entityVariable="m" property="lastMarketPrice"/>
                            </Slot>
                            <Slot property="marketType">
                                <PropertyValueExpr entityVariable="m" property="commodity"/>
                            </Slot>
                        </InMessageEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
            <!-- ============================= -->
            <EnvironmentRule name="StartWork_ER">
                <!-- ============================= -->
                <documentation>
                    Act_msg is sent to every person and firm, which signals them to being with their work.
                </documentation>
                <WHEN eventType="StartWork"/>
                <FOR-ObjectVariable variable="e" objectType="EconomicAgent"></FOR-ObjectVariable>
                <DO>
                    <SCHEDULE-EVT>
                        <InMessageEventExpr messageType="Act_msg" senderIdRef="0">
                            <ReceiverIdRef language="Java JavaScript">this.e.getId()</ReceiverIdRef>
                        </InMessageEventExpr>
                        <!-- Act aufteilen-->
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>	
            <!-- ===================================== -->
            <EnvironmentRule name="CloseMarket_ER">
                <!-- ===================================== -->
                <documentation>
                    ClearMarket is send to every market, which ends the trading day.
                </documentation>
                <WHEN eventType="CloseMarket"/>
                <FOR-ObjectVariable variable="m" objectType="Market" />
                <DO>
                    <SCHEDULE-EVT>
                        <InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
                            <ReceiverIdRef language="Java JavaScript">this.m.getId()</ReceiverIdRef>
                        </InMessageEventExpr>
                    </SCHEDULE-EVT>
                </DO>
            </EnvironmentRule>
        </EnvironmentRules>
        
    </SimulationModel>
    <!-- ======================= -->
    <InitialState>
        <!-- ===================================== -->
        <!--
            Initialisation of persons, firms and markets.
            Definition of the 3 ExogenousEvent(StartOfDay, StartWork and CloseMarket), which simulate a day.
            The init-Event is !!baseline6 only!! and is needed to calculate the initial prices
            Agents have a fix ID-range(IDs of the Markets should not be changed):
            1 = Environment
            2 = FoodMarket
            3 = LaborMarket
            4 = UtilityMarket
            1000 - 1999 = BL4Laborer
            2000 - 2999 = BL4Owner
            3000 - 3999 = BL4Farm
            4000 - 4999 = BL4Factor-->		
       <Agent name="FoodMarket" id="2" type="BL4ContinuousCommodityMarket">
        <Slot property="lastMarketPrice" value="0.2" />
        <Slot property="commodity" value="Food" />
        <Slot property="currency" value="Money" />
        <Slot property="buyOffers">
            <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
            <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
        </Slot>
        <Slot property="sellOffers">
            <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
            <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
        </Slot>
        <Slot property="transactions">
            <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
            <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
        </Slot>
        </Agent>
        <Agent name="LaborMarket" id="3" type="BL4ContinuousCommodityMarket">			
            <Slot property="lastMarketPrice" value="0.4" />
            <Slot property="commodity" value="Labor" />
            <Slot property="currency" value="Money" />
            <Slot property="buyOffers">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="sellOffers">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="transactions">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
        </Agent>
        <Agent name="UtilityMarket" id="4" type="BL4DiscreteCommodityMarket">	
            <Slot property="lastMarketPrice" value="1.0" />
            <Slot property="commodity" value="Utility" />
            <Slot property="currency" value="Money" />
            <Slot property="buyOffers">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="sellOffers">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="transactions">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
        </Agent>
        <Agents type="BL4Laborer" rangeStartID="1000" rangeEndID="1174">
            <Slot property="assets">
                <ValueExpr language="Java">
                    <![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
						{
							add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
						}
				} ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
            </Slot>
            <Slot property="foodBuyList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList()]]></ValueExpr>
            </Slot>
            <Slot property="foodSellList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="laborSellList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="utilityBuyList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="EAT_AMOUNT" value="1.0" />
            <Slot property="TARGET_FOOD_STOCK" value="30.0" />
            <Slot property="TARGET_MONEY_STOCK" value="60.0" />
        </Agents>
        <Agents type="BL4Owner" rangeStartID="2000" rangeEndID="2009">		
            <Slot property="assets">
                <ValueExpr language="Java">
                    <![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
                </ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
            </Slot>
            <Slot property="foodBuyList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="foodSellList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="utilityBuyList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="EAT_AMOUNT" value="1.0" />
            <Slot property="TARGET_FOOD_STOCK" value="30.0" />
            <Slot property="TARGET_MONEY_STOCK" value="60.0" />
            <Slot property="TARGET_FIRM_MONEY_STOCK" value="100.0" />
            <Slot property="firm" value="null"></Slot>
        </Agents>
        <Agents type="BL4Farm" rangeStartID="3000" rangeEndID="3004">	
            <Slot property="assets">
                <ValueExpr language="Java">
                    <![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
                </ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
            </Slot>
            <Slot property="buyList">
                <ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
            </Slot>
            <Slot property="sellList">
                <ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
            </Slot>
            <Slot property="TARGET_FOOD_STOCK" value="120.0"/>
            <Slot property="TARGET_OWNER_FOOD_STOCK" value="30.0"/>
        </Agents>
        <Agents type="BL4Factory" rangeStartID="4000" rangeEndID="4004">		
            <Slot property="assets">
                <ValueExpr language="Java">
                    <![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					  {	
						add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 5));;
					  }
				    } ]]>
                </ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 5))
				]]></ValueExpr>
            </Slot>
            <Slot property="buyList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
            <Slot property="sellList">
                <ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
                <ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
            </Slot>
        </Agents>
		<ExogenousEvent type="Init" occurrenceTime="1" />
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ExogenousEvent occurrenceTime="1" type="StartOfDay" />
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->   
        <ExogenousEvent occurrenceTime="3" type="StartWork" />
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <ExogenousEvent occurrenceTime="6" type="CloseMarket" />
    </InitialState>
    <!-- =================================================== -->
   <UserInterface supportedLanguages="en">
       <StatisticsUI>
           <StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
               <Label>
                   <Text xml:lang="en">FoodPrice</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">Average price of the foodmarket</Text>
               </Hint>
               <Format decimalPlaces="2">
                   <Currency>EUR(€)</Currency>
               </Format>               
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
               <Label>
                   <Text xml:lang="en">Food SellOffers</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">number of selloffers for food</Text>
               </Hint>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
               <Label>
                   <Text xml:lang="en">LaborPrice</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">Average price of the labormarket</Text>
               </Hint>
               <Format decimalPlaces="2">
                   <Currency>EUR(€)</Currency>
               </Format>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
               <Label>
                   <Text xml:lang="en">Labor SellOffers</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">number of buyoffers for labor</Text>
               </Hint>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
               <Label>
                   <Text xml:lang="en">Labor SellOffers</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">number of selloffers for labor</Text>
               </Hint>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
               <Label>
                   <Text xml:lang="en">UtilityPrice</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">Average price of the utilitymarket</Text>
               </Hint>
               <Format decimalPlaces="2">
                   <Currency>EUR(€)</Currency>
               </Format>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
               <Label>
                   <Text xml:lang="en">Utility BuyOffers</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">number of buyoffers for utility</Text>
               </Hint>
           </StatisticsVariableUI>
           <StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
               <Label>
                   <Text xml:lang="en">Utility SellOffers</Text>
               </Label>
               <Hint>
                   <Text xml:lang="en">number of selloffers for labor</Text>
               </Hint>
           </StatisticsVariableUI>           
       </StatisticsUI>
       <AnimationUI>
           <Views>
               <ObjectView objectType="Laborer">
                   <Shape2D y="400">
                       <Rectangle width="4" height="10" fill="blue">
                           <ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-6000" a1="6"/>
                       </Rectangle>
                   </Shape2D>
               </ObjectView>
               <ObjectView objectType="Factory">
                   <Shape2D y="250">
                       <Rectangle width="40" positioning="LeftBottom" texture="backgrounds\LightgrayMarble.jpg">
                           <ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-200000" a1="50"/>
                           <ShapePropertyVisualizationMap shapeProperty="height" property="amountProduced" mapType="polynomial" a0="20" a1=""/>
                       </Rectangle>
                   </Shape2D>
               </ObjectView>
           </Views>
       </AnimationUI>
       
   </UserInterface>
</SimulationScenario>