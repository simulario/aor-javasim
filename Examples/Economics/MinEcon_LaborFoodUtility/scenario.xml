<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
 xmlns="http://aor-simulation.org"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:aors="http://aor-simulation.org"
 version="0.8.4"
 scenarioName="MinEcon_LaborFoodUtility_Scenario1"
 scenarioTitle="Minimal Economy with a Labor, Food and Utility Market"
 simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0" randomSeed="47"/>
	<SimulationModel modelName="MinEcon_LaborFoodUtility">
		<documentation>
			<dc:title>Minimal Economy with a Labor, Food and Utility Market</dc:title>
			<dc:title xml:lang="de">Minimale Volkswirtschaft mit Arbeits-, Nahrungsmittel- und Luxusgütermarkt</dc:title>
			<dc:subject>Agent-based computational economics</dc:subject>
			<dc:subject xml:lang="de">Wirtschaftssimulation</dc:subject>
			<dc:creator>Lars Langjahr</dc:creator>
			<dc:created>20101031</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:contributor>Gabriel Diaconita</dc:contributor>
			<dc:modified>20101203</dc:modified>
			<dc:source>The "Baseline 4" model created by Michael Adelson, Chris Rucinski, and Cody Wang in the 
				"Economics via Object-oriented Simulation" (EOS) project (see http://eos.cs.princeton.edu/) 
				led by Ken Steiglitz, Princeton University, and Michael Honig, Northwestern University.  
			</dc:source>
			<aors:shortDescription xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				Simulates an economy with three goods: labor, food, and "utility", and four types of economic agents: 
				laborers, firm owners, farms, and utility factories. 
			</aors:shortDescription>
			<aors:shortDescription xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
				Simuliert eine Volkswirtschaft mit drei Gütern: Arbeit, Nahrung und einem abstrakten Luxusgut, 
				sowie vier Arten von ökonomischen Agenten: Arbeiter, Firmenbesitzer, Bauernhöfe und Luxusgutfabriken. 
			</aors:shortDescription>
			<aors:description xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				This model simulates an economy with three commodities: labor, food, and "utility", 
				and four types of economic agents: laborers, firm owners, farms, and utility factories. 
				Laborers are allotted a certain amount of labor at each step, which they can sell to a 
				firm. Laborers can also buy food and utility on the open market with the 
				money that they have earned. Owners simply own a farm or a factory, and collect the profits 
				from these endeavors, which they use to purchase food and utility. Farms hire laborers to 
				produce food, and then sell this food on the open market, giving any profits to their 
				owners. Utility factories operate in the same manner, but produce utility instead of food. 
				Laborer and owners must consume a sufficient quantity of food	at each step or they die. 
				They also seek to purchase utility, which effectively represents all non-essential, 
				desirable goods, with any amount of retained earnings above their target stock.
				For more information, see <a href="http://eos.cs.princeton.edu/DeLuise_JIW05.27.10.pdf">Developing 
				a Micro-Validated Baseline for the EOS Framework</a> by Anthony M. DeLuise.
			</aors:description>
			<aors:description xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
				Dieses Modell simuliert eine Volkswirtschaft mit drei Gütern: Arbeit, Nahrung und einem 
				abstrakten Luxusgut, sowie vier Arten von ökonomischen Agenten: Arbeiter, Firmenbesitzer, 
				Bauernhöfe und Luxusgüterfabriken. Arbeiter verfügen in jedem Simulationsschritt über eine 
				gewisse Menge and Arbeitskraft, die sie an eine Firma verkaufen können.
				Sie können dann mit dem verdienten Geld Nahrung und Luxusgüter auf dem offenen Markt kaufen.
				Firmenbesitzer beziehen Einkünfte aus den Gewinnen ihrer Firmen, mit denen
				sie Nahrung und Luxusgüter kaufen. Bauernhöfe 
				beschäftigen Arbeiter, um Nahrung herzustellen, die sie dann auf dem offenen Markt verkaufen. 
				Die dabei anfallenden Gewinne gehen an ihre Besitzer. Luxusgüterfabriken operieren in derselben
				Weise, außer dass sie Luxusgüter anstatt Nahrung produzieren.	Arbeiter und Firmenbesitzer
				müssen in jedem Schritt eine ausreichende Menge an Nahrung konsumieren, um nicht zu sterben. 
				Mit ihrem überschüssigen Geld kaufen sie Luxusgüter. 
				Weitere Informationen können folgendem Artikel entnommen werden:  
				<a href="http://eos.cs.princeton.edu/DeLuise_JIW05.27.10.pdf">Developing 
				a Micro-Validated Baseline for the EOS Framework</a> by Anthony M. DeLuise.
			</aors:description>
			<informationModelDiagram>EOS.png</informationModelDiagram>
			<dc:license>Creative Commons Attribution-NonCommercial-ShareAlike 3.0, 
				see http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:license>
		</documentation>
		
		<Statistics>
			<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="Demand" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="Supply" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="Demand" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="Supply" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="PriceLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3" />
				</Source>
			</Variable>
			<Variable name="BuyOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="Demand" objectType="Market" objectIdRef="3" />
				</Source>
			</Variable>
			<Variable name="SellOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="Supply" objectType="Market" objectIdRef="3" />
				</Source>
			</Variable>
		</Statistics>
		
		<DataTypes>
			<ComplexDataType name="TradeOffer">
				<Attribute name="product" type="String"/>
				<Attribute name="price" type="Float"/>
				<Attribute name="quantity" type="Float"/>
				<Attribute name="buy" type="Boolean"/>
				<Attribute name="bidderIdRef" type="Integer" />
				<Attribute name="min" type="Float" /><!-- BS6 -->
			</ComplexDataType>
		</DataTypes>
		<EntityTypes>
			<!--====================================-->
			<MessageType name="StartOfDay_Notification">
				<!--<documentation><dc:description>A message of the market to announce the trading price of the last day </dc:description></documentation>-->
				<Attribute name="price" type="Float"/>
				<Attribute name="marketType" type="String" />
			</MessageType>
			<!--====================================-->
			<MessageType name="Act_msg">
				<!--<documentation><dc:description>A message to an EconomicAgent, which signals them to being with their work.</dc:description></documentation>-->
			</MessageType>
			<!--====================================-->
			<MessageType name="ClearMarket">
				<!--<documentation><dc:description>A message to a Market, which ends the trading day.</dc:description></documentation>-->
			</MessageType>
			<!-- =================================== -->
			<MessageType name="BS4Offer">
				<!--<documentation><dc:description>A list of offers to the market, made by a BS4Agent.</dc:description></documentation>-->
				<ComplexDataProperty name="offers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!-- =================================== -->
			<MessageType name="BS6Offer">
				<!--<documentation><dc:description>A offer to the market, made by a BS6Agent.</dc:description></documentation>-->
				<ComplexDataProperty name="offer" type="TradeOffer" />
			</MessageType>
			<!--====================================-->
			<MessageType name="MatchingOffer" >
				<!--<documentation><dc:description>A succesful trade returned from the market</dc:description></documentation>-->
				<ComplexDataProperty name="offer" type="TradeOffer"/>
			</MessageType>
			<!-- =================================== -->
			<ExogenousEventType name="Init" >
				<documentation>
					<dc:description>Triggers certain EnvironmentRule, needed for the initialization</dc:description>
				</documentation>
			</ExogenousEventType>
			<!--=======================================================-->
			<ExogenousEventType name="StartOfDay" periodicity="9">
				<documentation>
					<dc:description>
						Starts a new day. EnvironmentRules are triggered, which check if a persons has enough food, a firm is bankrupt
						and send the marketprices of the last day is announced to all EconomicAgents.
					</dc:description>
				</documentation>
			</ExogenousEventType>
			<!--=======================================================-->
			<ExogenousEventType name="StartWork" periodicity="9">
				<documentation>
					<dc:description>
						Triggers the StartWork_ER-EnvironmentRule, which tells the EconomicAgents to start with their work.
					</dc:description>
				</documentation>
			</ExogenousEventType>
			<!--=======================================================-->
			<ExogenousEventType name="CloseMarket" periodicity="9">
				<documentation>
					<dc:description>
						Ends the day, by triggering the CloseMarket_ER-EnvironmentRule.
						Which tells the Markets to end the trading day and calculate a new market price.
					</dc:description>
				</documentation>
			</ExogenousEventType>
			<!--=======================================================-->
			<AgentType name="EconomicAgent">
			<!-- ============================================ -->
				<documentation>
					<dc:description>
						Superclass of Person and Firm, which has the basic functionality for communicating with the market(price updates and succesfull transactions).
						Further it adds help functions to find a specific asset or to create an offer.
						
						LABOR_ALLOWANCE: The amount of labor, a laborer offers every day.
						lastFoodPrice, lastLaborPrice, lastUtilityPrice: The trading price of the last day.
					</dc:description>
				</documentation>
				<ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded"/>
				<Attribute name="LABOR_ALLOWANCE" type="Float" initialValue="1.0"/>
				<Attribute name="RANDOM_FACTOR" type="Float" initialValue="0.01"/>
				<Attribute name="lastFoodPrice" type="Float"  initialValue="0"/>
				<Attribute name="lastLaborPrice" type="Float"  initialValue="0"/>
				<Attribute name="lastUtilityPrice" type="Float"  initialValue="0"/>
				<!--====================================-->
				<Function name="getAssetByName" resultType="aors.util.economics.Quantity">
					<documentation>
						<dc:description>
							Finds an asset from the AssetsList by String.
						</dc:description>
					</documentation>
					<Parameter name="name" type="String"/>
					<Body language="Java"><![CDATA[
						int i;
						aors.util.ArrayListInterface<aors.util.economics.Quantity> assets = getAssets();
						for (i=0; i < assets.size(); i++){
							if (!assets.get(i).isDiscrete()) {
								if (((aors.util.economics.ContinuousQuantity )assets.get(i)).getContinuousQuantityType().getName().equals(name)) break;
							} else {
								if (((aors.util.economics.DiscreteQuantity )assets.get(i)).getType().equals(name)) break;
							}
						}
						return assets.get(i);
					]]></Body>	
					<Body language="JavaScript"><![CDATA[
						var i;
						var assets = this.getAssets();
						for (i=0; i < assets.size(); i++){
							if (!assets.get(i).isDiscrete()) {
								if (assets.get(i).getContinuousQuantityType().getName() === name) break;
							} else {
								if (assets.get(i).getType() === name) break;
							}
						}
						return assets.get(i);
					]]></Body>	
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="createOffer" resultType="BS6Offer">
					<documentation>
						<dc:description>
							Needed to create an BS6Offer in JavaScript.
						</dc:description>
					</documentation>
					<Parameter name="product" type="String"/>
					<Parameter name="quantity" type="Float"/>
					<Parameter name="buy" type="Boolean"/>
					<Parameter name="min" type="Float"/>
					<Body language="JavaScript">
						var offer = new sim.model.dataTypes.TradeOffer();
						offer.setProduct(product);
						offer.setQuantity(quantity);
						offer.setBuy(buy);
						offer.setBidderIdRef(this.getId());
						offer.setMin(min);
						return offer;
					</Body>
				</Function>			
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Food_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							The price of the food market is updated.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Food")</IF> 
					<IF language="JavaScript">this.msg.getMarketType() === "Food"</IF> 
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastFoodPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Labor_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							The price of the labor market is updated.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Labor")</IF>
					<IF language="JavaScript">this.msg.getMarketType() === "Labor"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastLaborPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Utility_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							The price of the utility market is updated.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Utility")</IF>
					<IF language="JavaScript">this.msg.getMarketType() === "Utility"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastUtilityPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Money_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a sell transaction was succesful, the money amount is increased by the quantity times the price of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Money_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a buy transaction was succesful, the money amount is decreased by the quantity times the price of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Food_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a buyfood transaction was succesful, the food amount is increased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Food_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a sellfood transaction was succesful, the food amount is decreased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
					<IF language="Java JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Labor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a buylabor transaction was succesful, the labor amount is increased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Labor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a selllabor transaction was succesful, the labor amount is decreased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Utility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a buyutility transaction was succesful, the utility amount is increased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
					<IF language="Java JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Utility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							When a sellutility transaction was succesful, the utility amount is decreased by the quantity of the offer.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
				<documentation>
					<dc:description>
						Superclass to represent a BS4- or BS6Person. 
						
						EAT_AMOUNT: The amount of food a person eats every day.
						TARGET_FOOD_STOCK: The aimed food amount. 
						income: Amount of money a person can spend during a day.
					</dc:description>
				</documentation>
				<Attribute name="EAT_AMOUNT" type="Float" />
				<Attribute name="TARGET_FOOD_STOCK" type="Float" />
				<Attribute name="income" type="Float" />
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Firm" superType="EconomicAgent" >
				<documentation>
					<dc:description>
						Superclass to represent a BS4- or BS6Firm.
					</dc:description>
				</documentation>
			</AgentType>
			<!-- =====================BS4======================= -->
			<AgentType name="BS4Person" superType="Person">
				<documentation>
					<description>
						A BS4Person is either a laborer or an owner. Every day he has to consume EAT_AMOUNT units of food or he dies.
						To earn money, a Laborer sells his labor while a owner uses the money of his firm.
						Further a person tries to sell spare food. To survive he tries to buys food, From the rest of his money he buys utility.
						In order that the bidding functions work correct, the BuyFood_Rule as to be executed before the BuyUtility_Rule.
						This is because, offers are cleared after they are returned from the market, otherwise a person would spend to much money on utility.
						
						TARGET_MONEY_STOCK: The aimed money amount.
						foodBuyList: Collects all buy offers for food.
						utilityBuyList: Collects all buy offers for utility.
						foodSellList: Collects all sell offers for food.
					</description>
				</documentation>
				<Attribute name="TARGET_MONEY_STOCK" type="Float" />
				<ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>abstract function, specified in BS4Laborer and BS4Owner</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java JavaScript">return false;</Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							If a person has more than 1.5 * TARGET_FOOD_STOCK units of food, he tries to sell his spare food.
							A new offer is made for every unit of food. The further this unit is over the target, the lower is the price.
							All buy offers are added to the FoodSellList.
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getFoodSellList().clear();
						double foodAmount = getAssetByName("Food").getQuantity();
						if (foodAmount > 1.5 * getTARGET_FOOD_STOCK()){
				        	final double quantum = getEAT_AMOUNT() * 1.0;
				          	for (double x = foodAmount; x > 1.5 * getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
					            double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / (x - getTARGET_FOOD_STOCK()), .2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
					            double price = mod * getLastFoodPrice();
					            if (price <= 0.0) break;
								
					            sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Food");
				            	o.setQuantity(quantum);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getFoodSellList().add(o);
				          	}
							return true;
						}
						return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getFoodSellList().clear();
						var foodAmount = this.getAssetByName("Food").getQuantity();
						if (foodAmount > 1.5 * this.getTARGET_FOOD_STOCK()) {
							var quantum = this.getEAT_AMOUNT() * 1.0;
							for (var x = foodAmount; x > 1.5 * this.getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
								var random_value = js.util.Random.uniform(0.0, 1.0);
								var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / (x - this.getTARGET_FOOD_STOCK()), 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
								var price = mod * this.getLastFoodPrice();
								if (price <= 0.0) break;
								
								var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
								o.setProduct("Food");
								o.setQuantity(quantum);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getFoodSellList().add(o);
							}
							return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							If a person has more food than his TARGET_FOOD_STOCK and more money than his TARGET_MONEY_STOCK, he tries to buy utility.
							All buy offers are added to the UtilityBuyList. 
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getUtilityBuyList().clear();
						//double purse = getIncome();
						if (getIncome() > getTARGET_MONEY_STOCK() && getAssetByName("Food").getQuantity() > getTARGET_FOOD_STOCK()) {
					      	final double frac = 0.95;
					      	double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
					      	double uPrice = getLastUtilityPrice() * factor;
					      	double quantity = (getIncome() - getTARGET_MONEY_STOCK()) / uPrice;
					      	if (quantity > 0 && uPrice > 0.0){
					      		for (double d = quantity; d > 0; d--){
						        	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            	o.setProduct("Utility");
				            		o.setQuantity(1);
				            		o.setPrice(uPrice);
				            		o.setBuy(true);
				            		o.setBidderIdRef(bidderIdRef);
				            		getUtilityBuyList().add(o);
			            		}
			            	}
			            	return true;
			            }
			            return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getUtilityBuyList().clear();
						var purse = this.getIncome();
						if (purse > this.getTARGET_MONEY_STOCK() && this.getAssetByName("Food").getQuantity() > this.getTARGET_FOOD_STOCK()) {
							var frac = 0.95;
							var random_value = js.util.Random.normal(0.0, 1.0); 
							var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1);
							var uPrice = this.getLastUtilityPrice() * factor;
							var quantity = (this.getIncome() - this.getTARGET_MONEY_STOCK()) / uPrice;
							if (quantity > 0 && uPrice > 0.0) {
								for (var d = quantity; d > 0; d--) {
									var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
									o.setProduct("Utility");
									o.setQuantity(1);
									o.setPrice(uPrice);
									o.setBuy(true);
									o.setBidderIdRef(bidderIdRef);
									this.getUtilityBuyList().add(o);
								}
							}
							return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="BuyFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="2">
								<Slot property="offers"><ValueExpr language="Java JavaScript">this.agt.getFoodBuyList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="2">
								<Slot property="offers"><ValueExpr language="Java JavaScript">this.agt.getFoodSellList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyUtility_Rule" agentVariable="agt">
					<documentation>
						<description>The person decides how much utility he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyUtility(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="4">
								<Slot property="offers"><ValueExpr language="Java JavaScript">this.agt.getUtilityBuyList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4Laborer" superType="BS4Person">
				<documentation>
					<dc:description>
						A Laborer is a Person, who tries to sell his labor.
						
						laborSellList: Collects all sell offers for labor.
					</dc:description>
				</documentation>
				<ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							Creates buy offers for food until the limit of 1.5 times TARGET_FOOD_STOCK is reached.  
							A new offer is made for every unit of food and the income is reduced by the price. 
							The further this unit is under the TARGET_FOOD_STOCK, the higher is the price.
							Accordingly the further this unit is over the TARGET_FOOD_STOCK, the lower is the price.
							All buy offers are added to the FoodBuyList.
						</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						double moneyAmount = getAssetByName("Money").getQuantity();
                    	setIncome(moneyAmount);
						getFoodBuyList().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = moneyAmount;
			          	for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyList().add(o);
			            	setIncome(getIncome() - price);
			          	}
						return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var moneyAmount = this.getAssetByName("Money").getQuantity(); 
						this.setIncome(moneyAmount);
						this.getFoodBuyList().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = moneyAmount;
						for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getFoodBuyList().add(o);
							this.setIncome(this.getIncome() - price);
						}
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							If a person has less food than his TARGET_FOOD_STOCK and the LastLaborPrice is high than the FoodLaborPrice,
							he needs the food and is willing to work for less than the LastLaborPrice,
							otherwise the LastLaborPrice is the LastLaborPrice times a random factor.
							All buy offers are added to the LaborSellList.
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						double price;
						double foodAmount = getAssetByName("Food").getQuantity();
						getLaborSellList().clear();
						if (getLastLaborPrice() > getLastFoodPrice() && foodAmount < getTARGET_FOOD_STOCK()){
				        	price = (getLastLaborPrice() - getLastFoodPrice()) * ((foodAmount*foodAmount) / (getTARGET_FOOD_STOCK()*getTARGET_FOOD_STOCK())) + getLastFoodPrice();
				        	price = Math.min(price, getLastLaborPrice() * 1.1);
				        }else{
				            price = getLastLaborPrice();
				            final double frac = 0.95;
				            double mod =((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
				        	price *= mod;
				        }
						sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            o.setProduct("Labor");
		            	o.setQuantity(getLABOR_ALLOWANCE());
		            	o.setPrice(price);
		            	o.setBuy(false);
		            	o.setBidderIdRef(bidderIdRef);
		            	getLaborSellList().add(o);
		            	return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[ 
						var price = 0;
						var foodAmount = this.getAssetByName("Food").getQuantity();
						this.getLaborSellList().clear();
						if (this.getLastLaborPrice() > this.getLastFoodPrice() && foodAmount < this.getTARGET_FOOD_STOCK()){
							price = (this.getLastLaborPrice() - this.getLastFoodPrice()) * ((foodAmount * foodAmount) / (this.getTARGET_FOOD_STOCK() * this.getTARGET_FOOD_STOCK())) + this.getLastFoodPrice();
							price = Math.min(price, this.getLastLaborPrice() * 1.1);
						} else {
							price = this.getLastLaborPrice();
							var frac = 0.95;
							var random_value = js.util.Random.normal(0.0, 1.0);
							var mod = (Math.max(Math.min(random_value, 2.0), -2) / 2) * (1 - frac) + 1;
							price *= mod;
						}
						var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
						o.setProduct("Labor");
						o.setQuantity(this.getLABOR_ALLOWANCE());
						o.setPrice(price);
						o.setBuy(false);
						o.setBidderIdRef(bidderIdRef);
						this.getLaborSellList().add(o);
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellLabor_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellLabor(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="3">
								<Slot property="offers"><ValueExpr language="Java JavaScript">this.agt.getLaborSellList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4Owner" superType="BS4Person">
				<documentation>
					<dc:description>
						A Owner is a Person, who lives from the income of his firm.
						
						TARGET_FIRM_MONEY_STOCK: aimed money amount of his firm.
						firm: the firm owned by the owner, allocated in the Initialize_Ownership_ER EnvironmentRule.
					</dc:description>
				</documentation>
				<Attribute name="TARGET_FIRM_MONEY_STOCK" type="Float" />
				<ReferenceProperty name="firm" type="BS4Firm"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							Like the buyFood function of the laborer, except that in the beginning the owner takes spare money from his firm.  
							All buy offers are added to the FoodBuyList.
						</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						if (getFirm() != null){
							double firmMoney = getFirm().getAssetByName("Money").getQuantity();
							double moneyToWithdraw = Math.max(getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity() , firmMoney - getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								getAssetByName("Money").deposit((getFirm().getAssetByName("Money")).withdraw(moneyToWithdraw));
	                    	}
                    	}
                    	setIncome(getAssetByName("Money").getQuantity());
						getFoodBuyList().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = getAssetByName("Money").getQuantity();
			          	for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyList().add(o);
			            	setIncome(getIncome()-price);
			          	}
						return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						if(this.getFirm() !== null){
							var firmMoney = this.getFirm().getAssetByName("Money").getQuantity();
							var moneyToWithdraw = Math.max(this.getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity(), firmMoney - this.getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								var moneyAsset = this.getAssetByName("Money");
								var firmMoneyAsset = this.getFirm().getAssetByName("Money");
								moneyAsset.deposit(firmMoneyAsset.withdraw(moneyToWithdraw));
							}
						}
						this.setIncome(this.getAssetByName("Money").getQuantity());
						this.getFoodBuyList().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getFoodBuyList().add(o);
							this.setIncome(this.getIncome() - price);
						}
						return true;
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4Firm" superType="Firm">
				<documentation>
					<dc:description>
						A BS4Firm is either a farm or a factory.
						A Firm buys labor from the market , converts this labor into a product and sells the product on the market.
						
						amountProduced: The amount a firm has produced in this day.
						owner: The owner of this firm.
						buyList: Collects all buy offers for labor.
						sellList: Collects all sell offers for this firms product.
					</dc:description>
				</documentation>
				<Attribute name="amountProduced" type="Float"/>
				<ReferenceProperty name="owner" type="Person"/>
				<ComplexDataProperty name="buyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>abstract function, specified in BS4Farm and BS4Factory</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java JavaScript">return false;</Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The factory decides how much labor it wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyLabor(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="3">
								<Slot property="offers">
									<PropertyValueExpr entityVariable="agt" property="buyList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4Farm" superType="BS4Firm">
				<documentation>
					<dc:description>
						A farm is a firm which produces food.
						
						TARGET_FOOD_STOCK: The aimed food amount of this farm.
						TARGET_OWNER_FOOD_STOCK: The aimed food amount of the owner.
					</dc:description>
				</documentation>
				<Attribute name="TARGET_FOOD_STOCK" type="Float" />
				<Attribute name="TARGET_OWNER_FOOD_STOCK" type="Float" />
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							When a farm has produced food at this day, it tries to sell all of it.
							The price is the last market price times a random factor.
							All sell offers are added to the SellList.	
						t</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellList().clear();
						double productQuantity = getAssetByName("Food").getQuantity();
						if (productQuantity == 0) {
							return false;
						} else {
            				double food = productQuantity;
            				double quantum = productQuantity /10;
							while (food > 0){
								double factor = (Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * 0.1 + 1;
                				double price = getLastFoodPrice() * factor;
                				for (double d = quantum; d > 0; d--){
	                				sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
						            o.setProduct("Food");
					            	o.setQuantity(1);
									o.setPrice(price);
					            	o.setBuy(false);
					            	o.setBidderIdRef(bidderIdRef);
					            	getSellList().add(o);
				            	}
				            	food = food - quantum;
            				}
            				return true;
        				}
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getSellList().clear();
						var productQuantity = this.getAssetByName("Food").getQuantity();
						if (productQuantity === 0) {
							return false;
						} else {
							var food = productQuantity;
							var quantum = productQuantity / 10.0;
							while (food > 0) {
							    var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = (Math.max(Math.min(random_value, 2.0), -2.0)  / 2.0) * 0.1 + 1;
								var price = this.getLastFoodPrice() * factor;
								for (var d = quantum; d > 0; d--) {
									var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
									o.setProduct("Food");
									o.setQuantity(1);
									o.setPrice(price);
									o.setBuy(false);
									o.setBidderIdRef(bidderIdRef);
									this.getSellList().add(o);
								}
								food = food - quantum;
							}
							return true;
						}
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							A Farm has two diffrent bidding functions for labor. 
							The first is only used when the food amount of the owner is less than 0.75 times the TARGET_OWNER_FOOD_STOCK 
							and the farm is under its traget. The prices of the first bidding function is always over the market price 
							and depend on the food amount of the owner.
							While the second is every day. It creates offers, where the prices decrease the closer the expected food amount is to the TARGET_FOOD_STOCK.
							When the TARGET_FOOD_STOCK is reached or the bidding prices is half of the LastLaborPrice, the farm stops bidding.
							All buy offers are added to the BuyList.
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyList().clear();
						double ownerfoodAmount = getOwner().getAssetByName("Food").getQuantity();
				        if (ownerfoodAmount < 0.75 * getTARGET_OWNER_FOOD_STOCK() && getAssetByName("Food").getQuantity() < getTARGET_FOOD_STOCK()){
				          final double quantum = getLABOR_ALLOWANCE() * 1.0;
				          double purse = getAssetByName("Money").getQuantity();
						  System.out.println("1");
				          for (double x = ownerfoodAmount; x <= 1.5 * getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
				            if (x == 0.0) x = 0.00000000001;
				            double mod = 0.1 * Math.pow(getTARGET_OWNER_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
				            double price = mod*getLastLaborPrice();
				            price = Math.min(price, purse);
				            if (price <= 0.0) break;
				            purse -= quantum * price;
				            if (purse < 0.0) break;
				            
				            sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);        	
				          }
				        }
						double lastProduct = 0.0;
						double minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToFood(d) - lastProduct;
			                if (lastProduct + getAssetByName("Food").getQuantity() >= getTARGET_FOOD_STOCK()) break;
			                double price = marginalProduct * getLastFoodPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			
			                sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(getLABOR_ALLOWANCE());
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
			            	purse = purse - price;
			            	lastProduct = lastProduct + marginalProduct;
			            }
						return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var ownerfoodAmount = this.getOwner().getAssetByName("Food").getQuantity();
						if (ownerfoodAmount < 0.75 * this.getTARGET_OWNER_FOOD_STOCK() && this.getAssetByName("Food").getQuantity() < this.getTARGET_FOOD_STOCK()){
						  var quantum = this.getLABOR_ALLOWANCE() * 1.0;
						  var purse = this.getAssetByName("Money").getQuantity();
						  for (var x = ownerfoodAmount; x <= 1.5 * this.getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
							if (x === 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0); 
							var mod = 0.1 * Math.pow(this.getTARGET_OWNER_FOOD_STOCK() / x, 0.2) +  0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastLaborPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							purse -= quantum * price;
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);        	
						  }
						}
						
						
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
						
							var marginalProduct = this.convertToFood(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Food").getQuantity() >= this.getTARGET_FOOD_STOCK()) break;

							var price = marginalProduct * this.getLastFoodPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;

							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(this.getLABOR_ALLOWANCE());
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price;
							lastProduct = lastProduct + marginalProduct;
						}
						return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much food could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java JavaScript"><![CDATA[return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<Parameter name="ID" type="long"/>
					<Body language="Java"><![CDATA[
						double labor = getAssetByName("Labor").getQuantity();
						double food = convertToFood(labor);
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Food").deposit(food);
						return food;									
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var labor = this.getAssetByName("Labor").getQuantity();
						var food = this.convertToFood(labor);
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Food").deposit(food);
						return food;										
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProduceFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript"><![CDATA[ this.agt.getAssetByName("Labor").getQuantity() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.agt.produceFood(this.agt.getId())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The farm decides how much food it wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="2">
								<Slot property="offers">
									<PropertyValueExpr entityVariable="agt" property="sellList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4Factory" superType="BS4Firm">
				<documentation>
					<dc:description>
						A factory is a firm which produces utility.
						
						TARGET_UTILITY_STOCK: The aimed utility amount of this farm.
					</dc:description>
				</documentation>
				<Attribute name="TARGET_UTILITY_STOCK" type="Float" initialValue="60.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							When a factory has produced utility at this day, it tries to sell all of it.
							The price is the last market price times a random factor.
							All sell offers are added to the SellList.	
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellList().clear();
						final double frac = 0.9;
			            double util = getAssetByName("Utility").getQuantity();
			            double quantum = util / 10; 
			            while (util > 0) {
			            	for (double d = quantum; d > 0; d--) {
				            	double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0)/ 2) * (1 - frac) + 1); 
				            	double price = getLastUtilityPrice() * factor;
								
			            		sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Utility");
				            	o.setQuantity(1);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getSellList().add(o);
			            	}
			            	util = util-quantum;
			            }
            			return true;		
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getSellList().clear();
						var frac = 0.9;
						var util = this.getAssetByName("Utility").getQuantity();
						var quantum = util / 10.0; 
						while (util > 0) {
							for (var d = quantum; d > 0; d--) {
								var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1); 
								var price = this.getLastUtilityPrice() * factor;
								
								var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
								o.setProduct("Utility");
								o.setQuantity(1);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getSellList().add(o);
							}
							util = util - quantum;
						}
						return true;	
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>
							Creates offers, where the prices decrease the closer the expected utility amount is to the TARGET_UTILITY_STOCK.
							When the TARGET_UTILITY_STOCK is reached or the bidding prices is half of the LastLaborPrice, the factory stops bidding.
							All buy offers are added to the BuyList
						</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyList().clear();
						double lastProduct = 0.0, minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToUtility(d) - lastProduct;
			                if (lastProduct + getAssetByName("Utility").getQuantity() >= getTARGET_UTILITY_STOCK()) 
								break;
			
			                double price = marginalProduct * getLastUtilityPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			                
							sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(1);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
							purse = purse - price; 
			                lastProduct += marginalProduct;
			            }
			        	return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
							var marginalProduct = this.convertToUtility(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Utility").getQuantity() >= this.getTARGET_UTILITY_STOCK()) 
								break;

							var price = marginalProduct * this.getLastUtilityPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(1);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price; 
							lastProduct += marginalProduct;
						}
						return true;					
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much utility could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java"><![CDATA[
						return ((Double)(((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0)).longValue();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
					  var value = ((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0;
					  if (value > 0)
						value = Math.floor(value);
					  else
						value = Math.ceil(value);
					  return value;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>converts all labor to utility</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[	
						long utility = convertToUtility(getAssetByName("Labor").getQuantity());
						double labor = getAssetByName("Labor").getQuantity();
						getAssetByName("Labor").withdraw(labor);
						getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
					<Body language="JavaScript"><![CDATA[ 
						var utility = this.convertToUtility(this.getAssetByName("Labor").getQuantity());
						var labor = this.getAssetByName("Labor").getQuantity();
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="ProduceUtility_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to utility</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<IF language="JavaScript">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.agt.produceUtility()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellUtility_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The factory decides how much utility it wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellUtility(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS4Offer" receiverIdRefs="4">
								<Slot property="offers">
									<PropertyValueExpr entityVariable="agt" property="sellList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- =====================BS6======================= -->
			<AgentType name="BS6Person" superType="Person" />
			<!-- ============================================ -->
			<AgentType name="BS6Laborer" superType="BS6Person">
				<documentation>
					<description>
						Every day a BS6Laorer has to consume EAT_AMOUNT units of food or he dies.
						To earn money he sells his labor to the market.
						Depending on his TARGET_FOOD_STOCK, he deceides how much of his money, he spends on food and utility. 
					</description>
				</documentation>
				<Attribute type="Float" name="baseSavingToIncomeRatio" initialValue="10"/>
				<Attribute type="Float" name="epsilon" initialValue="0.1"/>
				<Attribute type="Float" name="upsilon" initialValue="0.04"/>
				<Attribute type="Float" name="savingRate"/>
				<Attribute type="Float" name="consumption"/>
				<Attribute type="Float" name="eConsumption"/>
				<Attribute type="Float" name="nConsumption"/>
				<Attribute type="Float" name="minN"/>
				<Attribute type="Float" name="lowRR"/>
				<Attribute type="Float" name="highRR"/>
				<Attribute type="Float" name="wage"/>
				<Attribute type="Float" name="targetSavings"/>
				<Attribute type="Float" name="targetConsumption"/>
				<Attribute type="Boolean" name="cheat" initialValue="true"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="wage_Rule">
					<documentation>
						<dc:description>Calculates the daily income</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<IF language="Java JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="income"><ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="consumption_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							At the first day, he spends his whole income. 
							Every other day he deceides how much he wants to save, the rest is his new targetConsumption.
							The new consumption is calculated by the consumption of the last day and the new targetConsumption. 
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="targetSavings">
								<ValueExpr language="Java JavaScript">this.agt.getIncome() * this.agt.getBaseSavingToIncomeRatio()</ValueExpr>
							</Slot>
							<Slot property="targetConsumption">
								<ValueExpr language="Java JavaScript">this.agt.getAssetByName("Money").getQuantity() - this.agt.getTargetSavings()</ValueExpr>
							</Slot>
							<Slot property="consumption">
								<ValueExpr language="Java JavaScript">
									Math.min(
										Math.max(
											this.agt.getConsumption() * (1 - this.agt.getUpsilon()),
											this.agt.getTargetConsumption()
										),
										this.agt.getConsumption() * (1 + this.agt.getUpsilon())
									)
								</ValueExpr>
							</Slot>
							<Slot property="consumption">
								<ValueExpr language="Java JavaScript">
									this.agt.isCheat() ? this.agt.getIncome() : this.agt.getConsumption()
								</ValueExpr>
							</Slot>
							<Slot property="cheat" value="false" />
							<Slot property="income" value="0" />	
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="buyFood_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							Deceides how much of his consumption he spends for food.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="nConsumption">
								<ValueExpr language="Java JavaScript">
									this.agt.getConsumption() * Math.max(0, 1 - this.agt.getAssetByName("Food").getQuantity() / this.agt.getTARGET_FOOD_STOCK())
								</ValueExpr>								
							</Slot>
							<Slot property="minN">
								<ValueExpr language="Java JavaScript"><![CDATA[
									this.agt.getAssetByName("Food").getQuantity() < 2* this.agt.getEAT_AMOUNT() ? this.agt.getEAT_AMOUNT() : 0
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="2">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Food");
											setQuantity(getNConsumption());
											setBuy(true);
											setBidderIdRef(getId());
											setMin(getMinN());
										}
										}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Food", this.agt.getNConsumption(), true, this.agt.getMinN() )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="buyUtility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							The part of his consumption he did not spend on food, he spends on utility.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="eConsumption">
								<ValueExpr language="Java JavaScript">this.agt.getConsumption() - this.agt.getNConsumption()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="4">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Utility");
											setQuantity(getEConsumption());
											setBuy(true);
											setBidderIdRef(getId());
										}
										}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Utility", this.agt.getEConsumption(), true )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="sellLabor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							Offers his labor to the market.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="3">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Labor");
											setQuantity(1);
											setBuy(false);
											setBidderIdRef(getId());
										}
										}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Labor", 1, false )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6Firm" superType="Firm">
				<documentation>
					<dc:description>
						A BS6Firm is either a farm or a factory.
						A Firm buys labor from the market , converts this labor into a product and sells the product on the market.
					</dc:description>
				</documentation>
				<Attribute type="String" name="product"/>
				<Attribute type="Float" name="capacity"/>
				<Attribute type="Float" name="output"/>
				<Attribute type="Float" name="wageBudget"/>
				<Attribute type="Float" name="wage"/>
				<Attribute type="Float" name="loan"/>
				<Attribute type="Float" name="revenue"/>
				<Attribute type="Float" name="profit"/>
				<Attribute type="Float" name="marginalProfit"/>
				<Attribute type="Float" name="capitalCost"/>
				<Attribute type="Float" name="totalCost"/>
				<Attribute type="Float" name="A"/>
				<Attribute type="Float" name="beta"/>
				<Attribute type="Float" name="phi"/>
				<Attribute type="Float" name="lambda"/>
				<Attribute type="Float" name="eUtilThreshold"/>
				<Attribute type="Float" name="rUtilThreshold"/>
				<Attribute type="Float" name="capitalQty"/>
				<Attribute type="Float" name="capitylVal"/>
				<Attribute type="Float" name="MC"/>
				<Attribute type="Boolean" name="cheat" initialValue="true"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="buyLabor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							Tries to buy labor from the market
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="3">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Labor");
											setQuantity(getWageBudget());
											setBuy(true);
											setBidderIdRef(getId());
										}
										}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Labor", this.agt.getWageBudget(), true )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6Farm" superType="BS6Firm">
				<documentation>
					<dc:description>
						A farm is a firm which produces food.
					</dc:description>
				</documentation>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="updateProduct" resultType="void">
					<documentation>
						<dc:description>
							Deposits the produced food and withdraw the uses labor
						</dc:description>
					</documentation>
					<Body language="Java JavaScript">
						if(this.getOutput() > 0){
							this.getAssetByName("Food").deposit(this.getOutput());
						}
						this.getAssetByName("Labor").withdraw(this.getAssetByName("Labor").getQuantity());
					</Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="revenue_Rule">
					<documentation>
						<dc:description>calculates the revenue of this day</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="revenue"><ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="produceFood_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							ToDo
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="totalCost"><PropertyValueExpr entityVariable="agt" property="wageBudget"/></Slot>
							<!-- Capitalcost -->
							<Slot property="profit">
								<ValueExpr language="Java JavaScript">
									this.agt.getRevenue() - this.agt.getTotalCost()
								</ValueExpr>
							</Slot>
							<Slot property="capacity">
								<ValueExpr language="Java JavaScript">
									this.agt.getA() * Math.pow(this.agt.getAssetByName("Labor").getQuantity(), this.agt.getBeta()) * Math.pow(30, 1 - this.agt.getBeta())
								</ValueExpr>
								<!-- Capital als Konstante -->
							</Slot>
							<Slot property="wage">
								<ValueExpr language="Java JavaScript">
									this.agt.getAssetByName("Labor").getQuantity() > 0 ? this.agt.getWageBudget() / this.agt.getAssetByName("Labor").getQuantity() : 0
								</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
					<IF language="Java JavaScript">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="wageBudget">
								<ValueExpr language="Java JavaScript">
									this.agt.isCheat() ? this.agt.getWageBudget() : Math.max( 0 , this.agt.getWageBudget() + this.agt.getLambda() * ( this.agt.getAssetByName("Money").getQuantity() - this.agt.getTotalCost() ) )		
								</ValueExpr>
							</Slot>
							<Slot property="MC">
								<ValueExpr language="Java JavaScript">
									this.agt.getWage() / this.agt.getBeta() 
									* Math.pow( this.agt.getA(), -1/this.agt.getBeta() )
									* Math.pow( this.agt.getOutput(), 1 / this.agt.getBeta() - 1 )
									* Math.pow( 30, 1 - 1 / this.agt.getBeta() )
								</ValueExpr>
								<!-- Capital als Konstante -->
							</Slot>
							<Slot property="marginalProfit">
								<ValueExpr language="Java JavaScript">
									this.agt.getLastFoodPrice() - this.agt.getMC()
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									this.agt.getOutput() * ( 1 + this.agt.getPhi() * this.agt.getMarginalProfit() / this.agt.getLastFoodPrice() )
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									Math.min( this.agt.getCapacity(), this.agt.getOutput() )
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java">
									(this.agt.isCheat()) ? 50 : this.agt.getOutput()	
								</ValueExpr>
							</Slot>
							<Slot property="cheat" value="false" />
							<Call procedure="updateProduct" contextObjectVariable="agt"></Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="sellFood_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							Tries to sell food to the market.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">getAssetByName("Food").getQuantity() > 0</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="2">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Food");
											setQuantity(getAssetByName("Food").getQuantity());
											setBuy(false);
											setBidderIdRef(getId());
										}
									}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Food", this.agt.getAssetByName("Food").getQuantity(), false )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6Factory" superType="BS6Firm">
				<documentation>
					<dc:description>
						A factory is a firm which produces utility.
					</dc:description>
				</documentation>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="updateProduct" resultType="void">
					<documentation>
						<dc:description>
							Deposits the produced utility and withdraw the uses labor
						</dc:description>
					</documentation>
					<Body language="Java JavaScript">
						if(this.getOutput() > 0){
							this.getAssetByName("Utility").deposit(this.getOutput());
						}
						this.getAssetByName("Labor").withdraw(this.getAssetByName("Labor").getQuantity());
					</Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="revenue_Rule">
					<documentation>
						<dc:description>calculates the revenue of this day</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="revenue"><ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr></Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="produceUtility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							ToDo
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="totalCost"><PropertyValueExpr entityVariable="agt" property="wageBudget"/></Slot>
							<!-- Capitalcost -->
							<Slot property="profit">
								<ValueExpr language="Java JavaScript">
									this.agt.getRevenue() - this.agt.getTotalCost()
								</ValueExpr>
							</Slot>
							<Slot property="capacity">
								<ValueExpr language="Java JavaScript">
									this.agt.getA() * Math.pow(this.agt.getAssetByName("Labor").getQuantity(), this.agt.getBeta()) * Math.pow(30, 1 - this.agt.getBeta())
								</ValueExpr>
								<!-- Capital als Konstante -->
							</Slot>
							<Slot property="wage">
								<ValueExpr language="Java JavaScript">
									this.agt.getAssetByName("Labor").getQuantity() > 0 ? this.agt.getWageBudget() / this.agt.getAssetByName("Labor").getQuantity() : 0
								</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
					<IF language="Java JavaScript">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="wageBudget">
								<ValueExpr language="Java">
									this.agt.isCheat() ? this.agt.getWageBudget() : Math.max( 0 , this.agt.getWageBudget() + this.agt.getLambda() * ( this.agt.getAssetByName("Money").getQuantity() - this.agt.getTotalCost() ) )		
								</ValueExpr>
							</Slot>
							<Slot property="MC">
								<ValueExpr language="Java JavaScript">
									this.agt.getWage() / this.agt.getBeta() 
									* Math.pow( this.agt.getA(), -1/this.agt.getBeta() ) 
									* Math.pow( this.agt.getOutput(), 1 / this.agt.getBeta() - 1 )
									* Math.pow( 30, 1 - 1 / this.agt.getBeta() )
								</ValueExpr>
								<!-- Capital als Konstante -->
							</Slot>
							<Slot property="marginalProfit">
								<ValueExpr language="Java JavaScript">
									this.agt.getLastUtilityPrice() - this.agt.getMC()
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									this.agt.getOutput() * ( 1 + this.agt.getPhi() * this.agt.getMarginalProfit()/ this.agt.getLastUtilityPrice() )
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									Math.min( this.agt.getCapacity(), this.agt.getOutput() )
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java">
									(this.agt.isCheat()) ? 40 : this.agt.getOutput()	
								</ValueExpr>
							</Slot>
							<Slot property="cheat" value="false" />
							<Call procedure="updateProduct" contextObjectVariable="agt"></Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="sellUtility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>
							Tries to sell utility to the market.
						</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">getAssetByName("Utility").getQuantity() > 0</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6Offer" receiverIdRefs="4">
								<Slot property="offer">
									<ValueExpr language="Java">new TradeOffer(){
										{
											setProduct("Utility");
											setQuantity(getAssetByName("Utility").getQuantity());
											setBuy(false);
											setBidderIdRef(getId());
										}
									}</ValueExpr>
									<ValueExpr language="JavaScript">
										this.agt.createOffer( "Utility", this.agt.getAssetByName("Utility").getQuantity(), false )
									</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Market">
				<documentation>
					<dc:description>
						Collects offers made by Firms and Persons and tries to match buy and sell offers.
					</dc:description>
				</documentation>
				<Attribute type="String" name="commodity"/>
				<Attribute name="currency" type="String" />
				<Attribute type="Float" name="supply"/>
				<Attribute type="Float" name="demand"/>
				<Attribute type="Float" name="lastMarketPrice"/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="clear" resultType="void">
					<documentation>
						<dc:description>abstract function</dc:description>
					</documentation>
					<Body language="Java JavaScript"></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BS6Offer" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Offers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6Offer" messageVariable="msg"/>
					<IF language="Java JavaScript">this.msg.getOffer().isBuy()</IF>
					<THEN>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddLast>
									<ItemExpr language="Java JavaScript">this.msg.getOffer()</ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddLast>
									<ItemExpr language="Java JavaScript">this.msg.getOffer()</ItemExpr>
								</AddLast>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</ELSE>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BS4Offer" agentVariable="m">
					<documentation>
						<dc:description></dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS4Offer" messageVariable="msg"/>
					<IF language="Java JavaScript">this.msg.getOffers().get(0).isBuy()</IF>
					<THEN>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</THEN>
					<ELSE>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</ELSE>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<DO>
						<UPDATE-AGT>
							<Call procedure="clear" contextObjectVariable="m">
							</Call>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Return_TradeOffers" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ObjectValueExpr objectVariable="o"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- =====================BS4=================== -->
			<AgentType name="BS4Market" superType="Market">
				<Function name="clear" resultType="void">
					<documentation>
						<dc:description>Calculates the market price and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[
						System.out.println("Com: " + getCommodity());
						getTransactions().clear();
						java.util.Comparator<sim.model.dataTypes.TradeOffer> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.TradeOffer>() {
							public int compare (sim.model.dataTypes.TradeOffer a, sim.model.dataTypes.TradeOffer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
								            return 0;	             		
							}		
						};
						java.util.Collections.sort(getBuyOffers(), comparator);
						java.util.Collections.sort(getSellOffers(), comparator);
						
						// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        
				        if ((getBuyOffers().size() == 0) || (getSellOffers().size() == 0) || (less(getBuyOffers().get(getBuyOffers().size()-1).getPrice(), getSellOffers().get(0).getPrice()))) {
				        	setDemand(getBuyOffers().size());
				        	setSupply(getSellOffers().size());
				        	getBuyOffers().clear();
				        	getSellOffers().clear();
				        	return;
				        }	        
				        // merge prices into sorted list, eliminating duplicates
        				java.util.ArrayList<Double> prices = new java.util.ArrayList<Double>(getBuyOffers().size() + getSellOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().size() && b < getBuyOffers().size()) {
				            if (equal(getSellOffers().get(s).getPrice(), getBuyOffers().get(b).getPrice())) {
				            	prices.add(getSellOffers().get(s++).getPrice());
				                b++;
				            } else if (getSellOffers().get(s).getPrice() < getBuyOffers().get(b).getPrice()){
                				prices.add(getSellOffers().get(s++).getPrice());
                			} else {
                				prices.add(getBuyOffers().get(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
                				s++;
							}
							// eliminate duplicates in buyOffers
							while (b < getBuyOffers().size() && equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
                				b++;
                			}
                		}
                		// then add the remainder if there is one
        				if (s < getSellOffers().size()){
           				 	while (s < getSellOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
				                	prices.add(getSellOffers().get(s).getPrice());
				                }
				                s++;
			            	}
			            } else if (b < getBuyOffers().size()) {
            				while (b < getBuyOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
				                    prices.add(getBuyOffers().get(b).getPrice());
				                }
				                b++;
				            }
            			}    			
            			// find the price(s) at which supply and demand intersect
				        double supply = 0, demand = 0;
				        // initialize demand to be the demand at lowest demand price
				        for (sim.model.dataTypes.TradeOffer o : getBuyOffers()){
				            demand += o.getQuantity();
				        }
				        // walk through prices, updating supply and demand as needed.
				        int p = 0;
				        double bestVolume = Double.NEGATIVE_INFINITY;
				        int bestP = 0;
				        for (s = -1, b = 0; s + 1 < getSellOffers().size() && b < getBuyOffers().size(); p++) {
				            // if prices[p] is the next supply price:
				            while (s + 1 < getSellOffers().size() && equal(prices.get(p), getSellOffers().get(s + 1).getPrice())){
				                supply += getSellOffers().get(++s).getQuantity();
				            }
				            // if the current demand price is less than prices[p]:
				            while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p))){
				                demand -= getBuyOffers().get(b++).getQuantity();
				            }
				            if (supply > demand) {
				                // volume = demand
				                if (demand > bestVolume) {
				                    bestVolume = demand;
				                    bestP = p;
				                }
				                break; // stop
				            } else if (supply > bestVolume) {
				            	// volume = supply here
				                bestVolume = supply;
				                bestP = p;
				            }
				        }
			      	  	/*
				         * If the above loop broke because the final supply price was reached,
				         * then supply at Price >= prices[p-1] remains constant. Thus, it is
				         * necessary to check whether demand at higher prices will ever become
				         * less than the current supply. If so, then that will be at the market
				         * price.
				         */
				         if (s + 1 == getSellOffers().size()) {
				            for (; b < getBuyOffers().size() && p < prices.size(); p++) {
				                while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p)))
				                    demand -= getBuyOffers().get(b++).getQuantity();
				
				                if (supply > demand) {
				                    // volume = demand
				                    if (demand > bestVolume) {
				                        bestVolume = demand;
				                        bestP = p;
				                    }
				                    break; // stop
				                } else if (supply > bestVolume) { 
				                	// volume = supply here
				                    bestVolume = supply;
				                    bestP = p;
				                }
				            }
				        }
				        /*
				         * If one of the loops broke because the next price was greater than the
				         * highest demand price, then the market price is set to the highest
				         * demand price in order to minimize shortage.
				         */
				        if (b == getBuyOffers().size()){
				            setLastMarketPrice(getBuyOffers().get(b - 1).getPrice());
				        }
				        /* If supply never crosses demand, set to highest supply price */
				        else if (p == prices.size()){
				            setLastMarketPrice(getBuyOffers().get(p - 1).getPrice());
				        }
				        /*
				         * Finally, if the loop broke because supply > demand, there are two
				         * valid prices that could be the market price: prices[p], which is the
				         * smallest price at which supply tops demand, or prices[p-1], which is
				         * the largest price at which demand tops supply. Since either price is
				         * valid, we select between them in an arbitrary, yet deterministic
				         * manner. However, if choosing between a two prices, one of which would
				         * not cause any transactions to occur, we choose the other price.
				         */
				        else {
				            if (p == 0) {
				                setLastMarketPrice(prices.get(p));
				            } else if (less(prices.get(p - 1), getSellOffers().get(0).getPrice())){
				                setLastMarketPrice(prices.get(p));
				            } else if (less(getBuyOffers().get(getBuyOffers().size() - 1).getPrice(), prices.get(p))){
				                setLastMarketPrice(prices.get(p - 1));
				            } else {
				                setLastMarketPrice(prices.get(bestP));
				            }
				        }
				        int seller = 0, buyer = getBuyOffers().size() - 1;
				        while (seller < getSellOffers().size() && buyer >= 0 && !less(getLastMarketPrice(), getSellOffers().get(seller).getPrice()) && !less(getBuyOffers().get(buyer).getPrice(), getLastMarketPrice())) 
						{	
							getSellOffers().get(seller).setPrice(getLastMarketPrice());
							getTransactions().add(getSellOffers().get(seller));
							seller++;
							getBuyOffers().get(buyer).setPrice(getLastMarketPrice());
							getTransactions().add(getBuyOffers().get(buyer));
							buyer--;
				        }
						// reset offer lists and set statistic variables
				        setDemand(getBuyOffers().size());
				        setSupply(getSellOffers().size());
				        getBuyOffers().clear();
				        getSellOffers().clear();
				        System.out.println("demand: " + getDemand());
				        System.out.println("supply: " + getSupply());
				        System.out.println("trans: " + getTransactions().size());
				        System.out.println("price: " + getLastMarketPrice());
					]]></Body>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="JavaScript"><![CDATA[
						this.getTransactions().clear();
						var buyOffers = this.getBuyOffers();
						var sellOffers = this.getSellOffers();
						
						var comparator = function(a, b) {
							var p1 = a.getPrice();
							var p2 = b.getPrice();
							
							if (p1 < p2) return -1;
							if (p1 > p2) return 1;
										return 0;	
						}
						
						buyOffers.sort(comparator);
						sellOffers.sort(comparator);
						
						// handle special cases
						// highest buy price < lowest sell price -> no transactions OR
						// empty offer list -> no transactions
						
						if ((buyOffers.size() == 0) || (sellOffers.size() == 0) || (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), sellOffers.get(0).getPrice()))) {
							this.setDemand(buyOffers.size());
							this.setSupply(sellOffers.size());
							buyOffers.clear();
							sellOffers.clear();
							return;
						}
						
						// merge prices into sorted list, eliminating duplicates
						var prices = new js.util.ArrayList();
						var s = 0, b = 0;
						while (s < sellOffers.size() && b < buyOffers.size()) {
							if (this.equal(sellOffers.get(s).getPrice(), buyOffers.get(b).getPrice())) {
								prices.add(sellOffers.get(s++).getPrice());
								b++;
							} else if (sellOffers.get(s).getPrice() < buyOffers.get(b).getPrice()){
								prices.add(sellOffers.get(s++).getPrice());
							} else {
								prices.add(buyOffers.get(b++).getPrice());
							}
							// eliminate duplicates in sellOffers
							while (s < sellOffers.size() && this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
								s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < buyOffers.size() && this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
								b++;
							}
						}
						// then add the remainder if there is one
						if (s < sellOffers.size()) {
								while (s < sellOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
									prices.add(sellOffers.get(s).getPrice());
								}
								s++;
							}
						} else if (b < buyOffers.size()) {
							while (b < buyOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
									prices.add(buyOffers.get(b).getPrice());
								}
								b++;
							}
						}
						// find the price(s) at which supply and demand intersect
						var supply = 0, demand = 0;
						
						// initialize demand to be the demand at lowest demand price
						for (var o = 0; o < buyOffers.size(); o++) { 
							var tradeOffer = buyOffers.get(o);
							demand += tradeOffer.getQuantity();
						}
						
						// walk through prices, updating supply and demand as needed.
						var p = 0;
						var bestVolume = Number.NEGATIVE_INFINITY;
						var bestP = 0;
						for (s = -1, b = 0; s + 1 < sellOffers.size() && b < buyOffers.size(); p++) {
							// if prices.get(p) is the next supply price:
							while (s + 1 < sellOffers.size() && this.equal(prices.get(p), sellOffers.get(s + 1).getPrice())) {
								supply += sellOffers.get(++s).getQuantity();
							}
							// if the current demand price is less than prices.get(p):
							while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p))) {
								demand -= buyOffers.get(b++).getQuantity();
							}
							if (supply > demand) {
								// volume = demand
								if (demand > bestVolume) {
									bestVolume = demand;
									bestP = p;
								}
								break; // stop
							} else if (supply > bestVolume) {
								// volume = supply here
								bestVolume = supply;
								bestP = p;
							}
						}
						/*
						 * If the above loop broke because the final supply price was reached,
						 * then supply at Price >= prices.get(p-1) remains constant. Thus, it is
						 * necessary to check whether demand at higher prices will ever become
						 * less than the current supply. If so, then that will be at the market
						 * price.
						 */
						 if (s + 1 == sellOffers.size()) {
							for (; b < buyOffers.size() && p < prices.size(); p++) {
								while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p)))
									demand -= buyOffers.get(b++).getQuantity();
				
								if (supply > demand) {
									// volume = demand
									if (demand > bestVolume) {
										bestVolume = demand;
										bestP = p;
									}
									break; // stop
								} else if (supply > bestVolume) { 
									// volume = supply here
									bestVolume = supply;
									bestP = p;
								}
							}
						}
						/*
						 * If one of the loops broke because the next price was greater than the
						 * highest demand price, then the market price is set to the highest
						 * demand price in order to minimize shortage.
						 */
						if (b == buyOffers.size()) {
							this.setLastMarketPrice(buyOffers.get(b - 1).getPrice());
						}
						/* If supply never crosses demand, set to highest supply price */
						else if (p == prices.size()) {
							this.setLastMarketPrice(buyOffers.get(p - 1).getPrice());
						}
						/*
						 * Finally, if the loop broke because supply > demand, there are two
						 * valid prices that could be the market price: prices.get(p), which is the
						 * smallest price at which supply tops demand, or prices.get(p-1), which is
						 * the largest price at which demand tops supply. Since either price is
						 * valid, we select between them in an arbitrary, yet deterministic
						 * manner. However, if choosing between a two prices, one of which would
						 * not cause any transactions to occur, we choose the other price.
						 */
						else {
							if (p == 0) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(prices.get(p - 1), sellOffers.get(0).getPrice())) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), prices.get(p))) {
								this.setLastMarketPrice(prices.get(p - 1));
							} else {
								this.setLastMarketPrice(prices.get(bestP));
							}
						}
						var seller = 0, buyer = buyOffers.size() - 1;
						while (seller < sellOffers.size() && buyer >= 0	&& !this.less(this.getLastMarketPrice(), sellOffers.get(seller).getPrice()) && !this.less(buyOffers.get(buyer).getPrice(), this.getLastMarketPrice())) 
						{	
							sellOffers.get(seller).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(sellOffers.get(seller));
							seller++;
							buyOffers.get(buyer).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(buyOffers.get(buyer));
							buyer--;
						}
						// reset offer lists and set statistic variables
						this.setDemand(buyOffers.size());
						this.setSupply(sellOffers.size());
						buyOffers.clear();
						sellOffers.clear();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Check if the two Inputparameters are equal</dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						if (a + 1e-5 < b) 
							return false;
						else if (a - 1e-5 > b) 
							return false;
						else
							return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>checks if a less b </dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						return (a + 1e-5 < b);
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS4ContinuousCommodityMarket" superType="BS4Market" />
			<!-- ============================================ -->
			<AgentType name="BS4DiscreteCommodityMarket" superType="BS4Market" />
			<!-- =====================BS6=================== -->
			<AgentType name="BS6Market" superType="Market" />
			<!-- ============================================ -->
			<AgentType name="BS6ConsumerMarket" superType="BS6Market">
				<Attribute type="Float" name="zeta" initialValue="0.1" />
				<Attribute type="Float" name="initLow"/>
				<Attribute type="Float" name="initHigh"/>
				<Attribute type="Boolean" name="cheat" initialValue="true"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="clear" resultType="void">
					<documentation>
						<dc:description>Calculates the market price and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[
						getTransactions().clear();
						setDemand(0);
						setSupply(0);
						double low;
						double high;
						double supply = 0;
						double demand = 0;
						double price = 0;
						if(isCheat()){
							setCheat(false);
							low = getInitLow();
							high = getInitHigh();
						} else {
							low = getLastMarketPrice() * (1 - getZeta());
							high = getLastMarketPrice() * (1 + getZeta());
						}
						for(TradeOffer offer : getSellOffers()){
							supply +=  offer.getQuantity();
						}
						while(true){
							price = (low + high) / 2;
							for(TradeOffer offer : getBuyOffers()){
								if(offer.getProduct().equals("Food")){
									demand += Math.max(offer.getQuantity() / price, offer.getMin());
								}else{
									demand += offer.getQuantity() / price;
								}
							}
							if(Math.abs(demand - supply) < 0.1 || Math.abs(high - low) < 0.01) break;
							
							if(demand > supply){
								low = price;
							}
							else{
								high = price;
							}
						}
						for(TradeOffer offer : getBuyOffers()){
							offer.setPrice(price);
						}
						for(TradeOffer offer : getSellOffers()){
							offer.setPrice(price);
						}
						getTransactions().addAll(getBuyOffers());
						getTransactions().addAll(getSellOffers());
						getBuyOffers().clear();
						getSellOffers().clear();
						setLastMarketPrice(price);
						setSupply(supply);
						setDemand(demand);
						]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getTransactions().clear();
						this.setDemand(0);
						this.setSupply(0);
						var low;
						var high;
						var supply = 0;
						var demand = 0;
						var price = 0;
						var buyOffers = this.getBuyOffers();
						var sellOffers = this.getSellOffers();
						if(this.isCheat()){
							this.setCheat(false);
							low = this.getInitLow();
							high = this.getInitHigh();
						} else {
							low = this.getLastMarketPrice() * (1 - this.getZeta());
							high = this.getLastMarketPrice() * (1 + this.getZeta());
						}
						/*for(var offer in this.getSellOffers()){
							supply +=  offer.getQuantity();
						}*/
						for(var i=0; i < sellOffers.size();i++ ){
							supply += sellOffers.get(i).getQuantity();
						}
						while(true){
							price = (low + high) / 2;
							/*for(var offer in this.getBuyOffers()){
								if(offer.getProduct().equals("Food")){
									demand += Math.max(offer.getQuantity() / price, offer.getMin());
								}else{
									demand += offer.getQuantity() / price;
								}
							}*/
							for(var i=0;i<buyOffers.size();i++){
								var offer = buyOffers.get(i); 
								if( offer.getProduct() === "Food"){
									demand += Math.max(offer.getQuantity() / price, offer.getMin());
								}else{
									demand += offer.getQuantity() / price;
								}
							}
							if(Math.abs(demand - supply) < 0.1 || Math.abs(high - low) < 0.01) break;
							
							if(demand > supply){
								low = price;
							}
							else{
								high = price;
							}
						}
						/*for(var offer in this.getBuyOffers()){
							offer.setPrice(price);
						}
						for(var offer in this.getSellOffers()){
							offer.setPrice(price);
						}*/
						for(var i=0;i<buyOffers.size();i++){
							buyOffers.get(i).setPrice(price);
						}
						for(var i=0;i<sellOffers.size();i++){
							sellOffers.get(i).setPrice(price);
						}
						this.getTransactions().addAll(this.getBuyOffers());
						this.getTransactions().addAll(this.getSellOffers());
						this.getBuyOffers().clear();
						this.getSellOffers().clear();
						this.setLastMarketPrice(price);
						this.setSupply(supply);
						this.setDemand(demand);
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6LaborMarket" superType="BS6Market">
				<documentation>
					<dc:description>Calculates the market price and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
				</documentation>
				<Attribute type="Float" name="totalBudget"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="clear" resultType="void">
					<Body language="Java"><![CDATA[
						getTransactions().clear();
						setDemand(0);
						setSupply(0);
						java.util.Collections.shuffle( getBuyOffers(), new java.util.Random() );
						java.util.Collections.shuffle( getSellOffers(), new java.util.Random() );
						int low = 0;
						double sum = 0;
						for (TradeOffer employer : getBuyOffers()) {
							sum += employer.getQuantity();
							int high =(int) (Math.min(1, sum / getTotalBudget()) * getSellOffers().size());
							double wage = employer.getQuantity() / (high - low);
							for (int i = low; i < high; i++) {
								sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(true);
				            	o.setBidderIdRef(employer.getBidderIdRef());
				            	getTransactions().add(o);
				            	setDemand(getDemand() + 1);
				            	o = new sim.model.dataTypes.TradeOffer();
				            	o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(false);
				            	o.setBidderIdRef(getSellOffers().get(i).getBidderIdRef());
				            	getTransactions().add(o); 
				            	setSupply(getSupply() + 1);
				            	setLastMarketPrice(wage);
							}
							low = high;
						}
						setTotalBudget(0);
						getBuyOffers().clear();
						getSellOffers().clear();
						]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getTransactions().clear();
						this.setDemand(0);
						this.setSupply(0);
						this.getBuyOffers().sort(function() {return 0.5 - Math.random()});
						this.getSellOffers().sort(function() {return 0.5 - Math.random()});
						var low = 0;
						var sum = 0;
						for ( var i = 0; i < this.getBuyOffers().size(); i++) {
							var employer = this.getBuyOffers().get(i);
							sum += employer.getQuantity();
							var high = Math.floor(Math.min(1, sum / this.getTotalBudget()) * this.getSellOffers().size());
							var wage = employer.getQuantity() / (high - low);
							for (var j = low; j < high; j++) {
								var o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(true);
				            	o.setBidderIdRef( employer.getBidderIdRef() );
				            	this.getTransactions().add(o);
				            	this.setDemand(this.getDemand() + 1);
				            	o = new sim.model.dataTypes.TradeOffer();
				            	o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(false);
				            	o.setBidderIdRef( this.getSellOffers().get(j).getBidderIdRef() );
				            	this.getTransactions().add(o); 
				            	this.setSupply(this.getSupply() + 1);
				            	this.setLastMarketPrice(wage);
							}
							low = high;
						}
						this.setTotalBudget(0);
						this.getBuyOffers().clear();
						this.getSellOffers().clear();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="TotalBudget_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Offers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6Offer" messageVariable="msg"/>
					<IF language="Java JavaScript">this.msg.getOffer().isBuy()</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="totalBudget">
								<ValueExpr language="Java JavaScript">this.agt.getTotalBudget() + this.msg.getOffer().getQuantity()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
			</AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- BS6 Init -->
		<EnvironmentRule name="Create_InitialBuyOffers_ER">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<FOR-ObjectVariable variable="f" objectType="BS6Firm" />
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="m">
						<MultiValuedSlot property="buyOffers">
							<AddLast><ItemExpr language="Java">new TradeOffer(){
								{
									setProduct("Labor");
									setQuantity(f.getWageBudget());
									setBuy(true);
									setBidderIdRef(f.getId());
								}
								}</ItemExpr>
								<ItemExpr language="JavaScript">
									this.f.createOffer("Labor", this.f.getWageBudget(), true)
								</ItemExpr></AddLast>
						</MultiValuedSlot>
						<Slot property="totalBudget">
							<ValueExpr language="Java JavaScript">this.m.getTotalBudget() + this.f.getWageBudget()</ValueExpr>
						</Slot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<!-- ===================================== -->
		<EnvironmentRule name="Create_InitialSellOffers_ER">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<FOR-ObjectVariable variable="p" objectType="BS6Person" />
			<DO>
				<UPDATE-ENV>
					<UpdateObject objectVariable="m">
						<MultiValuedSlot property="sellOffers">
							<AddLast><ItemExpr language="Java">new TradeOffer(){
								{
									setProduct("Labor");
									setQuantity(1);
									setBuy(false);
									setBidderIdRef(p.getId());
								}
								}</ItemExpr><ItemExpr language="JavaScript">
									this.p.createOffer("Labor", 1, false)
								</ItemExpr></AddLast>
						</MultiValuedSlot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<!-- ===================================== -->
		<EnvironmentRule name="Initial_Clear_LaborMarket_ER">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<DO>
				<UPDATE-ENV>
					<Call procedure="clear" contextObjectVariable="m" />
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<!-- ===================================== -->
		<EnvironmentRule name="Initial_Send_MatchingOffers_ER">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket"></FOR-ObjectVariable>
			<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
				<ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
			</FOR-ListItemVariable>
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="MatchingOffer">
						<SenderIdRef language="Java JavaScript">this.m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
						<Slot property="offer">
							<ObjectValueExpr objectVariable="o"/>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- BS4 Init -->
		<EnvironmentRule name="Initialize_Ownership_ER">
			<documentation>
				<dc:description>Finds an owner for all firms(BS4 only)</dc:description>
			</documentation>
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="f" objectType="BS4Firm" />
			<FOR-ObjectVariable variable="o" objectType="BS4Owner" />
			<IF language="Java JavaScript"><![CDATA[ (this.o.getFirm() == null) && (this.f.getOwner() == null) ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner"><ObjectValueExpr objectVariable="o"/></Slot>
					</UpdateObject>
					<UpdateObject objectVariable="o">
						<Slot property="firm"><ObjectValueExpr objectVariable="f"/></Slot>
					</UpdateObject>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- Day -->
		<EnvironmentRule name="AtStartOfDayEat_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Every person tries to eat, if he can't then he dies</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR-ObjectVariable variable="p" objectType="Person" />
			<IF language="Java JavaScript"><![CDATA[ this.p.getAssetByName("Food").withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT() ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject><ObjectIdRef language="Java JavaScript">this.p.getId()</ObjectIdRef></DestroyObject>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="CheckBankrupt_ER"><!--<BS4 only>-->
			<documentation>
				<dc:description>If a farm has no more money, food and labor or a factory has no more money, utility and labor , it is shut down(BS4 only)</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR-ObjectVariable variable="f" objectType="Firm" />
			<IF language="Java"><![CDATA[ ( ( this.f.getClass() == BS4Farm.class && this.f.getAssetByName("Food").getQuantity() == 0.0) 
												|| (this.f.getClass() == BS4Factory.class && this.f.getAssetByName("Utility").getQuantity() == 0.0)
											) && this.f.getAssetByName("Labor").getQuantity() == 0.0 && this.f.getAssetByName("Money").getQuantity() == 0.0 ]]></IF>
			<IF language="JavaScript">false</IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject objectVariable="f"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule_ER">
			<!-- ====================================== -->
			<documentation>
				<dc:description>
				 For all markets that exist, the market price of the last day is send to every person and firm
				</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay"/>
			<FOR-ObjectVariable variable="m" objectType="Market" />
			<FOR-ObjectVariable variable="e" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="StartOfDay_Notification">
					    <SenderIdRef language="Java JavaScript">this.m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java JavaScript">this.e.getId()</ReceiverIdRef>
						<Slot property="price">
							<PropertyValueExpr entityVariable="m" property="lastMarketPrice"/>
						</Slot>
						<Slot property="marketType">
							<PropertyValueExpr entityVariable="m" property="commodity"/>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="StartWork_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Act_msg is sent to every person and firm, which signals them to being with their work.</dc:description>
			</documentation>
			<WHEN eventType="StartWork"/>
			<FOR-ObjectVariable variable="e" objectType="EconomicAgent"></FOR-ObjectVariable>
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.e.getId()</ReceiverIdRef>
					</InMessageEventExpr>
					<!-- Act aufteilen-->
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>	
		<!-- ===================================== -->
		<EnvironmentRule name="CloseMarket_ER">
		<!-- ===================================== -->
			<documentation>
				<dc:description>ClearMarket is send to every market, which ends the trading day.</dc:description>
			</documentation>
			<WHEN eventType="CloseMarket"/>
			<FOR-ObjectVariable variable="m" objectType="Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
	</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
		<!-- BS4 Agents -->
		<!--<Agent name="FoodMarket" id="2" type="BS4ContinuousCommodityMarket">
			<Slot property="lastMarketPrice" value="0.2" />
			<Slot property="commodity" value="Food" />
			<Slot property="currency" value="Money" />
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent name="LaborMarket" id="3" type="BS4ContinuousCommodityMarket">			
			<Slot property="lastMarketPrice" value="0.4" />
			<Slot property="commodity" value="Labor" />
			<Slot property="currency" value="Money" />
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent name="UtilityMarket" id="4" type="BS4DiscreteCommodityMarket">	
			<Slot property="lastMarketPrice" value="1.0" />
			<Slot property="commodity" value="Utility" />
			<Slot property="currency" value="Money" />
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agents type="BS4Laborer" rangeStartID="1000" rangeEndID="1174">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
						{
							add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
						}
				} ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="EAT_AMOUNT" value="1.0" />
			<Slot property="TARGET_FOOD_STOCK" value="30.0" />
			<Slot property="TARGET_MONEY_STOCK" value="60.0" />
		</Agents>
		<Agents type="BS4Owner" rangeStartID="2000" rangeEndID="2009">		
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="EAT_AMOUNT" value="1.0" />
			<Slot property="TARGET_FOOD_STOCK" value="30.0" />
			<Slot property="TARGET_MONEY_STOCK" value="60.0" />
			<Slot property="TARGET_FIRM_MONEY_STOCK" value="100.0" />
			<Slot property="firm" value="null"></Slot>
		</Agents>
		<Agents type="BS4Farm" rangeStartID="3000" rangeEndID="3004">	
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="TARGET_FOOD_STOCK" value="120.0"/>
			<Slot property="TARGET_OWNER_FOOD_STOCK" value="30.0"/>
		</Agents>
		<Agents type="BS4Factory" rangeStartID="4000" rangeEndID="4004">		
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					  {	
						add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 5));;
					  }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(00.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 5))
				]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agents>-->
		<!-- BS6 Agents -->
		<Agent name="BS6FoodMarket" type="BS6ConsumerMarket" id="2">
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="commodity" value="Food" />
			<Slot property="currency" value="Money" />
			<Slot property="initLow" value="0.1" />
			<Slot property="initHigh" value="5.0" />
			<Slot property="lastMarketPrice" value="0.2" />
		</Agent>
		<Agent name="BS6UtilityMarket" type="BS6ConsumerMarket" id="4">
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="commodity" value="Utility" />
			<Slot property="currency" value="Money" />
			<Slot property="initLow" value="0.1" />
			<Slot property="initHigh" value="5.0" />
			<Slot property="lastMarketPrice" value="1.0" />
		</Agent>
		<Agent type="BS6LaborMarket" id="3">
			<Slot property="commodity" value="Labor" />
			<Slot property="currency" value="Money" />
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="lastMarketPrice" value="0.4" />
		</Agent>
		<Agents type="BS6Laborer" rangeStartID="5000" rangeEndID="5449">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
						{
							add(new aors.util.economics.ContinuousQuantity(15.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Utility", "Stk")));
						}
				} ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(15.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Utility", "Stk")))
				]]></ValueExpr>
			</Slot>
			<Slot property="EAT_AMOUNT" value="1.0" />
			<Slot property="TARGET_FOOD_STOCK" value="26.0" />
			<Slot property="savingRate" value="0.9" />
		</Agents>
		<Agents type="BS6Farm" rangeStartID="6000" rangeEndID="6009">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					        {
					            add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
					        }
					    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")))
				]]></ValueExpr>
			</Slot>
			<Slot property="A" value="2"></Slot>
			<Slot property="beta" value="0.5"></Slot>
			<Slot property="phi" value="0.5"></Slot>
			<Slot property="lambda" value="0.2"></Slot>
			<Slot property="eUrilThreshold" value="0.9"></Slot>
			<Slot property="rUtilThreshold" value="0.75"></Slot>
			<Slot property="output" value="60"></Slot>
			<Slot property="wageBudget" value="100"></Slot>
			<Slot property="loan" value="1000"></Slot>
			<Slot property="capitalCost" value="0"></Slot>
		</Agents>
		<Agents type="BS6Factory" rangeStartID="7000" rangeEndID="7009">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					        {
								add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Utility", "Stk")));
					        }
					    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Utility", "Stk")))
				]]></ValueExpr>
			</Slot>
			<Slot property="A" value="2"></Slot>
			<Slot property="beta" value="0.5"></Slot>
			<Slot property="phi" value="0.5"></Slot>
			<Slot property="lambda" value="0.2"></Slot>
			<Slot property="eUrilThreshold" value="0.9"></Slot>
			<Slot property="rUtilThreshold" value="0.75"></Slot>
			<Slot property="output" value="40"></Slot>
			<Slot property="wageBudget" value="100"></Slot>
			<Slot property="loan" value="0"></Slot>
			<Slot property="capitalCost" value="0"></Slot>
			</Agents>
		<ExogenousEvent type="Init" occurrenceTime="1" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="3" type="StartWork" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="6" type="CloseMarket" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface supportedLanguages="en">
		<StatisticsUI>
			<StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">FoodPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the foodmarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">LaborPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the labormarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
				</StatisticsVariableUI>
			<StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">UtilityPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the utilitymarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for utility</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
		</StatisticsUI>
		<AnimationUI>
			<DisplayDescription>
				<aors:HtmlText xmlns="http://www.w3.org/1999/xhtml"><p>This is just an experimental<br/>
				visualization!</p></aors:HtmlText>
			</DisplayDescription>
			
			<Views>
				<ObjectView objectType="Laborer">
					<Shape2D y="400">
						<Rectangle width="4" height="10" fill="blue">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-6000" a1="6"/>
<!--
							<ShapePropertyVisualizationMap shapeProperty="fillR" property="moneyAmount" mapType="polynomial" a1="1"/>
-->
						</Rectangle>
					</Shape2D>
				</ObjectView>
				<ObjectView objectType="Farm">
					<Shape2D y="50">
						<Rectangle width="30" positioning="LeftBottom" texture="backgrounds\GreenLeaves.jpg">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-150000" a1="50"/>
							<ShapePropertyVisualizationMap shapeProperty="height" property="amountProduced" mapType="polynomial" a0="20" a1="2"/>
						</Rectangle>
					</Shape2D>
				</ObjectView>
				<ObjectView objectType="Factory">
					<Shape2D y="250">
						<Rectangle width="40" positioning="LeftBottom" texture="backgrounds\LightgrayMarble.jpg">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-200000" a1="50"/>
							<ShapePropertyVisualizationMap shapeProperty="height" property="amountProduced" mapType="polynomial" a0="20" a1="2"/>
						</Rectangle>
					</Shape2D>
				</ObjectView>
			</Views>
		</AnimationUI>		
	</UserInterface>
</SimulationScenario>
