<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="prettyprint.xsl"?>

<SimulationScenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://aor-simulation.org ../../../AORSL/AORSL_0-8-4.xsd"
 xmlns="http://aor-simulation.org"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:aors="http://aor-simulation.org"
 version="0.8.4"
 scenarioName="MinEcon_LaborFoodUtility_Scenario1"
 scenarioTitle="Minimal Economy with a Labor, Food and Utility Market"
 simulationManagerDirectory="../../..">

	<SimulationParameters simulationSteps="3000" timeUnit="h"  stepTimeDelay="0" randomSeed="47"/>
	<SimulationModel modelName="MinEcon_LaborFoodUtility">
		<documentation>
			<dc:title>Minimal Economy with a Labor, Food and Utility Market</dc:title>
			<dc:title xml:lang="de">Minimale Volkswirtschaft mit Arbeits-, Nahrungsmittel- und Luxusgütermarkt</dc:title>
			<dc:subject>Agent-based computational economics</dc:subject>
			<dc:subject xml:lang="de">Wirtschaftssimulation</dc:subject>
			<dc:creator>Lars Langjahr</dc:creator>
			<dc:created>20101031</dc:created>
			<dc:contributor>Gerd Wagner</dc:contributor>
			<dc:contributor>Gabriel Diaconita</dc:contributor>
			<dc:modified>20101203</dc:modified>
			<dc:source>The "Baseline 4" model created by Michael Adelson, Chris Rucinski, and Cody Wang in the 
				"Economics via Object-oriented Simulation" (EOS) project (see http://eos.cs.princeton.edu/) 
				led by Ken Steiglitz, Princeton University, and Michael Honig, Northwestern University.  
			</dc:source>
			<aors:shortDescription xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				Simulates an economy with three goods: labor, food, and "utility", and four types of economic agents: 
				laborers, firm owners, farms, and utility factories. 
			</aors:shortDescription>
			<aors:shortDescription xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
				Simuliert eine Volkswirtschaft mit drei Gütern: Arbeit, Nahrung und einem abstrakten Luxusgut, 
				sowie vier Arten von ökonomischen Agenten: Arbeiter, Firmenbesitzer, Bauernhöfe und Luxusgutfabriken. 
			</aors:shortDescription>
			<aors:description xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
				This model simulates an economy with three commodities: labor, food, and "utility", 
				and four types of economic agents: laborers, firm owners, farms, and utility factories. 
				Laborers are allotted a certain amount of labor at each step, which they can sell to a 
				firm. Laborers can also buy food and utility on the open market with the 
				money that they have earned. Owners simply own a farm or a factory, and collect the profits 
				from these endeavors, which they use to purchase food and utility. Farms hire laborers to 
				produce food, and then sell this food on the open market, giving any profits to their 
				owners. Utility factories operate in the same manner, but produce utility instead of food. 
				Laborer and owners must consume a sufficient quantity of food	at each step or they die. 
				They also seek to purchase utility, which effectively represents all non-essential, 
				desirable goods, with any amount of retained earnings above their target stock.
				For more information, see <a href="http://eos.cs.princeton.edu/DeLuise_JIW05.27.10.pdf">Developing 
				a Micro-Validated Baseline for the EOS Framework</a> by Anthony M. DeLuise.
			</aors:description>
			<aors:description xml:lang="de" xmlns="http://www.w3.org/1999/xhtml">
				Dieses Modell simuliert eine Volkswirtschaft mit drei Gütern: Arbeit, Nahrung und einem 
				abstrakten Luxusgut, sowie vier Arten von ökonomischen Agenten: Arbeiter, Firmenbesitzer, 
				Bauernhöfe und Luxusgüterfabriken. Arbeiter verfügen in jedem Simulationsschritt über eine 
				gewisse Menge and Arbeitskraft, die sie an eine Firma verkaufen können.
				Sie können dann mit dem verdienten Geld Nahrung und Luxusgüter auf dem offenen Markt kaufen.
				Firmenbesitzer beziehen Einkünfte aus den Gewinnen ihrer Firmen, mit denen
				sie Nahrung und Luxusgüter kaufen. Bauernhöfe 
				beschäftigen Arbeiter, um Nahrung herzustellen, die sie dann auf dem offenen Markt verkaufen. 
				Die dabei anfallenden Gewinne gehen an ihre Besitzer. Luxusgüterfabriken operieren in derselben
				Weise, außer dass sie Luxusgüter anstatt Nahrung produzieren.	Arbeiter und Firmenbesitzer
				müssen in jedem Schritt eine ausreichende Menge an Nahrung konsumieren, um nicht zu sterben. 
				Mit ihrem überschüssigen Geld kaufen sie Luxusgüter. 
				Weitere Informationen können folgendem Artikel entnommen werden:  
				<a href="http://eos.cs.princeton.edu/DeLuise_JIW05.27.10.pdf">Developing 
				a Micro-Validated Baseline for the EOS Framework</a> by Anthony M. DeLuise.
			</aors:description>
			<informationModelDiagram>EOS.png</informationModelDiagram>
			<dc:license>Creative Commons Attribution-NonCommercial-ShareAlike 3.0, 
				see http://creativecommons.org/licenses/by-nc-sa/3.0/</dc:license>
		</documentation>
		
		<Statistics>
			<!--<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="2"/>
				</Source>
			</Variable>
			<Variable name="PriceLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="SellOffersLabor" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="3"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="lastMarketPrice" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="buyVolume" objectType="Market" objectIdRef="4"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="sellVolume" objectType="Market" objectIdRef="4"/>
				</Source>
				</Variable>-->
			<Variable name="PriceFood" dataType="Float">	
				<Source>
					<ObjectProperty property="mktPrice" objectType="BS6ConsumerMarket" objectIdRef="10"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="mktDemand" objectType="BS6ConsumerMarket" objectIdRef="10"/>
				</Source>
			</Variable>
			<Variable name="SellOffersFood" dataType="Float">	
				<Source>
					<ObjectProperty property="mktSupply" objectType="BS6ConsumerMarket" objectIdRef="10"/>
				</Source>
			</Variable>
			<Variable name="PriceUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="mktPrice" objectType="BS6ConsumerMarket" objectIdRef="11"/>
				</Source>
			</Variable>
			<Variable name="BuyOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="mktDemand" objectType="BS6ConsumerMarket" objectIdRef="11"/>
				</Source>
			</Variable>
			<Variable name="SellOffersUtility" dataType="Float">	
				<Source>
					<ObjectProperty property="mktSupply" objectType="BS6ConsumerMarket" objectIdRef="11"/>
				</Source>
			</Variable>
		</Statistics>
		
		<DataTypes>
			<!--====================================-->
			<ComplexDataType name="TradeOffer">
			<!--====================================-->
				<Attribute name="product" type="String"/>
				<Attribute name="price" type="Float"/>
				<Attribute name="Quantity" type="Float"/>
				<Attribute name="buy" type="Boolean"/>
				<Attribute name="bidderIdRef" type="Integer" />
				<Attribute type="Float" name="min"/><!-- BS6 -->
				<!--<ReferenceProperty name="bidder" type="EconomicAgent"/>-->
			</ComplexDataType>
		</DataTypes>
		<Globals>
			<GlobalFunction name="hallo" resultType="String">
				<Parameter name="text" type="String"/>
				<Body language="Java">
					System.out.println("Hallo: " + text);
					return text;
				</Body>
			</GlobalFunction>
			
		</Globals>
		<EntityTypes>
			<!--====================================-->
			<MessageType name="StartOfDay_Notification">
				<!--====================================-->
				<Attribute name="price" type="Float"/>
				<Attribute name="marketType" type="String" />
			</MessageType>
			<!--====================================-->
			<MessageType name="Act_msg" />
			<!--====================================-->
			<MessageType name="OfferToBuyFood">
			<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellFood">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyLabor">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellLabor">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToBuyUtility">
				<!--====================================-->
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="OfferToSellUtility">
				<!--====================================-->
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
			</MessageType>
			<!--====================================-->
			<MessageType name="ClearMarket" />
			<!--====================================-->
			<MessageType name="MatchingOffer" >
				<!--====================================-->
				<ComplexDataProperty name="offer" type="TradeOffer"/>
			</MessageType>
			<!-- =================================== -->
			<MessageType name="BS6OfferToBuy">
				<Attribute type="String" name="product"/>
				<Attribute type="Integer" name="bidderIdRef"/>
				<Attribute type="Float" name="demand"/>
				<Attribute type="Float" name="min"/>
			</MessageType>
			<!-- =================================== -->
			<MessageType name="BS6OfferToSell">
				<Attribute type="String" name="product"/>
				<Attribute type="Integer" name="bidderIdRef"/>
				<Attribute type="Float" name="quantity"/>
			</MessageType>
			<!-- =================================== -->
			<ExogenousEventType name="Init" />
			<!--=======================================================-->
			<ExogenousEventType name="StartOfDay" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="StartWork" periodicity="9" />
			<!--=======================================================-->
			<ExogenousEventType name="CloseMarket" periodicity="9" />
			<!--=======================================================-->
			<AgentType name="EconomicAgent">
			<!-- ============================================ -->
				<documentation><description>A Laborer produces LABOR_ALLOWANCE of labor each timestep.</description></documentation>
				<ComplexDataProperty name="assets" type="aors.util.economics.Quantity" upperMultiplicity="unbounded"/>
				<Attribute name="LABOR_ALLOWANCE" type="Float" initialValue="1.0"/>
				<Attribute name="RANDOM_FACTOR" type="Float" initialValue="0.01"/>
				<Attribute name="lastFoodPrice" type="Float"  initialValue="0"/>
				<Attribute name="lastLaborPrice" type="Float"  initialValue="0"/>
				<Attribute name="lastUtilityPrice" type="Float"  initialValue="0"/>
				<Attribute type="String" name="hallo"/>
				<!--====================================-->
				<Function name="getAssetByName" resultType="aors.util.economics.Quantity">
					<documentation>
						<dc:description>Finds an asset from the AssetsList by String</dc:description>
					</documentation>
					<Parameter name="name" type="String"/>
					<Body language="Java"><![CDATA[
						int i;
						aors.util.ArrayListInterface<aors.util.economics.Quantity> assets = getAssets();
						for (i=0; i < assets.size(); i++){
							if (!assets.get(i).isDiscrete()) {
								if (((aors.util.economics.ContinuousQuantity )assets.get(i)).getContinuousQuantityType().getName().equals(name)){
									break;
								}
							} else {
								if (((aors.util.economics.DiscreteQuantity )assets.get(i)).getType().equals(name)){
									break;
								}
							}
						}
						return assets.get(i);
					]]></Body>	
					<Body language="JavaScript"><![CDATA[
						var i;
						var assets = this.getAssets();
						for (i=0; i < assets.size(); i++){
							if (!assets.get(i).isDiscrete()) {
								if (assets.get(i).getContinuousQuantityType().getName() === name) break;
							} else {
								if (assets.get(i).getType() === name) break;
							}
						}
						return assets.get(i);
					]]></Body>	
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Food_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the food market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Food")</IF> 
					<IF language="JavaScript">this.msg.getMarketType() === "Food"</IF> 
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastFoodPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Labor_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the labor market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Labor")</IF>
					<IF language="JavaScript">this.msg.getMarketType() === "Labor"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastLaborPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="StartOfDay_Utility_Rule">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>The price of the utility market is updated</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="StartOfDay_Notification" messageVariable="msg"/>
					<IF language="Java">this.msg.getMarketType().equals("Utility")</IF>
					<IF language="JavaScript">this.msg.getMarketType() === "Utility"</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="lastUtilityPrice">
								<PropertyValueExpr entityVariable="msg" property="price"/>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Money_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the money amount is updated by the quantity times the price of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("DepositMoneyRule")</ValueExpr></Slot>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Money_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the money amount is updated by the quantity times the price of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType().equals("Money") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.asset.getType() === "Money" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("WithdrawMoneyRule")</ValueExpr></Slot>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity() * this.msg.getOffer().getPrice()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Food_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the food amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Food_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the food amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Food") && this.asset.getType().equals("Food") ]]></IF>
					<IF language="Java JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Food" && this.asset.getType() === "Food" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Labor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the labor amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Labor_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the labor amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Labor") && this.asset.getType().equals("Labor") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Labor" && this.asset.getType() === "Labor" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Deposit_Utility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the utility amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
					<IF language="Java JavaScript"><![CDATA[ this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="deposit" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Withdraw_Utility_Rule" agentVariable="agt">
					<documentation>
						<dc:description>When a succesful transaction is received from the market, the utility amount is updated by the quantity times of the offer</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="MatchingOffer" messageVariable="msg" />
					<FOR-ListItemVariable variable="asset" listItemType="Quantity">
						<ListExpr language="Java JavaScript">this.agt.getAssets()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct().equals("Utility") && this.asset.getType().equals("Utility") ]]></IF>
					<IF language="JavaScript"><![CDATA[ !this.msg.getOffer().isBuy() && this.msg.getOffer().getProduct() === "Utility" && this.asset.getType() === "Utility" ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Call procedure="withdraw" contextObjectVariable="asset">
								<Argument parameter="q">
									<ValueExpr language="Java JavaScript">this.msg.getOffer().getQuantity()</ValueExpr>
								</Argument>	
							</Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Person" superType="EconomicAgent">
			<!-- ============================================ -->
				<documentation><description>A Person eats EAT_AMOUNT of food each timestep.</description></documentation>
				<Attribute name="EAT_AMOUNT" type="Float" initialValue="1.0"/>
				<Attribute name="TARGET_FOOD_STOCK" type="Float" initialValue="30.0"/>
				<Attribute name="TARGET_MONEY_STOCK" type="Float" initialValue="60.0"/>
				<Attribute name="konto"  type="Float" initialValue="0"/>
				<ComplexDataProperty name="foodBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="foodSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="utilityBuyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>abstract function</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java JavaScript">return false;</Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the foodSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getFoodSellList().clear();
						double foodAmount = getAssetByName("Food").getQuantity();
						if (foodAmount > 1.5 * getTARGET_FOOD_STOCK()){
				        	final double quantum = getEAT_AMOUNT() * 1.0;
				          	for (double x = foodAmount; x > 1.5 * getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
					            double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / (x - getTARGET_FOOD_STOCK()), .2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
					            double price = mod * getLastFoodPrice();
					            if (price <= 0.0) break;
								
					            sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Food");
				            	o.setQuantity(quantum);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getFoodSellList().add(o);
				          	}
							return true;
						}
						return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getFoodSellList().clear();
						var foodAmount = this.getAssetByName("Food").getQuantity();
						if (foodAmount > 1.5 * this.getTARGET_FOOD_STOCK()) {
							var quantum = this.getEAT_AMOUNT() * 1.0;
							for (var x = foodAmount; x > 1.5 * this.getTARGET_FOOD_STOCK(); x -= quantum) {
								if (x == 0.0) x = 0.00000000001;
								var random_value = js.util.Random.uniform(0.0, 1.0);
								var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / (x - this.getTARGET_FOOD_STOCK()), 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
								var price = mod * this.getLastFoodPrice();
								if (price <= 0.0) break;
								
								var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
								o.setProduct("Food");
								o.setQuantity(quantum);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getFoodSellList().add(o);
							}
							return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the utilityBuyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getUtilityBuyList().clear();
						double purse = getKonto();
						if (purse > getTARGET_MONEY_STOCK() && getAssetByName("Food").getQuantity() > getTARGET_FOOD_STOCK()) {
					      	final double frac = 0.95;
					      	double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
					      	double uPrice = getLastUtilityPrice() * factor;
					      	double quantity = (getKonto() - getTARGET_MONEY_STOCK()) / uPrice;
					      	if (quantity > 0 && uPrice > 0.0){
					      		for (double d = quantity; d > 0; d--){
						        	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            	o.setProduct("Utility");
				            		o.setQuantity(1);
				            		o.setPrice(uPrice);
				            		o.setBuy(true);
				            		o.setBidderIdRef(bidderIdRef);
				            		getUtilityBuyList().add(o);
			            		}
			            	}
			            	return true;
			            }
			            return false;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getUtilityBuyList().clear();
						var purse = this.getKonto();
						if (purse > this.getTARGET_MONEY_STOCK() && this.getAssetByName("Food").getQuantity() > this.getTARGET_FOOD_STOCK()) {
							var frac = 0.95;
							var random_value = js.util.Random.normal(0.0, 1.0); 
							var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1);
							var uPrice = this.getLastUtilityPrice() * factor;
							var quantity = (this.getKonto() - this.getTARGET_MONEY_STOCK()) / uPrice;
							if (quantity > 0 && uPrice > 0.0) {
								for (var d = quantity; d > 0; d--) {
									var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
									o.setProduct("Utility");
									o.setQuantity(1);
									o.setPrice(uPrice);
									o.setBuy(true);
									o.setBidderIdRef(bidderIdRef);
									this.getUtilityBuyList().add(o);
								}
							}
							return true;
						}
						return false;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="BuyFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The person decides how much food he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyFood" receiverIdRefs="2">
								<Slot property="buyOffers"><ValueExpr language="Java JavaScript">this.agt.getFoodBuyList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers"><ValueExpr language="Java JavaScript">this.agt.getFoodSellList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyUtility_Rule" agentVariable="agt">
					<documentation>
						<description> The person decides how much utility he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyUtility(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyUtility" receiverIdRefs="4">
								<Slot property="buyOffers"><ValueExpr language="Java JavaScript">this.agt.getUtilityBuyList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Laborer" superType="Person">
				<ComplexDataProperty name="laborSellList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the foodBuyList</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						double moneyAmount = getAssetByName("Money").getQuantity();
                    	setKonto(moneyAmount);
						getFoodBuyList().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = moneyAmount;
			          	for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyList().add(o);
			            	setKonto(getKonto() - price);
			          	}
						return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var moneyAmount = this.getAssetByName("Money").getQuantity(); 
						this.setKonto(moneyAmount);
						this.getFoodBuyList().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = moneyAmount;
						for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getFoodBuyList().add(o);
							this.setKonto(this.getKonto() - price);
						}
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the sell offers and adds them to the laborSellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						double price;
						double foodAmount = getAssetByName("Food").getQuantity();
						getLaborSellList().clear();
						if (getLastLaborPrice() > getLastFoodPrice() && foodAmount < getTARGET_FOOD_STOCK()){
				        	price = (getLastLaborPrice() - getLastFoodPrice()) * ((foodAmount*foodAmount) / (getTARGET_FOOD_STOCK()*getTARGET_FOOD_STOCK())) + getLastFoodPrice();
				        	price = Math.min(price, getLastLaborPrice() * 1.1);
				        }else{
				            price = getLastLaborPrice();
				            final double frac = 0.95;
				            double mod =((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * (1 - frac) + 1);
				        	price *= mod;
				        }
						sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            o.setProduct("Labor");
		            	o.setQuantity(getLABOR_ALLOWANCE());
		            	o.setPrice(price);
		            	o.setBuy(false);
		            	o.setBidderIdRef(bidderIdRef);
		            	getLaborSellList().add(o);
		            	return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[ 
						var price = 0;
						var foodAmount = this.getAssetByName("Food").getQuantity();
						this.getLaborSellList().clear();
						if (this.getLastLaborPrice() > this.getLastFoodPrice() && foodAmount < this.getTARGET_FOOD_STOCK()){
							price = (this.getLastLaborPrice() - this.getLastFoodPrice()) * ((foodAmount * foodAmount) / (this.getTARGET_FOOD_STOCK() * this.getTARGET_FOOD_STOCK())) + this.getLastFoodPrice();
							price = Math.min(price, this.getLastLaborPrice() * 1.1);
						} else {
							price = this.getLastLaborPrice();
							var frac = 0.95;
							var random_value = js.util.Random.normal(0.0, 1.0);
							var mod = (Math.max(Math.min(random_value, 2.0), -2) / 2) * (1 - frac) + 1;
							price *= mod;
						}
						var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
						o.setProduct("Labor");
						o.setQuantity(this.getLABOR_ALLOWANCE());
						o.setPrice(price);
						o.setBuy(false);
						o.setBidderIdRef(bidderIdRef);
						this.getLaborSellList().add(o);
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellLabor_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The person decides how much labor he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellLabor(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellLabor" receiverIdRefs="3">
								<Slot property="sellOffers"><ValueExpr language="Java JavaScript">this.agt.getLaborSellList()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Owner" superType="Person">
				<!-- ============================================ -->
				<Attribute name="TARGET_FIRM_MONEY_STOCK" type="Float" initialValue="100"/>
				<ReferenceProperty name="firm" type="Firm"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers and adds them to the foodBuyList</dc:description>
					</documentation>
					<Parameter name="bidder" type="long"/>
					<Body language="Java"><![CDATA[
						if (getFirm() != null){
							double firmMoney = getFirm().getAssetByName("Money").getQuantity();
							double moneyToWithdraw = Math.max(getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity() , firmMoney - getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								getAssetByName("Money").deposit((getFirm().getAssetByName("Money")).withdraw(moneyToWithdraw));
	                    	}
                    	}
                    	setKonto(getAssetByName("Money").getQuantity());
						getFoodBuyList().clear();
						final double quantum = getEAT_AMOUNT() * 1.0;
			          	double purse = getAssetByName("Money").getQuantity();
			          	for (double x = getAssetByName("Food").getQuantity(); x <= 1.5 * getTARGET_FOOD_STOCK(); x += quantum) {
			            	if (x == 0.0) x = 0.00000000001;
			            	double mod = 0.1 * Math.pow(getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
			            	double price = mod * getLastFoodPrice();
			            	price = Math.min(price, purse);
			            	if (price <= 0.0) break;
			            	
			              	purse = purse - (quantum*price);
			            	if (purse < 0.0) break;
			            	
			            	sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
			            	o.setProduct("Food");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidder);
			            	getFoodBuyList().add(o);
			            	setKonto(getKonto()-price);
			          	}
						return true;
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						if(this.getFirm() !== null){
							var firmMoney = this.getFirm().getAssetByName("Money").getQuantity();
							var moneyToWithdraw = Math.max(this.getTARGET_MONEY_STOCK() - this.getAssetByName("Money").getQuantity(), firmMoney - this.getTARGET_FIRM_MONEY_STOCK());
							if (moneyToWithdraw > 0.0) {
								var moneyAsset = this.getAssetByName("Money");
								var firmMoneyAsset = this.getFirm().getAssetByName("Money");
								moneyAsset.deposit(firmMoneyAsset.withdraw(moneyToWithdraw));
							}
						}
						this.setKonto(this.getAssetByName("Money").getQuantity());
						this.getFoodBuyList().clear();
						var quantum = this.getEAT_AMOUNT() * 1.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var x = this.getAssetByName("Food").getQuantity(); x <= 1.5 * this.getTARGET_FOOD_STOCK(); x += quantum) {
							if (x == 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0);
							var mod = 0.1 * Math.pow(this.getTARGET_FOOD_STOCK() / x, 0.2) + 0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastFoodPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							
							purse = purse - (quantum * price);
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Food");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidder);
							this.getFoodBuyList().add(o);
							this.setKonto(this.getKonto() - price);
						}
						return true;
					]]></Body>
				</Function>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Firm" superType="EconomicAgent">
				<!-- ============================================ -->
				<Attribute name="amountProduced" type="Float"/>
				<ReferenceProperty name="owner" type="Person"/>
				<ComplexDataProperty name="buyList" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellList" type="TradeOffer" upperMultiplicity="unbounded"/>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Farm" superType="Firm">
				<!-- ============================================ -->
				<Attribute name="TARGET_FOOD_STOCK" type="Float" initialValue="120.0"/>
				<Attribute name="TARGET_OWNER_FOOD_STOCK" type="Float" initialValue="30.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellFood" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellList().clear();
						double productQuantity = getAssetByName("Food").getQuantity();
						if (productQuantity == 0) {
							return false;
						} else {
            				double food = productQuantity;
            				double quantum = productQuantity /10;
							while (food > 0){
								double factor = (Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0) / 2) * 0.1 + 1;
                				double price = getLastFoodPrice() * factor;
                				for (double d = quantum; d > 0; d--){
	                				sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
						            o.setProduct("Food");
					            	o.setQuantity(1);
									o.setPrice(price);
					            	o.setBuy(false);
					            	o.setBidderIdRef(bidderIdRef);
					            	getSellList().add(o);
				            	}
				            	food = food - quantum;
            				}
            				return true;
        				}
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getSellList().clear();
						var productQuantity = this.getAssetByName("Food").getQuantity();
						if (productQuantity === 0) {
							return false;
						} else {
							var food = productQuantity;
							var quantum = productQuantity / 10.0;
							while (food > 0) {
							    var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = (Math.max(Math.min(random_value, 2.0), -2.0)  / 2.0) * 0.1 + 1;
								var price = this.getLastFoodPrice() * factor;
								for (var d = quantum; d > 0; d--) {
									var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
									o.setProduct("Food");
									o.setQuantity(1);
									o.setPrice(price);
									o.setBuy(false);
									o.setBidderIdRef(bidderIdRef);
									this.getSellList().add(o);
								}
								food = food - quantum;
							}
							return true;
						}
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyList().clear();
						double ownerfoodAmount = getOwner().getAssetByName("Food").getQuantity();
				        if (ownerfoodAmount < 0.75 * getTARGET_OWNER_FOOD_STOCK() && getAssetByName("Food").getQuantity() < getTARGET_FOOD_STOCK()){
				          final double quantum = getLABOR_ALLOWANCE() * 1.0;
				          double purse = getAssetByName("Money").getQuantity();
				          for (double x = ownerfoodAmount; x <= 1.5 * getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
				            if (x == 0.0) x = 0.00000000001;
				            double mod = 0.1 * Math.pow(getTARGET_OWNER_FOOD_STOCK() / x, 0.2) + 0.90 + aors.util.Random.uniform(0.0, 1.0) * getRANDOM_FACTOR();
				            double price = mod*getLastLaborPrice();
				            price = Math.min(price, purse);
				            if (price <= 0.0) break;
				            purse -= quantum * price;
				            if (purse < 0.0) break;
				            
				            sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(quantum);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);        	
				          }
				        }
						double lastProduct = 0.0;
						double minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			            	
			                double marginalProduct = convertToFood(d) - lastProduct;
			                if (lastProduct + getAssetByName("Food").getQuantity() >= getTARGET_FOOD_STOCK()) break;
			
			                double price = marginalProduct * getLastFoodPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			
			                sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(getLABOR_ALLOWANCE());
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
			            	purse = purse - price;
			            	lastProduct = lastProduct + marginalProduct;
			            }
						return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var ownerfoodAmount = this.getOwner().getAssetByName("Food").getQuantity();
						if (ownerfoodAmount < 0.75 * this.getTARGET_OWNER_FOOD_STOCK() && this.getAssetByName("Food").getQuantity() < this.getTARGET_FOOD_STOCK()){
						  var quantum = this.getLABOR_ALLOWANCE() * 1.0;
						  var purse = this.getAssetByName("Money").getQuantity();
						  for (var x = ownerfoodAmount; x <= 1.5 * this.getTARGET_OWNER_FOOD_STOCK(); x += quantum) {
							if (x === 0.0) x = 0.00000000001;
							var random_value = js.util.Random.uniform(0.0, 1.0); 
							var mod = 0.1 * Math.pow(this.getTARGET_OWNER_FOOD_STOCK() / x, 0.2) +  0.90 + random_value * this.getRANDOM_FACTOR();
							var price = mod * this.getLastLaborPrice();
							price = Math.min(price, purse);
							if (price <= 0.0) break;
							purse -= quantum * price;
							if (purse < 0.0) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(quantum);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);        	
						  }
						}
						
						
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
						
							var marginalProduct = this.convertToFood(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Food").getQuantity() >= this.getTARGET_FOOD_STOCK()) break;

							var price = marginalProduct * this.getLastFoodPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;

							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(this.getLABOR_ALLOWANCE());
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price;
							lastProduct = lastProduct + marginalProduct;
						}
						return true;						
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much food could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java JavaScript"><![CDATA[return (-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity;]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceFood" resultType="Float">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<Parameter name="ID" type="long"/>
					<Body language="Java"><![CDATA[
						double labor = getAssetByName("Labor").getQuantity();
						double food = convertToFood(labor);
						getAssetByName("Labor").withdraw(labor);
						getAssetByName("Food").deposit(food);
						return food;									
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						var labor = this.getAssetByName("Labor").getQuantity();
						var food = this.convertToFood(labor);
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Food").deposit(food);
						return food;										
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="ProduceFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to food</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript"><![CDATA[ this.agt.getAssetByName("Labor").getQuantity() > 0 ]]></IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.agt.produceFood(this.agt.getId())</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellFood_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The farm decides how much food he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellFood(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellFood" receiverIdRefs="2">
								<Slot property="sellOffers">
									<PropertyValueExpr entityVariable="agt" property="sellList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The farm decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyLabor(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<PropertyValueExpr entityVariable="agt" property="buyList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Factory" superType="Firm">
				<Attribute name="TARGET_UTILITY_STOCK" type="Float" initialValue="60.0"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="sellUtility" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the selloffers and adds them to the sellList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getSellList().clear();
						final double frac = 0.9;
			            double util = getAssetByName("Utility").getQuantity();
			            double quantum = util / 10; 
			            while (util > 0) {
			            	for (double d = quantum; d > 0; d--) {
				            	double factor = ((Math.max(Math.min(aors.util.Random.normal(0.0, 1.0), 2.0), -2.0)/ 2) * (1 - frac) + 1); 
				            	double price = getLastUtilityPrice() * factor;
								
			            		sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Utility");
				            	o.setQuantity(1);
				            	o.setPrice(price);
				            	o.setBuy(false);
				            	o.setBidderIdRef(bidderIdRef);
				            	getSellList().add(o);
			            	}
			            	util = util-quantum;
			            }
            			return true;		
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getSellList().clear();
						var frac = 0.9;
						var util = this.getAssetByName("Utility").getQuantity();
						var quantum = util / 10.0; 
						while (util > 0) {
							for (var d = quantum; d > 0; d--) {
								var random_value = js.util.Random.normal(0.0, 1.0); 
								var factor = ((Math.max(Math.min(random_value, 2.0), -2.0) / 2) * (1 - frac) + 1); 
								var price = this.getLastUtilityPrice() * factor;
								
								var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
								o.setProduct("Utility");
								o.setQuantity(1);
								o.setPrice(price);
								o.setBuy(false);
								o.setBidderIdRef(bidderIdRef);
								this.getSellList().add(o);
							}
							util = util - quantum;
						}
						return true;	
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="buyLabor" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates the buyoffers an adds them to the buyList</dc:description>
					</documentation>
					<Parameter name="bidderIdRef" type="long"/>
					<Body language="Java"><![CDATA[
						getBuyList().clear();
						double lastProduct = 0.0, minPrice = (getLABOR_ALLOWANCE() * getLastLaborPrice()) / 2.0;
						double purse = getAssetByName("Money").getQuantity();
			            for (double d = getLABOR_ALLOWANCE(); purse > 0.0; d += getLABOR_ALLOWANCE()) {
			                double marginalProduct = convertToUtility(d) - lastProduct;
			                if (lastProduct + getAssetByName("Utility").getQuantity() >= getTARGET_UTILITY_STOCK()) 
								break;
			
			                double price = marginalProduct * getLastUtilityPrice();
			                // stop when you'd be buying at < 1/2 the price of labor
			                if (price < minPrice) break;
			                
							sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
				            o.setProduct("Labor");
			            	o.setQuantity(1);
			            	o.setPrice(price);
			            	o.setBuy(true);
			            	o.setBidderIdRef(bidderIdRef);
			            	getBuyList().add(o);
							purse = purse - price; 
			                lastProduct += marginalProduct;
			            }
			        	return true;						
					]]></Body>
					<Body language="JavaScript"><![CDATA[
						this.getBuyList().clear();
						var lastProduct = 0.0;
						var minPrice = (this.getLABOR_ALLOWANCE() * this.getLastLaborPrice()) / 2.0;
						var purse = this.getAssetByName("Money").getQuantity();
						for (var d = this.getLABOR_ALLOWANCE(); purse > 0.0; d += this.getLABOR_ALLOWANCE()) {
							var marginalProduct = this.convertToUtility(d) - lastProduct;
							if (lastProduct + this.getAssetByName("Utility").getQuantity() >= this.getTARGET_UTILITY_STOCK()) 
								break;

							var price = marginalProduct * this.getLastUtilityPrice();
							// stop when you'd be buying at < 1/2 the price of labor
							if (price < minPrice) break;
							
							var o = new minecon_laborfoodutility_scenario1.model.dataTypes.TradeOffer();
							o.setProduct("Labor");
							o.setQuantity(1);
							o.setPrice(price);
							o.setBuy(true);
							o.setBidderIdRef(bidderIdRef);
							this.getBuyList().add(o);
							purse = purse - price; 
							lastProduct += marginalProduct;
						}
						return true;					
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="convertToUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Calculates how much utility could be produced with a specific amount of labor</dc:description>
					</documentation>
					<Parameter name="laborQuantity" type="double"/>
					<Body language="Java"><![CDATA[
						return ((Double)(((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0)).longValue();
					]]></Body>
					<Body language="JavaScript"><![CDATA[
					  var value = ((-0.0652 * laborQuantity * laborQuantity) + 4.0652 * laborQuantity) / 2.0;
					  if (value > 0)
						value = Math.floor(value);
					  else
						value = Math.ceil(value);
					  return value;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="produceUtility" resultType="Integer">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>converts all labor to utility</dc:description>
					</documentation>
					<Body language="Java"><![CDATA[	
						long utility = convertToUtility(getAssetByName("Labor").getQuantity());
						double labor = getAssetByName("Labor").getQuantity();
						getAssetByName("Labor").withdraw(labor);
						getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
					<Body language="JavaScript"><![CDATA[ 
						var utility = this.convertToUtility(this.getAssetByName("Labor").getQuantity());
						var labor = this.getAssetByName("Labor").getQuantity();
						this.getAssetByName("Labor").withdraw(labor);
						this.getAssetByName("Utility").deposit(utility);
						return utility;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<ReactionRule name="ProduceUtility_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Converts all labor to utility</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<IF language="JavaScript">this.agt.getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="amountProduced">
								<ValueExpr language="Java JavaScript">this.agt.produceUtility()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="SellUtility_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description>The factory decides how much utility he wants to sell</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.sellUtility(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToSellUtility" receiverIdRefs="4">
								<Slot property="sellOffers">
									<PropertyValueExpr entityVariable="agt" property="sellList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="BuyLabor_Rule" agentVariable="agt">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<description> The factory decides how much labor he wants to buy</description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">this.agt.buyLabor(this.agt.getId())</IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="OfferToBuyLabor" receiverIdRefs="3">
								<Slot property="buyOffers">
									<PropertyValueExpr entityVariable="agt" property="buyList"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="Market">
				<!-- ============================================ -->
				<Attribute name="lastMarketPrice" type="Float" initialValue="0"/>
				<Attribute name="lastMarketVolume" type="Float" initialValue="0"/>
				<Attribute name="buyVolume" type="Float" initialValue="0"/>
				<Attribute name="sellVolume" type="Float" initialValue="0"/>
				<Attribute name="commodity" type="String" initialValue=""/>
				<Attribute name="currency" type="String" initialValue=""/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="clear" resultType="Boolean">
					<documentation>
						<dc:description>Calculates the market price and adds the corresponding buy- and selloffers to the transactionlist</dc:description>
					</documentation>
					
					<Body language="Java"><![CDATA[
						getTransactions().clear();
						//ToDo
						//var buyOffers = this.getBuyOffers();
						//var sellOffers = this.getSellOffers();
						java.util.Comparator<sim.model.dataTypes.TradeOffer> comparator;
						comparator = new java.util.Comparator<sim.model.dataTypes.TradeOffer>() {
							public int compare (sim.model.dataTypes.TradeOffer a, sim.model.dataTypes.TradeOffer b) {
							  double p1 = a.getPrice();
							  double p2 = b.getPrice(); 
								if (p1 < p2) return -1;
								if (p1 > p2) return 1;
								            return 0;	             		
							}		
						};
						java.util.Collections.sort(getBuyOffers(), comparator);
						java.util.Collections.sort(getSellOffers(), comparator);
						
						// handle special cases
				        // highest buy price < lowest sell price -> no transactions OR
				        // empty offer list -> no transactions
				        
				        if ((getBuyOffers().size() == 0) || (getSellOffers().size() == 0) || (less(getBuyOffers().get(getBuyOffers().size()-1).getPrice(), getSellOffers().get(0).getPrice()))) {
				        	setBuyVolume(getBuyOffers().size());
				        	setSellVolume(getSellOffers().size());
				        	getBuyOffers().clear();
				        	getSellOffers().clear();
				        	return false;
				        }	        
				        // merge prices into sorted list, eliminating duplicates
        				java.util.ArrayList<Double> prices = new java.util.ArrayList<Double>(getBuyOffers().size() + getSellOffers().size());
        				int s = 0, b = 0;
				        while (s < getSellOffers().size() && b < getBuyOffers().size()) {
				            if (equal(getSellOffers().get(s).getPrice(), getBuyOffers().get(b).getPrice())) {
				            	prices.add(getSellOffers().get(s++).getPrice());
				                b++;
				            } else if (getSellOffers().get(s).getPrice() < getBuyOffers().get(b).getPrice()){
                				prices.add(getSellOffers().get(s++).getPrice());
                			} else {
                				prices.add(getBuyOffers().get(b++).getPrice());
                			}
                			// eliminate duplicates in sellOffers
				        	while (s < getSellOffers().size() 
                    			   && equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
                				s++;
							}
							// eliminate duplicates in buyOffers
							while (b < getBuyOffers().size() && equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
                				b++;
                			}
                		}
                		// then add the remainder if there is one
        				if (s < getSellOffers().size()){
           				 	while (s < getSellOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getSellOffers().get(s).getPrice())){
				                	prices.add(getSellOffers().get(s).getPrice());
				                }
				                s++;
			            	}
			            } else if (b < getBuyOffers().size()) {
            				while (b < getBuyOffers().size()) {
				                if (!equal(prices.get(prices.size() - 1), getBuyOffers().get(b).getPrice())){
				                    prices.add(getBuyOffers().get(b).getPrice());
				                }
				                b++;
				            }
            			}    			
            			// find the price(s) at which supply and demand intersect
				        double supply = 0, demand = 0;
				        // initialize demand to be the demand at lowest demand price
				        for (sim.model.dataTypes.TradeOffer o : getBuyOffers()){
				            demand += o.getQuantity();
				        }
				        // walk through prices, updating supply and demand as needed.
				        int p = 0;
				        double bestVolume = Double.NEGATIVE_INFINITY;
				        int bestP = 0;
				        for (s = -1, b = 0; s + 1 < getSellOffers().size() && b < getBuyOffers().size(); p++) {
				            // if prices[p] is the next supply price:
				            while (s + 1 < getSellOffers().size() && equal(prices.get(p), getSellOffers().get(s + 1).getPrice())){
				                supply += getSellOffers().get(++s).getQuantity();
				            }
				            // if the current demand price is less than prices[p]:
				            while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p))){
				                demand -= getBuyOffers().get(b++).getQuantity();
				            }
				            if (supply > demand) {
				                // volume = demand
				                if (demand > bestVolume) {
				                    bestVolume = demand;
				                    bestP = p;
				                }
				                break; // stop
				            } else if (supply > bestVolume) {
				            	// volume = supply here
				                bestVolume = supply;
				                bestP = p;
				            }
				        }
			      	  	/*
				         * If the above loop broke because the final supply price was reached,
				         * then supply at Price >= prices[p-1] remains constant. Thus, it is
				         * necessary to check whether demand at higher prices will ever become
				         * less than the current supply. If so, then that will be at the market
				         * price.
				         */
				         if (s + 1 == getSellOffers().size()) {
				            for (; b < getBuyOffers().size() && p < prices.size(); p++) {
				                while (b < getBuyOffers().size() && less(getBuyOffers().get(b).getPrice(), prices.get(p)))
				                    demand -= getBuyOffers().get(b++).getQuantity();
				
				                if (supply > demand) {
				                    // volume = demand
				                    if (demand > bestVolume) {
				                        bestVolume = demand;
				                        bestP = p;
				                    }
				                    break; // stop
				                } else if (supply > bestVolume) { 
				                	// volume = supply here
				                    bestVolume = supply;
				                    bestP = p;
				                }
				            }
				        }
				        /*
				         * If one of the loops broke because the next price was greater than the
				         * highest demand price, then the market price is set to the highest
				         * demand price in order to minimize shortage.
				         */
				        if (b == getBuyOffers().size()){
				            setLastMarketPrice(getBuyOffers().get(b - 1).getPrice());
				        }
				        /* If supply never crosses demand, set to highest supply price */
				        else if (p == prices.size()){
				            setLastMarketPrice(getBuyOffers().get(p - 1).getPrice());
				        }
				        /*
				         * Finally, if the loop broke because supply > demand, there are two
				         * valid prices that could be the market price: prices[p], which is the
				         * smallest price at which supply tops demand, or prices[p-1], which is
				         * the largest price at which demand tops supply. Since either price is
				         * valid, we select between them in an arbitrary, yet deterministic
				         * manner. However, if choosing between a two prices, one of which would
				         * not cause any transactions to occur, we choose the other price.
				         */
				        else {
				            if (p == 0) {
				                setLastMarketPrice(prices.get(p));
				            } else if (less(prices.get(p - 1), getSellOffers().get(0).getPrice())){
				                setLastMarketPrice(prices.get(p));
				            } else if (less(getBuyOffers().get(getBuyOffers().size() - 1).getPrice(), prices.get(p))){
				                setLastMarketPrice(prices.get(p - 1));
				            } else {
				                setLastMarketPrice(prices.get(bestP));
				            }
				        }
				        int seller = 0, buyer = getBuyOffers().size() - 1;
				        while (seller < getSellOffers().size() && buyer >= 0 && !less(getLastMarketPrice(), getSellOffers().get(seller).getPrice()) && !less(getBuyOffers().get(buyer).getPrice(), getLastMarketPrice())) 
						{	
							getSellOffers().get(seller).setPrice(getLastMarketPrice());
							getTransactions().add(getSellOffers().get(seller));
							seller++;
							getBuyOffers().get(buyer).setPrice(getLastMarketPrice());
							getTransactions().add(getBuyOffers().get(buyer));
							buyer--;
				        }
						// reset offer lists and set statistic variables
				        setLastMarketVolume(getTransactions().size());
				        setBuyVolume(getBuyOffers().size());
				        setSellVolume(getSellOffers().size());
				        getBuyOffers().clear();
				        getSellOffers().clear();
						return true;
					]]></Body>
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<Body language="JavaScript"><![CDATA[
						this.getTransactions().clear();
						var buyOffers = this.getBuyOffers();
						var sellOffers = this.getSellOffers();
						
						var comparator = function(a, b) {
							var p1 = a.getPrice();
							var p2 = b.getPrice();
							
							if (p1 < p2) return -1;
							if (p1 > p2) return 1;
										return 0;	
						}
						
						buyOffers.sort(comparator);
						sellOffers.sort(comparator);
						
						// handle special cases
						// highest buy price < lowest sell price -> no transactions OR
						// empty offer list -> no transactions
						
						if ((buyOffers.size() == 0) || (sellOffers.size() == 0) || (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), sellOffers.get(0).getPrice()))) {
							
							this.setBuyVolume(buyOffers.size());
							this.setSellVolume(sellOffers.size());
							buyOffers.clear();
							sellOffers.clear();
							return false;
						}
						
						// merge prices into sorted list, eliminating duplicates
						var prices = new js.util.ArrayList();
						var s = 0, b = 0;
						while (s < sellOffers.size() && b < buyOffers.size()) {
							if (this.equal(sellOffers.get(s).getPrice(), buyOffers.get(b).getPrice())) {
								prices.add(sellOffers.get(s++).getPrice());
								b++;
							} else if (sellOffers.get(s).getPrice() < buyOffers.get(b).getPrice()){
								prices.add(sellOffers.get(s++).getPrice());
							} else {
								prices.add(buyOffers.get(b++).getPrice());
							}
							// eliminate duplicates in sellOffers
							while (s < sellOffers.size() && this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
								s++;
							}
							 // eliminate duplicates in buyOffers
							while (b < buyOffers.size() && this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
								b++;
							}
						}
						// then add the remainder if there is one
						if (s < sellOffers.size()) {
								while (s < sellOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), sellOffers.get(s).getPrice())){
									prices.add(sellOffers.get(s).getPrice());
								}
								s++;
							}
						} else if (b < buyOffers.size()) {
							while (b < buyOffers.size()) {
								if (!this.equal(prices.get(prices.size() - 1), buyOffers.get(b).getPrice())){
									prices.add(buyOffers.get(b).getPrice());
								}
								b++;
							}
						}
						// find the price(s) at which supply and demand intersect
						var supply = 0, demand = 0;
						
						// initialize demand to be the demand at lowest demand price
						for (var o = 0; o < buyOffers.size(); o++) { 
							var tradeOffer = buyOffers.get(o);
							demand += tradeOffer.getQuantity();
						}
						
						// walk through prices, updating supply and demand as needed.
						var p = 0;
						var bestVolume = Number.NEGATIVE_INFINITY;
						var bestP = 0;
						for (s = -1, b = 0; s + 1 < sellOffers.size() && b < buyOffers.size(); p++) {
							// if prices.get(p) is the next supply price:
							while (s + 1 < sellOffers.size() && this.equal(prices.get(p), sellOffers.get(s + 1).getPrice())) {
								supply += sellOffers.get(++s).getQuantity();
							}
							// if the current demand price is less than prices.get(p):
							while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p))) {
								demand -= buyOffers.get(b++).getQuantity();
							}
							if (supply > demand) {
								// volume = demand
								if (demand > bestVolume) {
									bestVolume = demand;
									bestP = p;
								}
								break; // stop
							} else if (supply > bestVolume) {
								// volume = supply here
								bestVolume = supply;
								bestP = p;
							}
						}
						/*
						 * If the above loop broke because the final supply price was reached,
						 * then supply at Price >= prices.get(p-1) remains constant. Thus, it is
						 * necessary to check whether demand at higher prices will ever become
						 * less than the current supply. If so, then that will be at the market
						 * price.
						 */
						 if (s + 1 == sellOffers.size()) {
							for (; b < buyOffers.size() && p < prices.size(); p++) {
								while (b < buyOffers.size() && this.less(buyOffers.get(b).getPrice(), prices.get(p)))
									demand -= buyOffers.get(b++).getQuantity();
				
								if (supply > demand) {
									// volume = demand
									if (demand > bestVolume) {
										bestVolume = demand;
										bestP = p;
									}
									break; // stop
								} else if (supply > bestVolume) { 
									// volume = supply here
									bestVolume = supply;
									bestP = p;
								}
							}
						}
						/*
						 * If one of the loops broke because the next price was greater than the
						 * highest demand price, then the market price is set to the highest
						 * demand price in order to minimize shortage.
						 */
						if (b == buyOffers.size()) {
							this.setLastMarketPrice(buyOffers.get(b - 1).getPrice());
						}
						/* If supply never crosses demand, set to highest supply price */
						else if (p == prices.size()) {
							this.setLastMarketPrice(buyOffers.get(p - 1).getPrice());
						}
						/*
						 * Finally, if the loop broke because supply > demand, there are two
						 * valid prices that could be the market price: prices.get(p), which is the
						 * smallest price at which supply tops demand, or prices.get(p-1), which is
						 * the largest price at which demand tops supply. Since either price is
						 * valid, we select between them in an arbitrary, yet deterministic
						 * manner. However, if choosing between a two prices, one of which would
						 * not cause any transactions to occur, we choose the other price.
						 */
						else {
							if (p == 0) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(prices.get(p - 1), sellOffers.get(0).getPrice())) {
								this.setLastMarketPrice(prices.get(p));
							} else if (this.less(buyOffers.get(buyOffers.size() - 1).getPrice(), prices.get(p))) {
								this.setLastMarketPrice(prices.get(p - 1));
							} else {
								this.setLastMarketPrice(prices.get(bestP));
							}
						}
						var seller = 0, buyer = buyOffers.size() - 1;
						while (seller < sellOffers.size() && buyer >= 0	&& !this.less(this.getLastMarketPrice(), sellOffers.get(seller).getPrice()) && !this.less(buyOffers.get(buyer).getPrice(), this.getLastMarketPrice())) 
						{	
							sellOffers.get(seller).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(sellOffers.get(seller));
							seller++;
							buyOffers.get(buyer).setPrice(this.getLastMarketPrice());
							this.getTransactions().add(buyOffers.get(buyer));
							buyer--;
						}
						// reset offer lists and set statistic variables
						this.setLastMarketVolume(this.getTransactions().size());
						this.setBuyVolume(buyOffers.size());
						this.setSellVolume(sellOffers.size());
						buyOffers.clear();
						sellOffers.clear();
						return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="equal" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>Check if the two Inputparameters are equal</dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						if (a + 1e-5 < b) 
							return false;
						else if (a - 1e-5 > b) 
							return false;
						else
							return true;
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<Function name="less" resultType="Boolean">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
					<documentation>
						<dc:description>checks if a less b </dc:description>
					</documentation>
					<Parameter name="a" type="double"/>
					<Parameter name="b" type="double"/>
					<Body language="Java JavaScript"><![CDATA[
						return (a + 1e-5 < b);
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyFood" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getBuyOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellFood" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellFood" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getSellOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getBuyOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellLabor" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellLabor" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getSellOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToBuyUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="buyOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getBuyOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellUtility" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>SellOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="OfferToSellUtility" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<MultiValuedSlot property="sellOffers">
								<AddAll>
									<ListExpr language="Java JavaScript">this.msg.getSellOffers()</ListExpr>
								</AddAll>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<IF language="Java JavaScript">this.m.clear()</IF>
					<THEN>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Transact" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<!--sollte jetzt so gehen-->
						<ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">		
									<!--sollte jetzt so gehen-->
									<ObjectValueExpr objectVariable="o"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>	
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="ContinuousCommodityMarket" superType="Market"></AgentType>
			<!-- ============================================ -->
			<AgentType name="DiscreteCommodityMarket" superType="Market"></AgentType>
			<!-- =====================BS6=================== -->
			<AgentType name="BS6Laborer" superType="EconomicAgent">
				<Attribute type="Float" name="targetNStock" initialValue="26"/>
				<Attribute type="Float" name="baseSavingToIncomeRatio" initialValue="10"/>
				<Attribute type="Float" name="eatAmt" initialValue="1.0"/>
				<Attribute type="Float" name="epsilon" initialValue="0.1"/>
				<Attribute type="Float" name="upsilon" initialValue="0.04"/>
				<Attribute type="Float" name="savingRate"/>
				<Attribute type="Float" name="consumption"/>
				<Attribute type="Float" name="eConsumption"/>
				<Attribute type="Float" name="nConsumption"/>
				<Attribute type="Float" name="minN"/>
				<Attribute type="Float" name="lowRR"/>
				<Attribute type="Float" name="highRR"/>
				<Attribute type="Float" name="income"/>
				<Attribute type="Float" name="wage"/>
				<Attribute type="Float" name="targetSavings"/>
				<Attribute type="Float" name="targetConsumption"/>
				<Attribute type="Float" name="demandForE"/>
				<Attribute type="Float" name="demandForN"/>
				<ReactionRule name="act" agentVariable="agt">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("Laborer: " + getAssetByName("Food").getQuantity())</ValueExpr></Slot>
							<Slot property="income"><ValueExpr language="Java JavaScript">this.agt.getAssetByName("Money").getQuantity()</ValueExpr></Slot>
							<Slot property="targetSavings">
								<ValueExpr language="Java JavaScript">this.agt.getIncome() * this.agt.getBaseSavingToIncomeRatio()</ValueExpr>
							</Slot>
							<!-- Zinsen -->
							<Slot property="targetConsumption">
								<ValueExpr language="Java JavaScript">this.agt.getAssetByName("Money").getQuantity() - this.agt.getTargetSavings()</ValueExpr>
							</Slot>
							<Slot property="consumption">
								<ValueExpr language="Java JavaScript">
									Math.min(
									Math.max(this.agt.getConsumption() * (1 - this.agt.getUpsilon()), this.agt.getTargetConsumption()),
									this.agt.getConsumption() * (1 + this.agt.getUpsilon()))
								</ValueExpr>
							</Slot>
							<Slot property="nConsumption">
								<ValueExpr language="Java JavaScript">
									this.agt.getConsumption() * Math.max(0, 1 - this.agt.getAssetByName("Food").getQuantity() / this.agt.getTargetNStock())
								</ValueExpr>
							</Slot>
							<Slot property="eConsumption">
								<ValueExpr language="Java JavaScript">this.agt.getConsumption() - this.agt.getNConsumption()</ValueExpr>
							</Slot>
							<Slot property="minN">
								<ValueExpr language="Java JavaScript"><![CDATA[
									this.agt.getAssetByName("Food").getQuantity() < 2* this.agt.getEatAmt() ? this.agt.getEatAmt() : 0
								]]></ValueExpr>
							</Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6OfferToBuy" receiverIdRefs="10">
								<Slot property="product" value="Food" />
								<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">this.agt.getId()</ValueExpr></Slot>
								<Slot property="demand"><ValueExpr language="Java JavaScript">this.agt.getNConsumption()</ValueExpr></Slot>
								<Slot property="min"><ValueExpr language="Java JavaScript">this.agt.getMinN()</ValueExpr></Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="BS6OfferToBuy" receiverIdRefs="11">
								<Slot property="product" value="Utility" />
								<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">this.agt.getId()</ValueExpr></Slot>
								<Slot property="demand"><ValueExpr language="Java JavaScript">this.agt.getEConsumption()</ValueExpr></Slot>
							</OutMessageEventExpr>
							<OutMessageEventExpr messageType="BS6OfferToSell" receiverIdRefs="12">
								<Slot property="product" value="Labor" />
								<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">this.agt.getId()</ValueExpr></Slot>
								<Slot property="quantity" value="1" />
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6Firm" superType="EconomicAgent">
				<Attribute type="String" name="product"/>
				<Attribute type="Float" name="capacity"/>
				<Attribute type="Float" name="output"/>
				<Attribute type="Float" name="wageBudget"/>
				<Attribute type="Float" name="wage"/>
				<Attribute type="Float" name="loan"/>
				<Attribute type="Float" name="revenue"/>
				<Attribute type="Float" name="profit"/>
				<Attribute type="Float" name="marginalProfit"/>
				<Attribute type="Float" name="capitalCost"/>
				<Attribute type="Float" name="totalCost"/>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6ConsumerGoodFirm" superType="BS6Firm">
				<Attribute type="Float" name="A"/>
				<Attribute type="Float" name="beta"/>
				<Attribute type="Float" name="phi"/>
				<Attribute type="Float" name="lambda"/>
				<Attribute type="Float" name="eUtilThreshold"/>
				<Attribute type="Float" name="rUtilThreshold"/>
				<Attribute type="Float" name="capitalQty"/>
				<Attribute type="Float" name="capitylVal"/>
				<Attribute type="Float" name="MC"/>
				<Function name="convertToProduct" resultType="Float">
					<Parameter name="K" type="double"/>
					<Body language="Java">
						return getA() * Math.pow(getAssetByName("Labor").getQuantity(), getBeta()) * Math.pow(K, 1- getBeta());
					</Body>
				</Function>
				
				<ReactionRule name="act">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("Firm: " + getAssetByName("Labor").getQuantity() )</ValueExpr></Slot>
							<Slot property="revenue">
								<ValueExpr language="Java JavaScript">
									getAssetByName("Money").getQuantity()
								</ValueExpr>
							</Slot>
							<Slot property="totalCost">
								<ValueExpr language="Java JavaScript">
									getWageBudget() + getCapitalCost()
								</ValueExpr>
							</Slot>
							<Slot property="profit">
								<ValueExpr language="Java JavaScript">
									getRevenue() - getTotalCost()
								</ValueExpr>
							</Slot>
							<Slot property="capacity">
								<ValueExpr language="Java JavaScript">
									convertToProduct(30)
								</ValueExpr>
							</Slot>
							<Slot property="wage">
								<ValueExpr language="Java JavaScript">
									getAssetByName("Labor").getQuantity() > 0 ? getWageBudget() / getAssetByName("Labor").getQuantity() : 0
								</ValueExpr>
							</Slot>
							<!-- wageBudget -->
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6NFirm" superType="BS6ConsumerGoodFirm">
				
				<Function name="updateProduct" resultType="void">
					<Body language="Java">
						System.out.println("UpdateFood: " + getAssetByName("Food").getQuantity());
						if(getOutput() > 0){
							getAssetByName("Food").deposit(getOutput());
						}
						System.out.println("Neu: " + getAssetByName("Food").getQuantity());
					</Body>
				</Function>
				
				<ReactionRule name="Output_Rule" agentVariable="agt">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: OutputRule " + getTriggeredTime())</ValueExpr></Slot>
							<Slot property="MC">
								<ValueExpr language="Java JavaScript">
									getWage() / getBeta() * Math.pow( getA(), -1/getBeta() )
									* Math.pow(getOutput(), 1 / getBeta() - 1 )
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: marginalProfit " )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: LastUtilityPrice= " + getLastUtilityPrice() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: MC= " + getMC() )</ValueExpr></Slot>
							<Slot property="marginalProfit">
								<ValueExpr language="Java JavaScript">
									getLastFoodPrice() - getMC()
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: OutPut " )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: Phi= " + getPhi() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: MarginalProfit= " + getMarginalProfit() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: LastFoodPrice= " + getLastFoodPrice() )</ValueExpr></Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									getOutput() * ( 1 + getPhi() * getMarginalProfit()/ getLastFoodPrice() )
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm: Output= " + getOutput() )</ValueExpr></Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									Math.min( getCapacity(), getOutput() )
								</ValueExpr>
							</Slot>
							<Slot property="output">
								<ValueExpr language="Java">
									(this.getTriggeredTime() == 1) ? 50 : getOutput()	
								</ValueExpr>
							</Slot>
							<Call procedure="updateProduct" contextObjectVariable="agt"></Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="makeOffers" agentVariable="agt">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6OfferToBuy" receiverIdRefs="12">
								<Slot property="product" value="Labor" />
								<Slot property="demand"><PropertyValueExpr entityVariable="agt" property="wageBudget"/></Slot>
								<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">agt.getId()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
					<IF language="Java JavaScript">getAssetByName("Food").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm MakeSellOffer")</ValueExpr></Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6OfferToSell" receiverIdRefs="10">
								<Slot property="quantity">
									<ValueExpr language="Java JavaScript">getAssetByName("Food").getQuantity()</ValueExpr>
								</Slot>
								<Slot property="bidderIdRef">
									<ValueExpr language="Java JavaScript">agt.getId()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6EFirm" superType="BS6ConsumerGoodFirm">
				<Function name="updateProduct" resultType="void">
					<Body language="Java">
						System.out.println("UpdateUtility: " + getAssetByName("Utility").getQuantity());
						if(getOutput() > 0){
						getAssetByName("Utility").deposit(getOutput());
						System.out.println("Neu: " + getAssetByName("Utility").getQuantity());
						}
					</Body>
				</Function>
				
				<ReactionRule name="Output_Rule" agentVariable="agt">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<IF language="Java JavaScript">getAssetByName("Labor").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: OutputRule " + this.getTriggeredTime())</ValueExpr></Slot>
							<Slot property="MC">
								<ValueExpr language="Java JavaScript">
									getWage() / getBeta() * Math.pow( getA(), -1/getBeta() )
									* Math.pow(getOutput(), 1 / getBeta() - 1 )
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: marginalProfit " )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: LastUtilityPrice= " + getLastUtilityPrice() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: MC " + getMC() )</ValueExpr></Slot>
							<Slot property="marginalProfit">
								<ValueExpr language="Java JavaScript">
									getLastUtilityPrice() - getMC()
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: OutPut " )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: Phi= " + getPhi() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: MarginalProfit= " + getMarginalProfit() )</ValueExpr></Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: LastUtilityPrice= " + getLastUtilityPrice() )</ValueExpr></Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									getOutput() * ( 1 + getPhi() * getMarginalProfit()/ getLastUtilityPrice() )
								</ValueExpr>
							</Slot>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("EFirm: Output= " + getOutput() )</ValueExpr></Slot>
							<Slot property="output">
								<ValueExpr language="Java JavaScript">
									Math.min( getCapacity(), getOutput() )
								</ValueExpr>
							</Slot>
							<Call procedure="updateProduct" contextObjectVariable="agt"></Call>
						</UPDATE-AGT>
					</THEN>
				</ReactionRule>
				
				<ReactionRule name="makeOffers" agentVariable="agt">
					<WHEN eventType="InMessageEvent" messageType="Act_msg"/>
					<DO>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6OfferToBuy" receiverIdRefs="12">
								<Slot property="product" value="Labor" />
								<Slot property="demand"><PropertyValueExpr entityVariable="agt" property="wageBudget"/></Slot>
								<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">agt.getId()</ValueExpr></Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</DO>
					<IF language="Java JavaScript">getAssetByName("Utility").getQuantity() > 0</IF>
					<THEN>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("NFirm MakeSellOffer")</ValueExpr></Slot>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="BS6OfferToSell" receiverIdRefs="10">
								<Slot property="quantity">
									<ValueExpr language="Java JavaScript">getAssetByName("Utility").getQuantity()</ValueExpr>
								</Slot>
								<Slot property="bidderIdRef">
									<ValueExpr language="Java JavaScript">agt.getId()</ValueExpr>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6Market">
				<Attribute type="String" name="good"/>
			</AgentType>
			<!-- ============================================ -->
			<AgentType name="BS6ConsumerMarket" superType="BS6Market">
				<Attribute type="Float" name="zeta" initialValue="0.1" />
				<Attribute type="Float" name="initLow"/>
				<Attribute type="Float" name="initHigh"/>
				<Attribute type="Float" name="mktPrice"/>
				<Attribute type="Float" name="mktGoodVol"/>
				<Attribute type="Float" name="mktMoneyVol"/>
				<Attribute type="Float" name="mktSupply"/>
				<Attribute type="Float" name="mktDemand"/>
				<Attribute type="String" name="hallo"/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="clear" resultType="void">
					<Body language="Java"><![CDATA[
						double low = getMktPrice() * (1 - getZeta());
						double high = getMktPrice() * (1 + getZeta());
						double supply = 0;
						double demand = 0;
						double price = 0;
						for(TradeOffer offer : getSellOffers()){
							supply +=  offer.getQuantity();
						}
						while(true){
							price = (low + high) / 2;
							for(TradeOffer offer : getBuyOffers()){
								if(offer.getProduct().equals("Food")){
									demand += Math.max(offer.getQuantity() / price, offer.getMin());
								}else{
									demand += offer.getQuantity() / price;
								}
							}
							if(Math.abs(demand - supply) < 0.1 || Math.abs(high - low) < 0.01) break;
							
							if(demand > supply){
								low = price;
							}
							else{
								high = price;
							}
						}
						setMktPrice(price);
						setMktGoodVol(Math.min(supply, demand));
						setMktMoneyVol(price + getMktGoodVol());
						setMktSupply(supply);
						setMktDemand(demand);
						getBuyOffers().clear();
						getSellOffers().clear();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyOffer" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6OfferToBuy" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("cMarket rbo")</ValueExpr></Slot>
							<MultiValuedSlot property="buyOffers">
								<AddFirst>
									<ItemExpr language="Java JavaScript">new TradeOffer(){{
										setQuantity(msg.getDemand());
										setBidderIdRef(msg.getBidderIdRef());
										setMin(msg.getMin());
									}}</ItemExpr>
								</AddFirst>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellOffer" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6OfferToSell" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("cMarket rso")</ValueExpr></Slot>
							<MultiValuedSlot property="sellOffers">
								<AddFirst>
									<ItemExpr language="Java JavaScript">new TradeOffer()</ItemExpr>
								</AddFirst>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("cMarket CLEAR")</ValueExpr></Slot>
							<Call procedure="clear" contextObjectVariable="m"></Call>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Return_BuyOffers" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="Java JavaScript">this.m.getBuyOffers()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ObjectValueExpr objectVariable="o"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Return_SellOffers" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="Java JavaScript">this.m.getSellOffers()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ObjectValueExpr objectVariable="o"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
			<AgentType name="BS6LaborMarket" superType="BS6Market">
				<Attribute type="Float" name="totalBudget"/>
				<ComplexDataProperty name="buyOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="sellOffers" type="TradeOffer" upperMultiplicity="unbounded"/>
				<ComplexDataProperty name="transactions" type="TradeOffer" upperMultiplicity="unbounded"/>
				<Attribute type="String" name="hallo"/>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<Function name="clear" resultType="void">
					<Body language="Java"><![CDATA[
						getTransactions().clear();
						java.util.Collections.shuffle( getBuyOffers(), new java.util.Random() );
						java.util.Collections.shuffle( getSellOffers(), new java.util.Random() );
						int low = 0;
						double sum = 0;
						for (TradeOffer employer : getBuyOffers()) {
							sum += employer.getQuantity();
							int high = (int) (Math.min(1, sum / getTotalBudget()) * getSellOffers().size());
				
							double wage = employer.getQuantity() / (high - low);
							for (int i = low; i < high; i++) {
								sim.model.dataTypes.TradeOffer o = new sim.model.dataTypes.TradeOffer();
					            o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(true);
				            	o.setBidderIdRef(employer.getBidderIdRef());
				            	getTransactions().add(o); 
				            	o = new sim.model.dataTypes.TradeOffer();
				            	o.setProduct("Labor");
				            	o.setQuantity(1);
				            	o.setPrice(wage);
				            	o.setBuy(false);
				            	o.setBidderIdRef(getSellOffers().get(i).getBidderIdRef());
				            	getTransactions().add(o); 
							}
							low = high;
						}
						setTotalBudget(0);
						getBuyOffers().clear();
						getSellOffers().clear();
					]]></Body>
				</Function>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_BuyOffer" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6OfferToBuy" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("lMarket rbo")</ValueExpr></Slot>
							<MultiValuedSlot property="buyOffers">
								<AddFirst>
									<ItemExpr language="Java JavaScript">new TradeOffer(){{
										setQuantity(msg.getDemand());
										setBidderIdRef(msg.getBidderIdRef());
										setMin(msg.getMin());
										}}</ItemExpr>
								</AddFirst>
							</MultiValuedSlot>
							<Slot property="totalBudget">
								<ValueExpr language="Java JavaScript">getTotalBudget() + msg.getDemand()</ValueExpr>
							</Slot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Accept_SellOffer" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>BuyOffers are stored</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="BS6OfferToSell" messageVariable="msg"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("lMarket rso")</ValueExpr></Slot>
							<MultiValuedSlot property="sellOffers">
								<AddFirst>
									<ItemExpr language="Java JavaScript">new TradeOffer()</ItemExpr>
								</AddFirst>
							</MultiValuedSlot>
						</UPDATE-AGT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Clear" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>The market gets cleared</dc:description>
					</documentation>
					<WHEN eventType="InMessageEvent" messageType="ClearMarket"/>
					<DO>
						<UPDATE-AGT>
							<Slot property="hallo"><ValueExpr language="Java">sim.controller.Global.hallo("lMarket CLEAR")</ValueExpr></Slot>
							<Call procedure="clear" contextObjectVariable="m"></Call>
						</UPDATE-AGT>
						<SCHEDULE-EVT>
							<ReminderEventExpr>
								<ReminderMsg language="Java JavaScript">"transactions ready"</ReminderMsg>
							</ReminderEventExpr>
						</SCHEDULE-EVT>
					</DO>
				</ReactionRule>
				<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
				<ReactionRule name="Return_TradeOffers" agentVariable="m">
					<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
					<documentation>
						<dc:description>Done trades are returned to the persons</dc:description>
					</documentation>
					<WHEN eventType="ReminderEvent" eventVariable="evt" />
					<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
						<ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
					</FOR-ListItemVariable>
					<IF language="Java"><![CDATA[ this.evt.getReminderMsg().equals("transactions ready") ]]></IF>
					<IF language="JavaScript"><![CDATA[ this.evt.getReminderMsg() === "transactions ready" ]]></IF>
					<THEN>
						<SCHEDULE-EVT>
							<OutMessageEventExpr messageType="MatchingOffer">
								<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
								<Slot property="offer">
									<ObjectValueExpr objectVariable="o"/>
								</Slot>
							</OutMessageEventExpr>
						</SCHEDULE-EVT>
					</THEN>
				</ReactionRule>
			</AgentType>
		</EntityTypes>
		
	<EnvironmentRules>
		<!-- BS6 Init -->
		<EnvironmentRule name="Create_InitialBuyOffers">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<FOR-ObjectVariable variable="l" objectType="BS6Laborer" />
			<DO>
				<UPDATE-ENV>
					<Create>
						<Object type="TradeOffer" objectVariable="o">
							<Slot property="product" value="Labor" />
							<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">this.l.getId()</ValueExpr></Slot>
							<Slot property="quantity" value="1" />
						</Object>
					</Create>
					<UpdateObject objectVariable="m">
						<MultiValuedSlot property="buyOffers">
							<AddLast itemVariable="o" />
						</MultiValuedSlot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<EnvironmentRule name="Create_InitialSellOffers">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<FOR-ObjectVariable variable="f" objectType="BS6Firm" />
			<DO>
				<UPDATE-ENV>
					<Create>
						<Object type="TradeOffer" objectVariable="o">
							<Slot property="product" value="Labor" />
							<Slot property="bidderIdRef"><ValueExpr language="Java JavaScript">this.f.getId()</ValueExpr></Slot>
							<Slot property="quantity" value="1" />
						</Object>
					</Create>
					<UpdateObject objectVariable="m">
						<MultiValuedSlot property="buyOffers">
							<AddLast itemVariable="o" />
						</MultiValuedSlot>
					</UpdateObject>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<EnvironmentRule name="Initial_Clear_LaborMarket">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket" />
			<DO>
				<UPDATE-ENV>
					<Call procedure="clear" contextObjectVariable="m"></Call>
				</UPDATE-ENV>
			</DO>
		</EnvironmentRule>
		<EnvironmentRule name="Initial_Send_MatchingOffers">
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="m" objectType="BS6LaborMarket"></FOR-ObjectVariable>
			<FOR-ListItemVariable variable="o" listItemType="TradeOffer">
				<ListExpr language="Java JavaScript">this.m.getTransactions()</ListExpr>
			</FOR-ListItemVariable>
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="MatchingOffer">
						<SenderIdRef language="Java">m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java JavaScript">this.o.getBidderIdRef()</ReceiverIdRef>
						<Slot property="offer">
							<ObjectValueExpr objectVariable="o"/>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<!--<EnvironmentRule name="InitializeOwnership">
			<documentation>
				<dc:description>Finds an owner for all firms</dc:description>
			</documentation>
			<WHEN eventType="Init"/>
			<FOR-ObjectVariable variable="f" objectType="Firm" />
			<FOR-ObjectVariable variable="o" objectType="Owner" />
			<IF language="Java JavaScript"><![CDATA[ (this.o.getFirm() == null) && (this.f.getOwner() == null) ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner"><ObjectValueExpr objectVariable="o"/></Slot>
					</UpdateObject>
					<UpdateObject objectVariable="o">
						<Slot property="firm"><ObjectValueExpr objectVariable="f"/></Slot>
					</UpdateObject>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>-->
		<!-- ============================= -->
		<EnvironmentRule name="AtStartOfDayEat_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Every person tries to eat, if he can't then he dies</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<!--<FOR-ObjectVariable variable="p" objectType="Person" />-->
			<FOR-ObjectVariable variable="p" objectType="BS6Laborer" />
			<!--<IF language="Java JavaScript"><![CDATA[ this.p.getAssetByName("Food").withdraw(this.p.getEAT_AMOUNT()) < this.p.getEAT_AMOUNT() ]]></IF>-->
			<IF language="Java JavaScript"><![CDATA[ this.p.getAssetByName("Food").withdraw(1) < 1 ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<DestroyObject><ObjectIdRef language="Java JavaScript">this.p.getId()</ObjectIdRef></DestroyObject>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>
		<!-- ============================= -->
		<!--<EnvironmentRule name="CheckBankrupt_ER">
			<documentation>
				<dc:description>If a farm  has no more money, food and labor it is shut down</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay" eventVariable="evt" />
			<FOR-ObjectVariable variable="f" objectType="Farm" />
			<IF language="Java"><![CDATA[ this.f.getAssetByName("Food").getQuantity() == 0.0 && this.f.getAssetByName("Labor").getQuantity() == 0.0 && this.f.getAssetByName("Money").getQuantity() == 0.0 ]]></IF>
			<IF language="JavaScript"><![CDATA[ this.f.getAssetByName("Food").getQuantity() === 0.0 && this.f.getAssetByName("Labor").getQuantity() === 0.0 && this.f.getAssetByName("Money").getQuantity() === 0.0 ]]></IF>
			<THEN>
				<UPDATE-ENV>
					<UpdateObject objectVariable="f">
						<Slot property="owner" value="null" />
					</UpdateObject>
					<DestroyObject objectVariable="f"/>
				</UPDATE-ENV>
			</THEN>
		</EnvironmentRule>-->
		<!-- ====================================== -->
		<EnvironmentRule name="StartOfDay_Rule_ER">
			<!-- ====================================== -->
			<documentation>
				<dc:description>
				 For all markets that exist, the market price of the last day is send to every person
				</dc:description>
			</documentation>
			<WHEN eventType="StartOfDay"/>
			<!--<FOR-ObjectVariable variable="m" objectType="Market" />-->
			<FOR-ObjectVariable variable="m" objectType="BS6ConsumerMarket" />
			<FOR-ObjectVariable variable="p" objectType="EconomicAgent" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="StartOfDay_Notification">
					    <SenderIdRef language="Java JavaScript">this.m.getId()</SenderIdRef>
						<ReceiverIdRef language="Java JavaScript">this.p.getId()</ReceiverIdRef>
						<!--<Slot property="price">
							<PropertyValueExpr entityVariable="m" property="lastMarketPrice"/>
							<PropertyValueExpr entityVariable="m" property="mktPrice"/>
						</Slot>
						<Slot property="marketType">
							<PropertyValueExpr entityVariable="m" property="commodity"/>
							</Slot>-->
						<Slot property="price">
							<PropertyValueExpr entityVariable="m" property="mktPrice"/>
						</Slot>
						<Slot property="marketType">
							<PropertyValueExpr entityVariable="m" property="good"/>
						</Slot>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
		<!-- ============================= -->
		<EnvironmentRule name="StartWork_ER">
			<!-- ============================= -->
			<documentation>
				<dc:description>Act_msg is sent to every person</dc:description>
			</documentation>
			<WHEN eventType="StartWork"/>
			<FOR-ObjectVariable variable="p" objectType="EconomicAgent"></FOR-ObjectVariable>
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="Act_msg" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.p.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>	
		<!-- ===================================== -->
		<EnvironmentRule name="CloseMarket_ER">
		<!-- ===================================== -->
			<documentation>
				<dc:description>ClearMarket is send to every market</dc:description>
			</documentation>
			<WHEN eventType="CloseMarket"/>
			<!--<FOR-ObjectVariable variable="m" objectType="Market" />-->
			<FOR-ObjectVariable variable="m" objectType="BS6Market" />
			<DO>
				<SCHEDULE-EVT>
					<InMessageEventExpr messageType="ClearMarket" senderIdRef="0">
						<ReceiverIdRef language="Java JavaScript">this.m.getId()</ReceiverIdRef>
					</InMessageEventExpr>
				</SCHEDULE-EVT>
			</DO>
		</EnvironmentRule>
	</EnvironmentRules>	
		
	</SimulationModel>
	<!-- ======================= -->
	<InitialState>
	<!-- ======================= -->
	<!--	<Agent name="FoodMarket" id="2" type="ContinuousCommodityMarket">
		<Slot property="lastMarketPrice" value="0.2" />
			<Slot property="commodity" value="Food"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agent name="LaborMarket" id="3" type="ContinuousCommodityMarket">			
			<Slot property="lastMarketPrice" value="0.4" />
			<Slot property="commodity" value="Labor"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agent name="UtilityMarket" id="4" type="DiscreteCommodityMarket">	
			<Slot property="lastMarketPrice" value="1.0" />
			<Slot property="commodity" value="Utility"></Slot>
			<Slot property="currency" value="Money"></Slot>
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agent>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agents type="Laborer" rangeStartID="1000" rangeEndID="1174">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
						{
							add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
						}
				} ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(60.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="laborSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript">new js.util.ArrayList()</ValueExpr>
			</Slot>
		</Agents>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agents type="Owner" rangeStartID="2000" rangeEndID="2009">		
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(33.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(90.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="foodBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="foodSellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="utilityBuyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="firm" value="null"></Slot>
		</Agents>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agents type="Farm" rangeStartID="3000" rangeEndID="3004">	
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
				        {
				            add(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
				        }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(20.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[new ArrayList<TradeOffer>()]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[new js.util.ArrayList()]]></ValueExpr>
			</Slot>
		</Agents>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->		
		<!--<Agents type="Factory" rangeStartID="4000" rangeEndID="4004">		
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					  {	
						add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 5));;
					  }
				    } ]]>
				</ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(00.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 5))
				]]></ValueExpr>
			</Slot>
			<Slot property="buyList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
			<Slot property="sellList">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ new js.util.ArrayList() ]]></ValueExpr>
			</Slot>
		</Agents>-->
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<Agents type="BS6Laborer" rangeStartID="5000" rangeEndID="5001">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
						{
							add(new aors.util.economics.ContinuousQuantity(15.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
							add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
							add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
						}
				} ]]></ValueExpr>
				<ValueExpr language="JavaScript"><![CDATA[ 
					new js.util.ArrayList(new aors.util.economics.ContinuousQuantity(15.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")), 
					new aors.util.economics.ContinuousQuantity(100.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")), 
					new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")),
					new aors.util.economics.DiscreteQuantity("Utility", 0))
				]]></ValueExpr>
			</Slot>
			<Slot property="income" value="100" />
			<Slot property="savingRate" value="0.9" />
		</Agents>
		<Agents type="BS6NFirm" rangeStartID="6000" rangeEndID="6001">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					        {
					            add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Food", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(30.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
					        }
					    } ]]>
				</ValueExpr>
			</Slot>
			<Slot property="A" value="2"></Slot>
			<Slot property="beta" value="0.5"></Slot>
			<Slot property="phi" value="0.5"></Slot>
			<Slot property="lambda" value="0.2"></Slot>
			<Slot property="eUrilThreshold" value="0.9"></Slot>
			<Slot property="rUtilThreshold" value="0.75"></Slot>
			<Slot property="output" value="60"></Slot>
			<Slot property="wageBudget" value="100"></Slot>
			<Slot property="loan" value="1000"></Slot>
			<Slot property="capitalCost" value="0"></Slot>
		</Agents>
		<Agents type="BS6EFirm" rangeStartID="7000" rangeEndID="7001">
			<Slot property="assets">
				<ValueExpr language="Java">
					<![CDATA[ new ArrayList<aors.util.economics.Quantity>(){
					        {
								add(new aors.util.economics.ContinuousQuantity(30.0, new aors.util.economics.ContinuousQuantityType("Money", "Stk")));
								add(new aors.util.economics.ContinuousQuantity(0.0, new aors.util.economics.ContinuousQuantityType("Labor", "Stk")));
								add(new aors.util.economics.DiscreteQuantity( "Utility", 0));
					        }
					    } ]]>
				</ValueExpr>
			</Slot>
			<Slot property="A" value="2"></Slot>
			<Slot property="beta" value="0.5"></Slot>
			<Slot property="phi" value="0.5"></Slot>
			<Slot property="lambda" value="0.2"></Slot>
			<Slot property="eUrilThreshold" value="0.9"></Slot>
			<Slot property="rUtilThreshold" value="0.75"></Slot>
			<Slot property="output" value="40"></Slot>
			<Slot property="wageBudget" value="100"></Slot>
			<Slot property="loan" value="0"></Slot>
			<Slot property="capitalCost" value="0"></Slot>
		</Agents>
		<Agent type="BS6ConsumerMarket" id="10">
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent type="BS6ConsumerMarket" id="11">
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<sim.model.dataTypes.TradeOffer>() ]]></ValueExpr>
			</Slot>
		</Agent>
		<Agent type="BS6LaborMarket" id="12">
			<Slot property="buyOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
			</Slot>
			<Slot property="sellOffers">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
			</Slot>
			<Slot property="transactions">
				<ValueExpr language="Java"><![CDATA[ new ArrayList<TradeOffer>() ]]></ValueExpr>
			</Slot>
		</Agent>
		<ExogenousEvent type="Init" occurrenceTime="1" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="1" type="StartOfDay" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="3" type="StartWork" />
		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
		<ExogenousEvent occurrenceTime="6" type="CloseMarket" />
	</InitialState>
	
	<!-- =================================================== -->
	<UserInterface supportedLanguages="en">
		<StatisticsUI>
			<StatisticsVariableUI variable="PriceFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">FoodPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the foodmarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersFood" comparisonGroup="pricevsfood">
				<Label>
					<Text xml:lang="en">Food SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for food</Text>
				</Hint>
			</StatisticsVariableUI>
			<!--<StatisticsVariableUI variable="PriceLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">LaborPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the labormarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersLabor" comparisonGroup="pricevslabor">
				<Label>
					<Text xml:lang="en">Labor SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
				</StatisticsVariableUI>-->
			<StatisticsVariableUI variable="PriceUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">UtilityPrice</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">Average price of the utilitymarket</Text>
				</Hint>
				<Format decimalPlaces="2">
					<Currency>EUR(&#8364;)</Currency>
				</Format>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="BuyOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility BuyOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of buyoffers for utility</Text>
				</Hint>
			</StatisticsVariableUI>
			<StatisticsVariableUI variable="SellOffersUtility" comparisonGroup="pricevsutility">
				<Label>
					<Text xml:lang="en">Utility SellOffers</Text>
				</Label>
				<Hint>
					<Text xml:lang="en">number of selloffers for labor</Text>
				</Hint>
			</StatisticsVariableUI>
			
		</StatisticsUI>
		<AnimationUI>
			<DisplayDescription>
				<aors:HtmlText xmlns="http://www.w3.org/1999/xhtml"><p>This is just an experimental<br/>
				visualization!</p></aors:HtmlText>
			</DisplayDescription>
			
			<Views>
				<ObjectView objectType="Laborer">
					<Shape2D y="400">
						<Rectangle width="4" height="10" fill="blue">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-6000" a1="6"/>
<!--
							<ShapePropertyVisualizationMap shapeProperty="fillR" property="moneyAmount" mapType="polynomial" a1="1"/>
-->
						</Rectangle>
					</Shape2D>
				</ObjectView>
				<ObjectView objectType="Farm">
					<Shape2D y="50">
						<Rectangle width="30" positioning="LeftBottom" texture="backgrounds\GreenLeaves.jpg">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-150000" a1="50"/>
							<ShapePropertyVisualizationMap shapeProperty="height" property="amountProduced" mapType="polynomial" a0="20" a1="2"/>
						</Rectangle>
					</Shape2D>
				</ObjectView>
				<ObjectView objectType="Factory">
					<Shape2D y="250">
						<Rectangle width="40" positioning="LeftBottom" texture="backgrounds\LightgrayMarble.jpg">
							<ShapePropertyVisualizationMap shapeProperty="x" property="id" mapType="polynomial" a0="-200000" a1="50"/>
							<ShapePropertyVisualizationMap shapeProperty="height" property="amountProduced" mapType="polynomial" a0="20" a1="2"/>
						</Rectangle>
					</Shape2D>
				</ObjectView>
			</Views>
		</AnimationUI>
		
	</UserInterface>
</SimulationScenario>
